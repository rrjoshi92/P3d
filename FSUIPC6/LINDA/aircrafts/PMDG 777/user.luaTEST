-- Dummy user functions file
-- ===========================

-- This file is loaded right after main actions.lua script loaded.
-- You can use this file to:
-- 1. Override any functions or settings in main script
-- 2. Execute any desired startup sequence for this aircraft (i.e. your own c&d state macro)
-- 3. ... use your imagination

-- This file will not be replaced on the aircraft module update, so all of your modifications
-- will remain active. Best practice from this moment is DO NOT MAKE ANY CHANGES in original
-- actions.lua file. Make all the modifications HERE.

-- insert your code below here:

function InitVars ()
    ipc.log("Lancement fonction InitVars. actions.lua.") -- Balise Francis	
	tim = ipc.elapsedtime()
	ipc.control(65794,1)--Pause ON
	ipc.log("Pause ON InitVars. actions.lua.") -- Balise Francis	
	tim = ipc.elapsedtime()
	env = os.getenv("USERPROFILE")
	env = env.."\\Documents\\AutoIt\\"
    FSXchem1 = ipc.readSTR(0x3C00,255)
	ipc.log("FSXchem1 = "..ipc.readSTR(0x3C00,255)) -- Balise Francis	
    long = string.find(FSXchem1,"SimObjects")
	ipc.log("long = "..string.find(FSXchem1,"SimObjects")) -- Balise Francis	
    FSXchem1 = string.sub(FSXchem1,1,long-1)
	ipc.log("FSXchem1 = "..string.sub(FSXchem1,1,long-1)) -- Balise Francis
    FSXchem = FSXchem1.."Modules\\" 
	ipc.log(FSXchem) -- Balise Francis

	--ipc.log("On entre dans les 1'30") -- Ajout pour test
    ipc.sleep(15000) -- FRANCIS POUR RETARDER ET ATTENDRE LE CHARGEMENT DE P3D	                                                         ALAIN
	
    if ipc.readUB(0x66FF) == 0 then
	ext.run(env.."ASOpenV4.exe")
	ipc.log("Commande ASOpenV4.exe envoyée") -- Ajout pour test
	ipc.sleep(2000) -- je passe de 2000 à 60000 pour test Alain
	tim = ipc.elapsedtime()
	while ext.hasfocus() == false do
	ipc.log("Fin du ext.hasfocus ASOpen.") -- Ajout pour test
	ipc.sleep(1000) -- Francis je passe de 1000 à 30000 pour attendre la fin de Linda restarting etc etc et la fin de AsOpen          ALAIN
	end
	ipc.log(((ipc.elapsedtime() - tim)/1000).. " AsOpen. InitVars")
	--ext.run(FSXchem.."LindaOpen.exe")
	--ext.run(env.."Test LINDA.exe") -- Ajour Francis pour lancer la console et réduire la fenêtre
	ext.run(env.."LindaFrancisOpenV4.exe") -- Ajout Francis pour remplacer le LindaOpen.exe                                             ALAIN
	ipc.sleep(15000)
	while ext.hasfocus() == false do
	ipc.log("Fin du ext.hasfocus LindaOpen.") -- Ajout pour test
	ipc.sleep(1000)
	end
	ipc.log(((ipc.elapsedtime() - tim)/1000).. " LindaOpen. InitVars")
    ipc.writeUB(0x66FF,10)-- TRES IMPORTANT ICI CAR ON VA PASSER DANS INIT777 EN SHUNTANT SITUATION TEST ET PASSER A LA LIGNE 151
	ipc.log("Valeur de 66FF = "..ipc.readUB(0x66FF))
	ipc.log("Fin de la fonction InitVars. actions.lua.") -- Balise Francis	
    end
end

function LisCeci(strg)
    ext.run("C:\\lua\\SayStatic.exe", strg, EXT_HIDE)
	--ipc.log("Lancement du SayStatic.exe") -- Balise Francis. Ne sert qu'à indiquer que le copilote va parler.
end

function INIT777 ()
    ipc.log("Lancement fonction INIT777. actions.lua.") -- Balise Francis	
	--ipc.writeUW (0x0262,1)
    FSXchem1 = ipc.readSTR(0x3C00,255)
	ipc.log(FSXchem1) -- Balise Francis
    long = string.find(FSXchem1,"SimObjects")
    FSXchem1 = string.sub(FSXchem1,1,long-1)
    FSXchem = FSXchem1.."Modules\\"
    FSXsound = FSXchem1.."sound\\"
    ipc.log(FSXchem)
	ipc.log(FSXsound) -- Balise Francis
    ipc.set("FSXchem",FSXchem)
    ipc.sleep(100)
    ipc.set("FSXsound",FSXsound)	
    ext.focus(0)
	math.randomseed(os.time())
	math.random() math.random() math.random()
	ipc.writeSTR(0x66E0,"000",3)
    ipc.setdisplay (1920,0,200,120)-- A CONSERVER
	sit1 = ipc.readSTR(0x1000,255)
    _loggg('[USER] Sit1 = ' .. sit1) -- awg
    long = string.find(sit1,"les\\")
    if long == nil then
    long = string.find(sit1,"r X\\")
    end
    sit=string.sub(sit1,1,long+3)
    doc = sit
    Chemsav = sit.."Sauvegarde\\"
    Chemlog = sit.."Vol_en_Cours\\"
    Chemsav1 = sit.."Sauvegarde"
    Chemlog1 = sit.."Vol_en_Cours"
    Chemsavtest =  sit.."Sauvegarde_test\\"
    Chemsav1test = sit.."Sauvegarde_test"
	ipc.sleep(100)
    ipc.set("Chemlog",Chemlog)
	ipc.sleep(100)
    ipc.set("Chemsav",Chemsav)
	ipc.sleep(100)
	ipc.log("On part dans la fonction Situation test. INIT777 actions.lua.") -- Balise Francis		
    Situation_test()-- C'EST ELLE QUI DETERMINE LA VALEUR DE 66EF 2 POUR TEST 1 POUR SAUV 
	ipc.log("Fin Situation test. INIT777 actions.lua.") -- Balise Francis	
	if ipc.readUB(0x66EF) == 2 then
    ipc.log("Valeur de l'offset 66EF = "..ipc.readUB(0x66EF).." INIT777 actions.lua.") -- ajout Francis pour surveiller l'offset   
	ext.run(env.."RestortestV4.exe")
	ipc.log("Lancement RestortestV4.exe. INIT777 actions.lua.")
	ipc.sleep(500)
	ipc.writeUB(0x66EF,1)-- REMIS A 1 ON PASSE A LA LIGNE 86
	ipc.log("1 Valeur de l'offset 66EF = "..ipc.readUB(0x66EF).." INIT777 actions.lua.") -- ajout Francis pour surveiller l'offset   
	ipc.sleep(250)
	elseif ipc.readUB(0x66EF) == 1 then-- RESTERA A 1 ET PASSERA A LA LIGNE 86 
	ipc.log("2 Valeur de l'offset 66EF = "..ipc.readUB(0x66EF).." INIT777 actions.lua.") -- ajout Francis pour surveiller l'offset   
	ext.run(env.."RestorsauvV4.exe")
	ipc.log("Lancement RestorsauvV4.exe. INIT777 actions.lua.")
	end
	if ipc.readUB(0x66EF) == 1 then
	ipc.log("3 Valeur de l'offset 66EF = "..ipc.readUB(0x66EF).." INIT777 actions.lua.") -- ajout Francis pour surveiller l'offset   
	ipc.control(65795,1)-- PAUSE_OFF
	ipc.log("Pause OFF. INIT777 actions.lua.") -- Balise Francis
	ipc.control(65731,1)-- SLEW_ON
	ipc.log("Slew ON. INIT777 actions.lua.") -- Balise Francis
	ipc.log("On part dans la fonction Restauration. INIT777 actions.lua.")
	Restauration ()
	ipc.log("Fin de la fonction Restauration . INIT777 actions.lua.") -- Balise Francis
	os.remove(Chemin)
	Radio ()
	nomt="Route"
	ipc.writeSTR(0x3F04,nomt.."")
	ipc.writeUB(0x3F00,1)
	--ipc.writeUW(0x034E,13975)
	ipc.writeUB(0x66C2,1)
	ipc.runlua("777_annonce")
	ipc.log("Lancement 777 annonce lua. INIT777 actions.lua.")
	ipc.sleep(1000)
	ipc.set("annon",1)
	--ipc.runlua("LogWp")
	ipc.sleep(1000)
	ipc.runlua("NmCompt")
	ipc.log("Lancement NmCompt lua. INIT777 actions.lua.")
	ipc.sleep(1000)
	ipc.runlua("kml")
	ipc.log("Lancement kml lua. INIT777 actions.lua.")
	ipc.sleep(1000)
	ipc.runlua("777NGX")
	ipc.log("Lancement 777NGX lua. INIT777 actions.lua.")
	ipc.sleep(1000)
	ipc.log("4 Valeur de l'offset 66EF = "..ipc.readUB(0x66EF).." INIT777 actions.lua.") --en attente d'intégration car syntaxe mauvaise mais je ne comprends pas pourquoi	
		if ipc.readUB(0x66EF) == 1 then ipc.writeUB(0x66EF,0) end		
	ipc.runlua("Sauvegarde_Auto_777")-- LANCE LA SAUVEGARDE AUTO DANS UNE RESTAURATION
	ipc.log("Lancement Sauvegarde Auto 777 lua. INIT777 actions.lua.")
	--ipc.writeUW (0x0262,0)
	os.remove(Chemlog.."NmDistSav.log")
	ipc.runlua("pfpx")
	ipc.log("Lancement pfpx lua. INIT777 actions.lua.")
	ipc.sleep(30000)	    
	ipc.sleep(1000)
	ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
	ipc.sleep(2000)
	--UndockLuaDisplay ()
    ipc.log("On va lancer le linda-gui.ini restaurationV4.exe. INIT777 actions.lua.") -- ajout francis pour localiser le moment du lancement
	ext.run(env.."linda-gui.ini restaurationV4.exe") -- ajout Francis pour avoir les fenêtres LUA et FSUIPC en bonne place                                       ALAIN
	ipc.sleep(2000) -- ajout francis qui va avec la ligne du dessus. Si suppression dessus alors le sleep est à supprimer                                      ALAIN  
    ipc.log("On part dans la fonction Francis_Lua_Display. INIT777 actions.lua.") -- Balise Francis	
    Francis_Lua_Display ()-- FRANCIS PERSO
	--UndockSCW ()
    --Undock_Francis () -- PAS BESOIN CAR SONT DEJA SORTIES COMME STAGE1 GRACE AU LINDA GUI
	
	--Undock_SimconnectWR_Francis ()-- REMPLACE PAR LE TEST RESTAURATION CI DESSOUS
	
	--ipc.keypressplus(122,2,4)-- DEBUT POUR REMPLACER LA FONCTION DU DESSUS 122 F11 + CTRL
	--ipc.sleep(2000)-- DANS LES MODIFICATIONS
    --ipc.keypressplus(122,2,4)-- FIN MODIFICATIONS 122 F11 + CTRL
	
	-- TEST RESTAURATION SANS UNDOCKER MOUSE MOVE MOUSE CLICK
	ipc.sleep(2000)
	ipc.keypressplus(122,2,4)--FRANCIS MENU ASN GSX 122 F11 + CTRL
	ipc.sleep(2000)
	ext.run(env.."SimConnectW.exe")-- PATRICK
	ipc.log("SimConnectW.exe. INIT777 actions.lua.")
	ipc.sleep(1500)-- PATRICK
    ipc.keypress(53)-- PATRICK 54 MAIS MOI 52 CAR QUE 4 LIGNES -- 53 POUR AVOIR LE METAR ARRIVEE
	ipc.sleep(3000) --Ajout Francis pour lire le METAR arrivée                                                                        ALAIN
	ipc.keypressplus(49) --Ajout Francis pour taper première ligne du METAR arrivée                                                   ALAIN
	ipc.sleep(2000) --Ajout Francis pour le délai entre 49 et 54                                                                      ALAIN
	ipc.keypressplus(54) --Ajout Francis pour taper l'option 6 = close                                                                ALAIN
	ipc.sleep(2000)-- PATRICK
    ipc.keypressplus(114,27,4)-- PATRICK NE SERT PLUS CAR FAIT APRES. 27= CTRL2+ALT16+SHIFT1+8 DE BASE            -- JE REMETS POUR LA RESTAURATION MAIS FAUT VERIFIER SI EELE SORT NUE CAR FONCTION PLUS DANS UNDOCK FRANCIS 
    --ipc.keypress(52) EN REMARQUE POUR TESTER PATRICK 10039 10043
	
	-- FIN TEST RESTAURATION
	ipc.log("Fin test restauration. INIT777 actions.lua.") -- Balise Francis	
	
	ipc.sleep(3000)
	ipc.control(65730,1)--SLEW OFF
	ipc.log("Slew OFF. INIT777 actions.lua.") -- Balise Francis	
	ext.focus(0)
		if gmt == nil then gmt = 0 end
	ipc.log("gmt :"..gmt..". INIT777 actions.lua.")
	ipc.sleep(30000) -- Ajout Francis, attente pour stabilisation avion avant de lancer IVAP
	IVAP () -- Ajout Francis
	
	else -- QuAND LE 66EF=10 CAD SANS SAUV ET TEST ON PASSE DIRECTEMEMNT DE LA LIGNE 81 A LA 163
	
	ipc.control(65795,1)--PAUSE OFF
	ipc.log("Pause OFF. INIT777 actions.lua.") -- Balise Francis	
	--ipc.writeUW (0x0262,0)
	ipc.log("Démarrage normal. INIT777 actions.lua.")
	ext.run(env.."DemnormV4.exe")
	ipc.log("Lancement du DemnormV4.exe. INIT777 actions.lua.")
	os.remove(doc.."777_200_Sauv.fxml")
	os.remove(doc.."777_200_Sauv.wx")
	os.remove(doc.."777_300_Sauv.fxml")
	os.remove(doc.."777_300_Sauv.wx")
	--ipc.sleep(30000)
	date = os.date()
	date1 = string.sub(date,4,5)..string.sub(date,1,2)..string.sub(date,7,8)
	nomlog = "Debut_"..date1..".log"
	nomlog = Chemlog..nomlog
	os.remove(nomlog)
	ipc.set("nomlog",nomlog)
	ipc.sleep(100)
	ipc.writeLvar("NGXPilots",1)
	ipc.writeUB(0x66C2,1)
	Mod = 1
	ipc.set("Mod",1)
	pbk = 0
	ipc.set("pbk",0)
	dem = 0
	ipc.log("dem = "..dem..". Valeur mise à 0. INIT777 de l'actions.lua.")
	ipc.writeUB(0x7000,dem)
	ipc.log("La valeur de l'offset 0x7000 pour dem = "..ipc.readUB(0x7000).." INIT777 de l'actions.lua.") -- Balise Francis
	stage = 0
	ipc.writeUB(0x7001,stage)
	ipc.log("La valeur de l'offset 0x7001 pour stage = "..ipc.readUB(0x7001).." INIT777 de l'actions.lua.") -- Balise Francis
	mont = 0
	FRC = 0
	fin = 0
	baro = 0
	RW = 0
	ipc.writeUB(0x7003,RW)
	ipc.log("La valeur de l'offset 0x7003 pour RW = "..ipc.readUB(0x7003).." INIT777 de l'actions.lua.") -- Balise Francis
	nogsx = 0
	tp = 0
	metper = 0
	tpv = 0
	chkl = 0
	typ = 0
	AES = 0
	sav1 = 0
	cd = 2147483648
	cg = 536870912   
	ipc.writeUW(0x034E,13975)
    ipc.log("La valeur de l'offset 0x034E = "..ipc.readUW(0x034E).." INIT777 de l'actions.lua.") -- Balise Francis    
	ipc.sleep(100)
	Radio ()
	ipc.control(65828)--PREVIOUS VIEW
	ipc.control(65824)--CLOSE VIEW
	ipc.sleep(500)
	--ipc.keypressplus(49,11,4) 49 1 on main keyboard + CTRL + SHIFT 
	vue = 0
	ipc.writeUB(0x7002,0)
	ipc.log("La valeur de l'offset 0x7002 pour vue = "..ipc.readUB(0x7002).." INIT777 de l'actions.lua.") -- Balise Francis
	imp = 0
	ipc.control(66063)--SOUND OFF
	ipc.log("Sound OFF. INIT777 actions.lua.") -- Balise Francis	
	ipc.sleep(500)
	ipc.control(66062)--SOUND ON
	ipc.log("Sound ON. INIT777 actions.lua.") -- Balise Francis	
	--Sauvegarde ()
	ipc.runlua("Sauvegarde_Auto_777") 
	ipc.log("Lancement Sauvegarde Auto 777 lua. INIT777 de l'actions.lua.")
	end
end

function Timer ()
    --ipc.log("On est dans la fonction Timer. Timer actions.lua.") -- Balise Francis impossible car le TIMER TOURNE EN PERMANENCE	
	if ipc.readUB(0x66FF) == 10 then
	ipc.log("On part dans la fonction INIT777 de la fonction Timer car 66FF=10 envoyé par la fonction InitVars. On passe à INIT777 qui fera la situation test.") -- Balise Francis	
	INIT777 ()
    ipc.log("Fin de la fonction INIT777 De la fonction Timer et entrée dans la fonction Sauvegarde de la fonction Timer. Offsets et variables pour la restauration.") -- Balise Francis	
	Sauvegarde ()
	ipc.log("Fin de la fonction Sauvegarde de la fonction Timer. Timer actions.lua.")
	ipc.writeUB(0x66FF,0)
	ipc.log("La valeur de l'offset 66FF = 0. Timer actions.lua.") -- Balise Francis
	ipc.sleep(100)
	ipc.runlua("777COM")
    ipc.log("Lancement 777COM lua. Timer de l'actions.lua.")	
	end	
	if ipc.readUB(0x66FF) == 1 then
	ipc.log("La valeur de l'offset 66FF = 1. On va aller dans la fonction Sauvegarde dela fonction Timer. Timer actions.lua.") -- Balise Francis
	Sauvegarde ()
    ipc.log("Sauvegarde Linda OK") -- PATRICK en remarque. Moi actif pour la balise mais pourquoi sauvegarde Linda ????
	ipc.writeUB(0x66FF,0)
	ipc.log("La valeur de l'offset 66FF = 0. Timer actions.lua.") -- Balise Francis
	end
    if sinc == nil and ipc.readUB(0x66FF) == 0 then
    sinc = 1
	ipc.log("On part dans la fonction Synchro. Le 66FF=0 et le sinc==nil puis mis à 1. A la fin de la fonction Timer de l'actions.lua.") -- Ajout Francis
    Synchro ()	
    end    
end

--[[
-- ## Autopilot Dials ###############
function  NGX_AP_CRSL_show ()
    ipc.sleep(50)
    OBS1 = ipc.readLvar("L:ngx_CRSwindowL")
    if _MCP1 then
        --DspShow("CRSL", OBS1)
    else
        DspCRS(OBS1)
    end
end
function  NGX_AP_CRSR_show ()
    ipc.sleep(50)
    OBS2 = ipc.readLvar("L:ngx_CRSwindowR")
    if _MCP1 then
        --DspShow("CRSR", OBS2)
    else
        DspCRS(OBS2)
    end
end
function PMDG_AP_CRSL_inc ()
    ipc.control(70008, 16384)
    NGX_AP_CRSL_show ()
end
function PMDG_AP_CRSL_incfast ()
    local i
    for i = 1, 4 do ipc.control(70008, 16384) end
    NGX_AP_CRSL_show ()
end
function PMDG_AP_CRSL_dec ()
    ipc.control(70008, 8192)
    NGX_AP_CRSL_show ()
end
function PMDG_AP_CRSL_decfast ()
    local i
    for i = 1, 4 do ipc.control(70008, 8192) end
    NGX_AP_CRSL_show ()
end
function PMDG_AP_CRSR_inc ()
    ipc.control(70041, 16384)
    NGX_AP_CRSR_show ()
end
function PMDG_AP_CRSR_incfast ()
    local i
    for i = 1, 4 do ipc.control(70041, 16384) end
    NGX_AP_CRSR_show ()
end
function PMDG_AP_CRSR_dec ()
    ipc.control(70041, 8192)
    NGX_AP_CRSR_show ()
end
function PMDG_AP_CRSR_decfast ()
    local i
    for i = 1, 4 do ipc.control(70041, 8192) end
    NGX_AP_CRSR_show ()
end
function PMDG_AP_CRS_LR_sync ()
    -- linking to the current DME selected
    mcp_crs_mode = RADIOS_SUBMODE
end
function PMDG_AP_CRS_LR_toggle ()
    -- toggling value form 1 to 2
    -- 1 - left CRS, 2 - right CRS
    if _MCP1 then
        -- manual toggling
        mcp_crs_mode = 3 - mcp_crs_mode
    else
        -- linking to the current DME selected
        mcp_crs_mode = RADIOS_SUBMODE
    end
    if _MCP1 then
        if mcp_crs_mode == 1 then
            --DspShow('CRS', 'LEFT')
        else
            --DspShow('CRS', 'RGHT')
        end
    end
end
function PMDG_AP_CRS_LR_inc ()
    if mcp_crs_mode == 1 then
        NGX_AP_CRSL_inc ()
    else
        NGX_AP_CRSR_inc ()
    end
end
function PMDG_AP_CRS_LR_incfast ()
    if mcp_crs_mode == 1 then
        NGX_AP_CRSL_incfast ()
    else
        NGX_AP_CRSR_incfast ()
    end
end
function PMDG_AP_CRS_LR_dec ()
    if mcp_crs_mode == 1 then
        NGX_AP_CRSL_dec ()
    else
        NGX_AP_CRSR_dec ()
    end
end
function PMDG_AP_CRS_LR_decfast ()
    if mcp_crs_mode == 1 then
        NGX_AP_CRSL_decfast ()
    else
        NGX_AP_CRSR_decfast ()
    end
end
function PMDG_AP_SPD_inc ()
    if Mod == 1 then
        if  ipc.readLvar("ngx_SPDwindow")== -1 then
         PMDG_Push_SPD ()
        end
    ipc.control(69842, 256)
    --PMDG_AP_SPD_show ()
    elseif Mod == 2 then
    PMDG_EFIS_Range_inc ()
    ipc.sleep(500)
    elseif Mod == 3 then
    TCAS_OUTER_Rinc ()
    ipc.sleep(500)
    end
end
function PMDG_AP_SPD_incfast ()
    local i
    for i = 1, 5 do ipc.control(69842, 256) end
    PMDG_AP_SPD_show ()
end
function PMDG_AP_SPD_dec ()
    if Mod == 1 then
        if  ipc.readLvar("ngx_SPDwindow")== -1 then
        PMDG_Push_SPD ()
        end
    ipc.control(69842, 128)
    --PMDG_AP_SPD_show ()
    elseif Mod == 2 then
    PMDG_EFIS_Range_dec ()
    ipc.sleep(500)
    elseif Mod == 3 then
    TCAS_OUTER_Linc ()
    ipc.sleep(500)
    end
end
function PMDG_AP_SPD_decfast ()
    local i
    for i = 1, 5 do ipc.control(69842, 128) end
    PMDG_AP_SPD_show ()
end
function PMDG_AP_SPD_show ()
    ipc.sleep(50)
    ngx_spd = ipc.readLvar("L:ngx_SPDwindow")
    if ngx_spd < 0 then ngx_spd = 0 end
    DspSPD(ngx_spd)
end
function PMDG_AP_HDG_BANK_toggle ()
    -- toggling value form 1 to 2
    -- 1 - HDG, 2 - BANK
    mcp_hdg_mode = 3 - mcp_hdg_mode
    if mcp_hdg_mode == 1 then
        --DspShow('HDG', '--')
    else
        PMDG_AP_BANK_show ()
    end
end
function PMDG_AP_HDG_inc ()
    if Mod == 1 then
    --if mcp_hdg_mode == 1 then
    ipc.control(71812, 256)
    --else
        --NGX_AP_BANK_inc ()
     elseif Mod == 2 then
     PMDG_Min_inc ()
     elseif Mod == 3 then
     COM1_OUTER_inc ()
     end
    --end
    --PMDG_AP_HDG_show ()
end
function PMDG_AP_HDG_incfast ()
      if Mod == 1 then
        local i
        for i = 1, 5 do ipc.control(71812, 256) end
      elseif Mod == 2 then
      local i
        for i = 1, 10 do ipc.control(69814, 256) end
        --NGX_AP_BANK_inc ()
       end
    --end
    --PMDG_AP_HDG_show ()
end
function PMDG_AP_HDG_dec ()
     if Mod == 1 then
        ipc.control(71812, 128)
    elseif Mod == 2 then
      PMDG_Min_dec ()
    elseif Mod == 3 then
     COM1_OUTER_dec ()
    end
    --PMDG_AP_HDG_show ()
end
function PMDG_AP_HDG_decfast ()
       if Mod == 1 then
        local i
        for i = 1, 5 do ipc.control(71812, 128) end
    elseif Mod == 2 then
        local i
        for i = 1, 10 do ipc.control(69814, 128) end
    end
    --PMDG_AP_HDG_show ()
end
function PMDG_AP_HDG_show ()
    ipc.sleep(10)
    ngx_hdg = ipc.readLvar("L:ngx_HDGwindow")
    DspHDG(ngx_hdg)
end
function PMDG_AP_BANK_show ()
    if ipc.readLvar('switch_2181_a') == 0 then
        --DspShow ("BANK", "auto")
    elseif ipc.readLvar('switch_2181_a') == 10 then
        --DspShow ("BANK", " 5")
    elseif ipc.readLvar('switch_2181_a') == 20 then
        --DspShow ("BANK", " 10")
    elseif ipc.readLvar('switch_2181_a') == 30 then
        --DspShow ("BANK", " 15")
    elseif ipc.readLvar('switch_2181_a') == 40 then
        --DspShow ("BANK", " 20")
    elseif ipc.readLvar('switch_2181_a') == 50 then
        --DspShow ("BANK", " 25")
    end
end
function PMDG_AP_BANK_inc ()
    ipc.control(71813, 256)
    PMDG_AP_BANK_show ()
end
function PMDG_AP_BANK_dec ()
    ipc.control(71813, 128)
    PMDG_AP_BANK_show ()
end
function PMDG_AP_ALT_inc ()
    if Mod == 1 then
    ipc.control(71882, 256)
    --PMDG_AP_ALT_show ()
    elseif Mod == 2 then
    PMDG_Min_RadBaro ()
    ipc.sleep (300)
    elseif Mod == 3 then
    COM1_INNER_inc ()
    end
end
function PMDG_AP_ALT_incfast ()
    local i
    for i = 1, 5 do ipc.control(71882, 256) end
    PMDG_AP_ALT_show ()
end
function PMDG_AP_ALT_dec ()
    if Mod == 1 then
    ipc.control(71882, 128)
    --PMDG_AP_ALT_show ()
    elseif Mod == 2 then
    PMDG_Min_reset ()
    ipc.sleep (300)
    elseif Mod == 3 then
    COM1_INNER_dec ()
    end
end
function PMDG_AP_ALT_decfast ()
    local i
    for i = 1, 5 do ipc.control(71882, 128) end
    PMDG_AP_ALT_show ()
end
function PMDG_AP_ALT_show ()
    ipc.sleep(10)
    ngx_alt = ipc.readLvar("L:ngx_ALTwindow")
    DspALT(round(ngx_alt/100))
end
function PMDG_AP_VS_inc ()
    if Mod == 1 then
        if  ipc.readLvar("ngx_MCP_VS")==0 then
        PMDG_VS_FPA ()
        end
    ipc.control(69854, 128)
    --PMDG_AP_VS_show ()
    elseif Mod == 2 then
    PMDG_EFIS_Mode_dec ()
    ipc.sleep(500)
    elseif Mod == 3 then
    TCAS_INNER_Rinc ()
    ipc.sleep(500)
    end
end
function PMDG_AP_VS_dec ()
    if Mod == 1 then
        if  ipc.readLvar("ngx_MCP_VS")==0 then
        PMDG_VS_FPA ()
        end
    ipc.control(69854, 256)
    --PMDG_AP_VS_show ()
    elseif Mod == 2 then
    PMDG_EFIS_Mode_inc ()
    ipc.sleep(500)
    elseif Mod == 3 then
    TCAS_INNER_Linc ()
    ipc.sleep(500)
    end
end
function PMDG_AP_VS_show ()
    ipc.sleep(10)
    vvs = ipc.readLvar("L:ngx_VSwindow")
    if vvs == -20000 then vvs = 0 end
    if _MCP1 then
        local val = tostring(math.abs(vvs / 10))
        while string.len(val) < 3 do val = '0' .. val end
        if vvs == 0 then
            val = ' 00 '
        elseif vvs > 0 then
            val = '+' .. val
        else
            val = '-' .. val
        end
        --DspShow (" VS ", val)
    else
        DspVVS(vvs/100)
    end
end
-- ## AP Buttons ###############
function PMDG_AP_FD1_on ()
    if ipc.readLvar('switch_202_a') == 100 then
    ipc.control(69834, cg)
    end
    --DspShow ("FD1", "on")
end
function PMDG_AP_FD1_off ()
    if ipc.readLvar('switch_202_a') == 0 then
    ipc.control(69834, cg)
    end
    --DspShow ("FD1", "off")
end
function PMDG_AP_FD1_toggle ()
	if _tl("switch_202_a", 100) then
       PMDG_AP_FD1_on ()
	else
       PMDG_AP_FD1_off ()
	end
end
---
function PMDG_AP_FD2_on ()
    if ipc.readLvar('switch_230_a') == 100 then
    ipc.control(69862, cg)
    end
    --DspShow ("FD2", "on")
end
function PMDG_AP_FD2_off ()
    if ipc.readLvar('switch_230_a') == 0 then
    ipc.control(69862, cg)
    end
    --DspShow ("FD2", "off")
end
function PMDG_AP_FD2_toggle ()
	if _tl("switch_230_a", 100) then
       PMDG_AP_FD2_on ()
	else
       PMDG_AP_FD2_off ()
	end
end
---
function PMDG_AP_both_FD_on ()
    PMDG_AP_FD1_on ()
    ipc.sleep(30)
    PMDG_AP_FD2_on ()
end
function PMDG_AP_both_FD_off ()
    PMDG_AP_FD1_off ()
    ipc.sleep(30)
    PMDG_AP_FD2_off ()
end
function PMDG_AP_both_FD_toggle ()
    PMDG_AP_FD1_toggle ()
    ipc.sleep(30)
    PMDG_AP_FD2_toggle ()
end
--
function PMDG_AP_AT1_on ()
    if ipc.readLvar('switch_204_a') == 100 then
    ipc.control(69836, cg)
    end
    --DspShow ("AT1", "on")
end
function PMDG_AP_AT1_off ()
    if ipc.readLvar('switch_204_a') == 0 then
    ipc.control(69836, cg)
    end
    --DspShow ("AT1", "off")
end
function PMDG_AP_AT1_toggle ()
	if _tl("switch_204_a", 100) then
       PMDG_AP_AT1_on ()
	else
       PMDG_AP_AT1_off ()
	end
end
--
function PMDG_AP_AT2_on ()
    if ipc.readLvar('switch_205_a') == 100 then
    ipc.control(69837, cg)
    end
    --DspShow ("AT2", "on")
end
function PMDG_AP_AT2_off ()
    if ipc.readLvar('switch_205_a') == 0 then
    ipc.control(69837, cg)
    end
    --DspShow ("AT2", "off")
end
function PMDG_AP_AT2_toggle ()
	if _tl("switch_205_a", 100) then
       PMDG_AP_AT2_on ()
	else
       PMDG_AP_AT2_off ()
	end
end
---
function PMDG_AP_both_AT_on ()
    PMDG_AP_AT1_on ()
    ipc.sleep(30)
    PMDG_AP_AT2_on ()
end
function PMDG_AP_both_AT_off ()
    PMDG_AP_AT1_off ()
    ipc.sleep(30)
    PMDG_AP_AT2_off ()
end
function PMDG_AP_both_AT_toggle ()
    PMDG_AP_AT1_toggle ()
    ipc.sleep(30)
    PMDG_AP_AT2_toggle ()
end
----------
function PMDG_AP_TOGA ()
    ipc.control(65861, cg)
    --DspShow ("TO", "GA")
end
--------
function PMDG_AP_L ()
    ipc.control(69835, 1)
    --DspShow ("AP", "L")
end
function PMDG_AP_R ()
    ipc.control(69861, 1)
    --DspShow ("AP", "R")
end
function PMDG_CLB_CON ()
    ipc.control(69838, 1)
    --DspShow ("CLB", "CON")
end
function PMDG_AT ()
    ipc.control(69839, 1)
    --DspShow ("A/T", "")
end
function PMDG_LNAV ()
    ipc.control(69843, 1)
    --DspShow ("LNAV", "")
end
function PMDG_VNAV ()
    ipc.control(69844, 1)
    ----DspShow ("VNAV", "")
end
function PMDG_FLCH ()
    ipc.control(69845, 1)
    ----DspShow ("FLCH", "")
end
function PMDG_HDG_HOLD ()
    ipc.control(69851, 1)
    ----DspShow ("HDG", "HOLD")
end
function PMDG_VS_FPA ()
    ipc.control(69855, 1)
    ----DspShow ("VS", "FPA")
end
function PMDG_ALT_HOLD ()
    ipc.control(69858, 1)
    ----DspShow ("ALT", "HOLD")
end
function PMDG_LOC ()
    ipc.control(69859, 1)
    ----DspShow ("LOC", "")
end
function PMDG_APP ()
    if Mod == 1 then
    ipc.control(69860, 1)
    ----DspShow ("APP", "")
    elseif Mod == 3 then
    COM1_Transfert ()
    end
end
function PMDG_Push_SPD ()
    ipc.control(71732, 1)
    ----DspShow ("SPD", "sel")
end
function PMDG_Push_HDG ()
    ipc.control(69850, 1)
    ----DspShow ("HDG", "sel")
end
function PMDG_Push_ALT ()
    ipc.control(71883, 1)
    ----DspShow ("ALT", "sel")
end
function PMDG_Alt_Selector ()
    ipc.control(69857, cg)
end
function PMDG_AP_Disengage_Bar_on ()
    if ipc.readLvar('switch_214_a') == 100 then
    ipc.control(69846, cg)
    end
    ----DspShow ("AP", "on")
end
function PMDG_AP_Disengage_Bar_off ()
    if ipc.readLvar('switch_214_a') == 0 then
    ipc.control(69846, cg)
    end
    ----DspShow ("AP", "off")
end
function PMDG_AP_Disengage_Bar_toggle ()
	if _tl("switch_214_a", 100) then
       PMDG_AP_Disengage_Bar_on ()
	else
       PMDG_AP_Disengage_Bar_off ()
	end
end
function PMDG_AP_Disengage ()
    ipc.control(65580, cg)
    ----DspShow ("AP", "soft")
end
function PMDG_AT_Disengage ()
    ipc.control(65860, cg)
    ----DspShow ("AT", "soft")
end
-- ## Center FWD Panel ###############
function PMDG_Autobrake_show ()
    ipc.sleep(10)
    ABvar = ipc.readLvar('switch_292_a')
    if ABvar == 0 then ABtxt = "RTO"
    elseif ABvar == 10 then ABtxt = "off"
    elseif ABvar == 20 then ABtxt = "DArm"
    elseif ABvar == 30 then ABtxt = "1"
    elseif ABvar == 40 then ABtxt = "2"
    elseif ABvar == 50 then ABtxt = "3"
    elseif ABvar == 60 then ABtxt = "4"
    elseif ABvar == 70 then ABtxt = "MAX"
    end
    ----DspShow ("ABrk", ABtxt)
end
function PMDG_Autobrake_inc ()
    ipc.control(69924, 256)
    PMDG_Autobrake_show ()
end
function PMDG_Autobrake_dec ()
    ipc.control(69924, 128)
    PMDG_Autobrake_show ()
end
-- ## Control Stand ###############
function PMDG_ENG1_idle ()
    ipc.control(70152, 0)
    ----DspShow ("ENG1", "idle")
end
function PMDG_ENG1_cutoff ()
    ipc.control(70152, 1)
    ----DspShow ("ENG1", "off")
end
function PMDG_ENG1_toggle ()
	if _tl("switch_520_a", 100) then
       PMDG_ENG1_idle ()
	else
       PMDG_ENG1_cutoff ()
	end
end
--
function PMDG_ENG2_idle ()
    ipc.control(70153, 0)
    ----DspShow ("ENG2", "idle")
end
function PMDG_ENG2_cutoff ()
    ipc.control(70153, 1)
    ----DspShow ("ENG2", "off")
end
function PMDG_ENG2_toggle ()
	if _tl("switch_521_a", 100) then
       PMDG_ENG2_idle ()
	else
       PMDG_ENG2_cutoff ()
	end
end
---
function PMDG_Spoilers_arm ()
    if ipc.readLvar("switch_498_a") < 100 then
    ipc.control(74614, cg)
    end
    ----DspShow ("Splr", "arm")
end
function PMDG_Spoilers_disarm ()
    if ipc.readLvar("switch_498_a") > 0 then
    ipc.control(74614, cg)
    end
    ----DspShow ("Splr", "off")
end
---
function PMDG_TCAS_show ()
    ipc.sleep(10)
    TcasVar = ipc.readLvar("switch_749_a")
    if TcasVar == 0 then TcasTxt = "stby"
    elseif TcasVar == 10 then TcasTxt = "alt"
    elseif TcasVar == 20 then TcasTxt = "xpdr"
    elseif TcasVar == 30 then TcasTxt = "TA"
    elseif TcasVar == 40 then TcasTxt = "TARA"
    end
    if _MCP1 then
            ----DspShow ("XPND", TcasTxt)
        else
            DspRadioShort(TcasTxt)
        end
end
function PMDG_TCAS_inc ()
     ipc.control(70381, 256)
    --PMDG_TCAS_show ()
end
function PMDG_TCAS_dec ()
     ipc.control(70381, 128)
    --PMDG_TCAS_show ()
end
function PMDG_TCAS_test ()
     ipc.control(77123, cg)
    ----DspShow ("TCAS", "test")
end
-- ## Display Modes ###############
function PMDG_Select_L_Inbnd ()
     ipc.control(69863, 1)
    ----DspShow ("Left", "Ibnd")
end
function PMDG_Select_R_Inbnd ()
     ipc.control(69864, 1)
    ----DspShow ("Rght", "Ibnd")
end
function PMDG_Select_Lwr_Ctr ()
     ipc.control(69865, 1)
    ----DspShow ("Lwr", "Ctr")
end
--
function PMDG_Disp_inc ()
    DispVar = ipc.get("DispModeVar")
    --if DispVar == 0 then PMDG_Disp_Eng ()
    if DispVar == 1 then PMDG_Disp_Stat ()
    elseif DispVar == 2 then PMDG_Disp_Elec ()
    elseif DispVar == 3 then PMDG_Disp_Hyd ()
    elseif DispVar == 4 then PMDG_Disp_Fuel ()
    elseif DispVar == 5 then PMDG_Disp_Air ()
    elseif DispVar == 6 then PMDG_Disp_Door ()
    elseif DispVar == 7 then PMDG_Disp_Gear ()
    elseif DispVar == 8 then PMDG_Disp_Fctl ()
    elseif DispVar == 9 then PMDG_Disp_Eng ()
    end
end
function PMDG_Disp_dec ()
    DispVar = ipc.get("DispModeVar")
    if DispVar == 2 then PMDG_Disp_Eng ()
    elseif DispVar == 3 then PMDG_Disp_Stat ()
    elseif DispVar == 4 then PMDG_Disp_Elec ()
    elseif DispVar == 5 then PMDG_Disp_Hyd ()
    elseif DispVar == 6 then PMDG_Disp_Fuel ()
    elseif DispVar == 7 then PMDG_Disp_Air ()
    elseif DispVar == 8 then PMDG_Disp_Door ()
    elseif DispVar == 9 then PMDG_Disp_Gear ()
    --elseif DispVar == 0 then PMDG_Disp_Fctl ()
    elseif DispVar == 1 then PMDG_Disp_Fctl ()
    end
end
function PMDG_Disp_Eng ()
     ipc.control(69866, 1)
     ipc.set("DispModeVar", 1)
    ----DspShow ("ENG", "")
end
function PMDG_Disp_Stat ()
     ipc.control(69867, 1)
     ipc.set("DispModeVar", 2)
    ----DspShow ("STAT", "")
end
function PMDG_Disp_Elec ()
     ipc.control(69868, 1)
     ipc.set("DispModeVar", 3)
    ----DspShow ("ELEC", "")
end
function PMDG_Disp_Hyd ()
     ipc.control(69869, 1)
     ipc.set("DispModeVar", 4)
    ----DspShow ("HYD", "")
end
function PMDG_Disp_Fuel ()
     ipc.control(69870, 1)
     ipc.set("DispModeVar", 5)
    ----DspShow ("FUEL", "")
end
function PMDG_Disp_Air ()
     ipc.control(69871, 1)
     ipc.set("DispModeVar", 6)
    ----DspShow ("AIR", "")
end
function PMDG_Disp_Door ()
     ipc.control(69872, 1)
     ipc.set("DispModeVar", 7)
    ----DspShow ("DOOR", "")
end
function PMDG_Disp_Gear ()
     ipc.control(69873, 1)
     ipc.set("DispModeVar", 8)
    ----DspShow ("GEAR", "")
end
function PMDG_Disp_Fctl ()
     ipc.control(69874, 1)
     ipc.set("DispModeVar", 9)
    ----DspShow ("FCTL", "")
end

function PMDG_DispList_inc ()
    DispLVar = ipc.get("DispListVar")
    if DispLVar == 1 then PMDG_Disp_Comm ()
    elseif DispLVar == 2 then PMDG_Disp_Nav ()
    elseif DispLVar == 3 then PMDG_Disp_Chkl ()
    end
end
function PMDG_DispList_dec ()
    DispLVar = ipc.get("DispListVar")
    if DispLVar == 2 then PMDG_Disp_Chkl ()
    elseif DispLVar == 3 then PMDG_Disp_Comm ()
    elseif DispLVar == 1 then PMDG_Disp_Nav ()
    end
end
function PMDG_Disp_Chkl ()
     ipc.control(69876, 1)
     ipc.set("DispListVar", 1)
    ----DspShow ("CHKL", "")
end
function PMDG_Disp_Comm ()
     ipc.control(69877, 1)
     ipc.set("DispListVar", 2)
    ----DspShow ("COMM", "")
end
function PMDG_Disp_Nav ()
     ipc.control(69878, 1)
     ipc.set("DispListVar", 3)
    ----DspShow ("NAV", "")
end
function PMDG_Disp_CancRcl ()
     ipc.control(69879, 1)
    ----DspShow ("CANC", "RCL")
end
----
function PMDG_Toggle_Chkl_Stat ()
     if ipc.get("ChkListVar") == 1 then
     ipc.set("ChkListVar", 0)
        DispVar = ipc.get("DispModeVar")
        if DispVar == 1 then PMDG_Disp_Eng ()
        elseif DispVar == 2 then PMDG_Disp_Stat ()
        elseif DispVar == 3 then PMDG_Disp_Elec ()
        elseif DispVar == 4 then PMDG_Disp_Hyd ()
        elseif DispVar == 5 then PMDG_Disp_Fuel ()
        elseif DispVar == 6 then PMDG_Disp_Air ()
        elseif DispVar == 7 then PMDG_Disp_Door ()
        elseif DispVar == 8 then PMDG_Disp_Gear ()
        elseif DispVar == 9 then PMDG_Disp_Fctl ()
        end
    else
     ipc.control(69876, 1)
     ipc.set("DispListVar", 1)
     ipc.set("ChkListVar", 1)
     end
    ----DspShow ("CHKL", "")
end
-- ## EFIS Capt ###############
function PMDG_Min_inc ()
     local i
    for i = 1, 5 do ipc.control(69814, 256) end
    ----DspShow ("Min", "inc")
end
function PMDG_Min_dec ()
     local i
    for i = 1, 5 do ipc.control(69814, 128) end
    ----DspShow ("Min", "dec")
end
function PMDG_Min_RadBaro ()
     ipc.control(69813, cg)
    --if ipc.readLvar('switch_181_a') == 0 then
    ----DspShow ("Min", "Rad")
    --else
    ----DspShow ("Min", "Baro")
    --end
end
function PMDG_Min_reset ()
     ipc.control(69815, 1)
    ----DspShow ("Min", "rset")
end
---
function PMDG_VorAdf_L_adf ()
     if ipc.readLvar('switch_184_a') == 0 then
     ipc.control(69816, 512)
     ipc.control(69816, 512)
     elseif ipc.readLvar('switch_184_a') == 50 then
     ipc.control(69816, 512)
    end
    ----DspShow ("ADF", "left")
end
function PMDG_VorAdf_L_off ()
     if ipc.readLvar('switch_184_a') == 100 then
     ipc.control(69816, 512)
     ipc.control(69816, 512)
     elseif ipc.readLvar('switch_184_a') == 0 then
     ipc.control(69816, 512)
    end
    ----DspShow ("OFF", "")
end
function PMDG_VorAdf_L_vor ()
     if ipc.readLvar('switch_184_a') == 50 then
     ipc.control(69816, 512)
     ipc.control(69816, 512)
     elseif ipc.readLvar('switch_184_a') == 100 then
     ipc.control(69816, 512)
    end
    ----DspShow ("VOR", "left")
end
--------
---
function PMDG_VorAdf_R_adf ()
     if ipc.readLvar('switch_189_a') == 0 then
     ipc.control(69821, 512)
     ipc.control(69821, 512)
     elseif ipc.readLvar('switch_189_a') == 50 then
     ipc.control(69821, 512)
    end
    ----DspShow ("ADF", "rght")
end
function PMDG_VorAdf_R_off ()
     if ipc.readLvar('switch_189_a') == 100 then
     ipc.control(69821, 512)
     ipc.control(69821, 512)
     elseif ipc.readLvar('switch_189_a') == 0 then
     ipc.control(69821, 512)
    end
    ----DspShow ("OFF", "")
end
function PMDG_VorAdf_R_vor ()
     if ipc.readLvar('switch_189_a') == 50 then
     ipc.control(69821, 512)
     ipc.control(69821, 512)
     elseif ipc.readLvar('switch_189_a') == 100 then
     ipc.control(69821, 512)
    end
    ----DspShow ("VOR", "rght")
end
--------
function PMDG_VorAdf_L_inc ()
    if ipc.readLvar('switch_184_a') ~= 0 then
    ipc.control(69816, 128)
    ipc.sleep(10)
        if ipc.readLvar('switch_184_a') == 0 then
        ADFLtxt = "VOR"
        ADFLtxt2 = "left"
        elseif ipc.readLvar('switch_184_a') == 50 then
        ADFLtxt = "OFF"
        ADFLtxt2 = ""
        elseif ipc.readLvar('switch_184_a') == 100 then
        ADFLtxt = "ADF"
        ADFLtxt2 = "left"
        end
    end
    ----DspShow (ADFLtxt, ADFLtxt2)
end
function PMDG_VorAdf_L_dec ()
    if ipc.readLvar('switch_184_a') ~= 100 then
    ipc.control(69816, 512)
    ipc.sleep(10)
        if ipc.readLvar('switch_184_a') == 0 then
        ADFLtxt = "VOR"
        ADFLtxt2 = "left"
        elseif ipc.readLvar('switch_184_a') == 50 then
        ADFLtxt = "OFF"
        ADFLtxt2 = ""
        elseif ipc.readLvar('switch_184_a') == 100 then
        ADFLtxt = "ADF"
        ADFLtxt2 = "left"
        end
    end
    ----DspShow (ADFLtxt, ADFLtxt2)
end
--------
function PMDG_VorAdf_R_inc ()
    if ipc.readLvar('switch_189_a') ~= 0 then
    ipc.control(69821, 128)
    ipc.sleep(10)
    if ipc.readLvar('switch_189_a') == 0 then
     ADFLtxt = "VOR"
     ADFLtxt2 = "rght"
     elseif ipc.readLvar('switch_189_a') == 50 then
     ADFLtxt = "OFF"
     ADFLtxt2 = ""
     elseif ipc.readLvar('switch_189_a') == 100 then
     ADFLtxt = "ADF"
     ADFLtxt2 = "rght"
    end
    end
    ----DspShow (ADFLtxt, ADFLtxt2)
end
function PMDG_VorAdf_R_dec ()
    if ipc.readLvar('switch_189_a') ~= 100 then
    ipc.control(69821, 512)
    ipc.sleep(10)
    if ipc.readLvar('switch_189_a') == 0 then
     ADFLtxt = "VOR"
     ADFLtxt2 = "rght"
     elseif ipc.readLvar('switch_189_a') == 50 then
     ADFLtxt = "OFF"
     ADFLtxt2 = ""
     elseif ipc.readLvar('switch_189_a') == 100 then
     ADFLtxt = "ADF"
     ADFLtxt2 = "rght"
    end
    end
    ----DspShow (ADFLtxt, ADFLtxt2)
end
-----------
function PMDG_EFIS_Mode_show ()
    ipc.sleep(10)
     CEfisMode = ipc.readLvar('switch_185_a')
     if CEfisMode == 0 then CEfisModeTxt = "APP"
     elseif CEfisMode == 10 then CEfisModeTxt = "VOR"
     elseif CEfisMode == 20 then CEfisModeTxt = "MAP"
     elseif CEfisMode == 30 then CEfisModeTxt = "PLAN"
     end
     ----DspShow ("Mode", CEfisModeTxt)
end
function PMDG_EFIS_Mode_inc ()
    ipc.control(69817, 256)
    PMDG_EFIS_Mode_show ()
end
function PMDG_EFIS_Mode_dec ()
    ipc.control(69817, 128)
    PMDG_EFIS_Mode_show ()
end
function PMDG_EFIS_Mode_ctr ()
    ipc.control(69818, 1)
    ----DspShow ("Mode", "Ctr")
end
--------
function PMDG_EFIS_Range_show ()
    ipc.sleep(10)
     CEfisRange = ipc.readLvar('switch_187_a')
     if CEfisRange == 0 then CEfisRangeTxt = "10"
     elseif CEfisRange == 10 then CEfisRangeTxt = "20"
     elseif CEfisRange == 20 then CEfisRangeTxt = "40"
     elseif CEfisRange == 30 then CEfisRangeTxt = "80"
     elseif CEfisRange == 40 then CEfisRangeTxt = "160"
     elseif CEfisRange == 50 then CEfisRangeTxt = "320"
     elseif CEfisRange == 60 then CEfisRangeTxt = "640"
     end
     ----DspShow ("Rnge", CEfisRangeTxt)
end
function PMDG_EFIS_Range_inc ()
    ipc.control(69819, 256)
    PMDG_EFIS_Range_show ()
end
function PMDG_EFIS_Range_dec ()
    ipc.control(69819, 128)
    PMDG_EFIS_Range_show ()
end
function PMDG_EFIS_Range_Traffic ()
    ipc.control(69820, 1)
    ----DspShow ("Rnge", "TFC")
end
----
function PMDG_EFIS_fpv ()
    ipc.control(69825, 1)
    ----DspShow ("FPV", "")
end
function PMDG_EFIS_mtrs ()
    ipc.control(69826, 1)
    ----DspShow ("MTRS", "")
end
----
function PMDG_EFIS_Baro_inc ()
    ipc.control(69823, 256)
    ------DspShow ("Baro", "inc")
end
function PMDG_EFIS_Baro_dec ()
    ipc.control(69823, 128)
    ------DspShow ("Baro", "dec")
end
function PMDG_EFIS_Baro_in ()
    if ipc.readLvar('switch_190_a') == 100 then
    ipc.control(69822, cg)
    end
    ----DspShow ("Baro", "IN")
end
function PMDG_EFIS_Baro_hpa ()
    if ipc.readLvar('switch_190_a') == 0 then
    ipc.control(69822, cg)
    end
    ----DspShow ("Baro", "HPA")
end
function PMDG_EFIS_Baro_InHpa ()
    ipc.control(69822, cg)
    ipc.sleep(10)
    if ipc.readLvar('switch_190_a') == 100 then
    ----DspShow ("Baro", "HPA")
    else
    ----DspShow ("Baro", "IN")
    end
end
function PMDG_EFIS_Baro_std ()
    ipc.control(69824, cg)
    ----DspShow ("Baro", "STD")
end
------
------
function PMDG_EFIS_wxr ()
    ipc.control(69827, 1)
    ----DspShow ("EFIS", "WXR")
end
function PMDG_EFIS_sta ()
    ipc.control(69828, 1)
    ----DspShow ("EFIS", "STA")
end
function PMDG_EFIS_wpt ()
    ipc.control(69829, 1)
    ----DspShow ("EFIS", "WPT")
end
function PMDG_EFIS_arpt ()
    ipc.control(69830, 1)
    ----DspShow ("EFIS", "ARPT")
end
function PMDG_EFIS_data ()
    ipc.control(69831, 1)
    ----DspShow ("EFIS", "DATA")
end
function PMDG_EFIS_pos ()
    ipc.control(69832, 1)
    ----DspShow ("EFIS", "POS")
end
function PMDG_EFIS_terr ()
    ipc.control(69833, 1)
    ----DspShow ("EFIS", "TERR")
end
-- ## EFIS FO ###############
function PMDG_FO_Min_inc ()
     local i
    for i = 1, 5 do ipc.control(67+69814, 256) end
    ----DspShow ("Min", "inc")
end
function PMDG_FO_Min_dec ()
     local i
    for i = 1, 5 do ipc.control(67+69814, 128) end
    ----DspShow ("Min", "dec")
end
function PMDG_FO_Min_RadBaro ()
     ipc.control(67+69813, cg)
    --if ipc.readLvar('switch_248_a') == 0 then
    ----DspShow ("Min", "Rad")
    --else
    ----DspShow ("Min", "Baro")
    --end
end
function PMDG_FO_Min_reset ()
     ipc.control(67+69815, 1)
    ----DspShow ("Min", "rset")
end
---
function PMDG_FO_VorAdf_L_adf ()
     if ipc.readLvar('switch_251_a') == 0 then
     ipc.control(67+69816, 512)
     ipc.control(67+69816, 512)
     elseif ipc.readLvar('switch_251_a') == 50 then
     ipc.control(67+69816, 512)
    end
    ----DspShow ("ADF", "left")
end
function PMDG_FO_VorAdf_L_off ()
     if ipc.readLvar('switch_251_a') == 100 then
     ipc.control(67+69816, 512)
     ipc.control(67+69816, 512)
     elseif ipc.readLvar('switch_251_a') == 0 then
     ipc.control(67+69816, 512)
    end
    ----DspShow ("OFF", "")
end
function PMDG_FO_VorAdf_L_vor ()
     if ipc.readLvar('switch_251_a') == 50 then
     ipc.control(67+69816, 512)
     ipc.control(67+69816, 512)
     elseif ipc.readLvar('switch_251_a') == 100 then
     ipc.control(67+69816, 512)
    end
    ----DspShow ("VOR", "left")
end
--------
function PMDG_FO_VorAdf_R_adf ()
     if ipc.readLvar('switch_256_a') == 0 then
     ipc.control(67+69821, 512)
     ipc.control(67+69821, 512)
     elseif ipc.readLvar('switch_256_a') == 50 then
     ipc.control(67+69821, 512)
    end
    ----DspShow ("ADF", "rght")
end
function PMDG_FO_VorAdf_R_off ()
     if ipc.readLvar('switch_256_a') == 100 then
     ipc.control(67+69821, 512)
     ipc.control(67+69821, 512)
     elseif ipc.readLvar('switch_256_a') == 0 then
     ipc.control(67+69821, 512)
    end
    ----DspShow ("OFF", "")
end
function PMDG_FO_VorAdf_R_vor ()
     if ipc.readLvar('switch_256_a') == 50 then
     ipc.control(67+69821, 512)
     ipc.control(67+69821, 512)
     elseif ipc.readLvar('switch_256_a') == 100 then
     ipc.control(67+69821, 512)
    end
    ----DspShow ("VOR", "rght")
end
--------
function PMDG_FO_VorAdf_L_inc ()
    if ipc.readLvar('switch_251_a') ~= 0 then
    ipc.control(67+69816, 128)
    ipc.sleep(10)
        if ipc.readLvar('switch_251_a') == 0 then
        ADFLtxt = "VOR"
        ADFLtxt2 = "left"
        elseif ipc.readLvar('switch_251_a') == 50 then
        ADFLtxt = "OFF"
        ADFLtxt2 = ""
        elseif ipc.readLvar('switch_251_a') == 100 then
        ADFLtxt = "ADF"
        ADFLtxt2 = "left"
        end
    end
    ----DspShow (ADFLtxt, ADFLtxt2)
end
function PMDG_FO_VorAdf_L_dec ()
    if ipc.readLvar('switch_251_a') ~= 100 then
    ipc.control(67+69816, 512)
    ipc.sleep(10)
        if ipc.readLvar('switch_251_a') == 0 then
        ADFLtxt = "VOR"
        ADFLtxt2 = "left"
        elseif ipc.readLvar('switch_251_a') == 50 then
        ADFLtxt = "OFF"
        ADFLtxt2 = ""
        elseif ipc.readLvar('switch_251_a') == 100 then
        ADFLtxt = "ADF"
        ADFLtxt2 = "left"
        end
    end
    ----DspShow (ADFLtxt, ADFLtxt2)
end
--------
function PMDG_FO_VorAdf_R_inc ()
    if ipc.readLvar('switch_256_a') ~= 0 then
    ipc.control(67+69821, 128)
    ipc.sleep(10)
    if ipc.readLvar('switch_256_a') == 0 then
     ADFLtxt = "VOR"
     ADFLtxt2 = "rght"
     elseif ipc.readLvar('switch_256_a') == 50 then
     ADFLtxt = "OFF"
     ADFLtxt2 = ""
     elseif ipc.readLvar('switch_256_a') == 100 then
     ADFLtxt = "ADF"
     ADFLtxt2 = "rght"
    end
    end
    ----DspShow (ADFLtxt, ADFLtxt2)
end
function PMDG_FO_VorAdf_R_dec ()
    if ipc.readLvar('switch_256_a') ~= 100 then
    ipc.control(67+69821, 512)
    ipc.sleep(10)
    if ipc.readLvar('switch_256_a') == 0 then
     ADFLtxt = "VOR"
     ADFLtxt2 = "rght"
     elseif ipc.readLvar('switch_256_a') == 50 then
     ADFLtxt = "OFF"
     ADFLtxt2 = ""
     elseif ipc.readLvar('switch_256_a') == 100 then
     ADFLtxt = "ADF"
     ADFLtxt2 = "rght"
    end
    end
    ----DspShow (ADFLtxt, ADFLtxt2)
end
-----------
function PMDG_FO_EFIS_Mode_show ()
    ipc.sleep(10)
     CEfisMode = ipc.readLvar('switch_252_a')
     if CEfisMode == 0 then CEfisModeTxt = "APP"
     elseif CEfisMode == 10 then CEfisModeTxt = "VOR"
     elseif CEfisMode == 20 then CEfisModeTxt = "MAP"
     elseif CEfisMode == 30 then CEfisModeTxt = "PLAN"
     end
     ----DspShow ("Mode", CEfisModeTxt)
end
function PMDG_FO_EFIS_Mode_inc ()
    ipc.control(67+69817, 256)
    PMDG_FO_EFIS_Mode_show ()
end
function PMDG_FO_EFIS_Mode_dec ()
    ipc.control(67+69817, 128)
    PMDG_FO_EFIS_Mode_show ()
end
function PMDG_FO_EFIS_Mode_ctr ()
    ipc.control(67+69818, 1)
    ----DspShow ("Mode", "Ctr")
end
--------
function PMDG_FO_EFIS_Range_show ()
    ipc.sleep(10)
     CEfisRange = ipc.readLvar('switch_253_a')
     if CEfisRange == 0 then CEfisRangeTxt = "10"
     elseif CEfisRange == 10 then CEfisRangeTxt = "20"
     elseif CEfisRange == 20 then CEfisRangeTxt = "40"
     elseif CEfisRange == 30 then CEfisRangeTxt = "80"
     elseif CEfisRange == 40 then CEfisRangeTxt = "160"
     elseif CEfisRange == 50 then CEfisRangeTxt = "320"
     elseif CEfisRange == 60 then CEfisRangeTxt = "640"
     end
     ----DspShow ("Rnge", CEfisRangeTxt)
end
function PMDG_FO_EFIS_Range_inc ()
    ipc.control(67+69819, 256)
    PMDG_FO_EFIS_Range_show ()
end
function PMDG_FO_EFIS_Range_dec ()
    ipc.control(67+69819, 128)
    PMDG_FO_EFIS_Range_show ()
end
function PMDG_FO_EFIS_Range_Traffic ()
    ipc.control(67+69820, 1)
    ----DspShow ("Rnge", "TFC")
end
----
function PMDG_FO_EFIS_fpv ()
    ipc.control(67+69825, 1)
    ----DspShow ("FPV", "")
end
function PMDG_FO_EFIS_mtrs ()
    ipc.control(67+69826, 1)
    ----DspShow ("MTRS", "")
end
----
function PMDG_FO_EFIS_Baro_inc ()
    ipc.control(67+69823, 256)
    ------DspShow ("Baro", "inc")
end
function PMDG_FO_EFIS_Baro_dec ()
    ipc.control(67+69823, 128)
    ------DspShow ("Baro", "dec")
end
function PMDG_FO_EFIS_Baro_in ()
    if ipc.readLvar('switch_257_a') == 100 then
    ipc.control(67+69822, cg)
    end
    ----DspShow ("Baro", "IN")
end
function PMDG_FO_EFIS_Baro_hpa ()
    if ipc.readLvar('switch_257_a') == 0 then
    ipc.control(67+69822, cg)
    end
    ----DspShow ("Baro", "HPA")
end
function PMDG_FO_EFIS_Baro_InHpa ()
    ipc.control(67+69822, cg)
    ipc.sleep(10)
    if ipc.readLvar('switch_257_a') == 100 then
    ----DspShow ("Baro", "HPA")
    else
    ----DspShow ("Baro", "IN")
    end
end
function PMDG_FO_EFIS_Baro_std ()
    ipc.control(67+69822, cg)
    ----DspShow ("Baro", "STD")
end
------
------
function PMDG_FO_EFIS_wxr ()
    ipc.control(67+69827, 1)
    ----DspShow ("EFIS", "WXR")
end
function PMDG_FO_EFIS_sta ()
    ipc.control(67+69828, 1)
    ----DspShow ("EFIS", "STA")
end
function PMDG_FO_EFIS_wpt ()
    ipc.control(67+69829, 1)
    ----DspShow ("EFIS", "WPT")
end
function PMDG_FO_EFIS_arpt ()
    ipc.control(67+69830, 1)
    ----DspShow ("EFIS", "ARPT")
end
function PMDG_FO_EFIS_data ()
    ipc.control(67+69831, 1)
    ----DspShow ("EFIS", "DATA")
end
function PMDG_FO_EFIS_pos ()
    ipc.control(67+69832, 1)
    ----DspShow ("EFIS", "POS")
end
function PMDG_FO_EFIS_terr ()
    ipc.control(67+69833, 1)
    ----DspShow ("EFIS", "TERR")
end
-- ## External Lights ###############
function PMDG_LandingLights_Lon ()
    LLvar1 = ipc.readLvar("switch_22_a")
    if LLvar1 == 0 then ipc.control(69654, cg) end
end
function PMDG_LandingLights_Con ()
    LLvar2 = ipc.readLvar("switch_23_a")
    if LLvar2 == 0 then ipc.control(69655, cg) end
end
function PMDG_LandingLights_Ron ()
    LLvar3 = ipc.readLvar("switch_24_a")
    if LLvar3 == 0 then ipc.control(69656, cg) end
end
function PMDG_LandingLights_on ()
    LLvar1 = ipc.readLvar("switch_22_a")
    LLvar2 = ipc.readLvar("switch_23_a")
    LLvar3 = ipc.readLvar("switch_24_a")
    if LLvar1 == 0 then ipc.control(69654, cg) end
    if LLvar2 == 0 then ipc.control(69655, cg) end
    if LLvar3 == 0 then ipc.control(69656, cg) end
end
function PMDG_LandingLights_off ()
    LLvar1 = ipc.readLvar("switch_22_a")
    LLvar2 = ipc.readLvar("switch_23_a")
    LLvar3 = ipc.readLvar("switch_24_a")
    if LLvar1 == 100 then ipc.control(69654, cg) end
    if LLvar2 == 100 then ipc.control(69655, cg) end
    if LLvar3 == 100 then ipc.control(69656, cg) end
end
function PMDG_LandingLights_toggle ()
    ipc.control(69654, cg)
    ipc.control(69655, cg)
    ipc.control(69656, cg)
end
---
function PMDG_RunwayTurn_on ()
    RLvar1 = ipc.readLvar("switch_119_a")
    RLvar2 = ipc.readLvar("switch_120_a")
    if RLvar1 == 0 then ipc.control(69751, cg) end
    if RLvar2 == 0 then ipc.control(69752, cg) end
end
function PMDG_RunwayTurn_off ()
    RLvar1 = ipc.readLvar("switch_119_a")
    RLvar2 = ipc.readLvar("switch_120_a")
    if RLvar1 == 100 then ipc.control(69751, cg) end
    if RLvar2 == 100 then ipc.control(69752, cg) end
end
function PMDG_RunwayTurn_toggle ()
    ipc.control(69751, cg)
    ipc.control(69752, cg)
end
--
function PMDG_Taxi_on ()
    if ipc.readLvar('switch_121_a') == 0 then
    ipc.control(69753, cg)
    end
    ----DspShow ("Taxi", "on")
end
function PMDG_Taxi_off ()
    if ipc.readLvar('switch_121_a') == 100 then
    ipc.control(69753, cg)
    end
    ----DspShow ("Taxi", "off")
end
function PMDG_Taxi_toggle ()
	if _tl("switch_121_a", 0) then
       PMDG_Taxi_on ()
	else
       PMDG_Taxi_off ()
	end
end
--
function PMDG_Strobe_on ()
    if ipc.readLvar('switch_122_a') == 0 then
    ipc.control(69754, cg)
    end
    ----DspShow ("Strb", "on")
end
function PMDG_Strobe_off ()
    if ipc.readLvar('switch_122_a') == 100 then
    ipc.control(69754, cg)
    end
    ----DspShow ("Strb", "off")
end
function PMDG_Strobe_toggle ()
	if _tl("switch_122_a", 0) then
       PMDG_Strobe_on ()
	else
       PMDG_Strobe_off ()
	end
end
--
function PMDG_BCN_on ()
    if ipc.readLvar('switch_114_a') == 0 then
    ipc.control(69746, cg)
    end
    ----DspShow ("BCN", "on")
end
function PMDG_BCN_off ()
    if ipc.readLvar('switch_114_a') == 100 then
    ipc.control(69746, cg)
    end
    ----DspShow ("BCN", "off")
end
function PMDG_BCN_toggle ()
	if _tl("switch_114_a", 0) then
       PMDG_BCN_on ()
	else
       PMDG_BCN_off ()
	end
end
--
function PMDG_NAV_on ()
    if ipc.readLvar('switch_115_a') == 0 then
    ipc.control(69747, cg)
    end
    ----DspShow ("NAV", "on")
end
function PMDG_NAV_off ()
    if ipc.readLvar('switch_115_a') == 100 then
    ipc.control(69747, cg)
    end
    ----DspShow ("NAV", "off")
end
function PMDG_NAV_toggle ()
	if _tl("switch_115_a", 0) then
       PMDG_NAV_on ()
	else
       PMDG_NAV_off ()
	end
end
--
function PMDG_Logo_on ()
    if ipc.readLvar('switch_116_a') == 0 then
    ipc.control(69748, cg)
    end
    ----DspShow ("Logo", "on")
end
function PMDG_Logo_off ()
    if ipc.readLvar('switch_116_a') == 100 then
    ipc.control(69748, cg)
    end
    ----DspShow ("Logo", "off")
end
function PMDG_Logo_toggle ()
	if _tl("switch_116_a", 0) then
       PMDG_Logo_on ()
	else
       PMDG_Logo_off ()
	end
end
--
function PMDG_Wing_on ()
    if ipc.readLvar('switch_117_a') == 0 then
    ipc.control(69749, cg)
    end
    ----DspShow ("Wing", "on")
end
function PMDG_Wing_off ()
    if ipc.readLvar('switch_117_a') == 100 then
    ipc.control(69749, cg)
    end
    ----DspShow ("Wing", "off")
end
function PMDG_Wing_toggle ()
	if _tl("switch_117_a", 0) then
       PMDG_Wing_on ()
	else
       PMDG_Wing_off ()
	end
end
-- ## Internal Lights ###############
function PMDG_AllPanelAndFlood_toggle ()
    ipc.control(83634, 0)
    ----DspShow ("Panl", "Flod")
end
function PMDG_Panel_light_toggle ()
    ipc.control(83635, 0)
    ----DspShow ("Panl", "lght")
end
function PMDG_Flood_light_toggle ()
    ipc.control(83636, 0)
    ----DspShow ("Flod", "lght")
end
---
function PMDG_Glare_Flood_toggle ()
    ipc.control(71733, cg)
    ----DspShow ("Glre", "Flod")
end
function PMDG_Glare_Panel_toggle ()
    ipc.control(69653, cg)
    ----DspShow ("Glre", "Panl")
end
function PMDG_Capt_Panel_toggle ()
    ipc.control(69954, cg)
    ----DspShow ("Capt", "Panl")
end
function PMDG_Capt_Flood_toggle ()
    ipc.control(72852, cg)
    ----DspShow ("Capt", "Flod")
end
---
function PMDG_FO_Panel_toggle ()
    ipc.control(69917, cg)
    ----DspShow ("FO", "Panl")
end
function PMDG_FO_Flood_toggle ()
    ipc.control(72482, cg)
    ----DspShow ("FO", "Flod")
end
---
function PMDG_Pedestal_Panel_toggle ()
    ipc.control(70368, cg)
    ----DspShow ("Ped", "Panl")
end
function PMDG_Pedestal_Flood_toggle ()
    ipc.control(70369, cg)
    ----DspShow ("Ped", "Flod")
end
---
function PMDG_Overhead_Panel_toggle ()
    ipc.control(69657, cg)
    ----DspShow ("Ovhd", "Panl")
end
function PMDG_CB_Light_toggle ()
    ipc.control(72133, cg)
    ----DspShow ("CB", "lght")
end
function PMDG_Dome_Light_on ()
    if ipc.readLvar('switch_26_a') == 0 then
    ipc.control(69658, cd)
    end
end
function PMDG_Dome_Light_off ()
    if ipc.readLvar('switch_26_a') == 140 then
    ipc.control(69658, cg)
    elseif ipc.readLvar('switch_26_a') == 300 then
    ipc.control(69658, cg)
    ipc.sleep(500)
    ipc.control(69658, cg)
    end
end
function PMDG_Storm_Light_toggle ()
    ipc.control(69659, cg)
    ----DspShow ("Strm", "lght")
end
function Emer_Light_armed ()
    ipc.control(69682, cg)
end
function Emer_Light_off ()
    ipc.control(69682, cg)
    ipc.sleep(500)
    ipc.control(69681, cd)
end
-- ## Warnings ###############
function PMDG_MasterWarn_Capt ()
    ipc.control(69809, cg)
    ----DspShow ("Mstr", "Warn")
end
function PMDG_MasterWarn_FO ()
    ipc.control(69904, cg)
    ----DspShow ("Mstr", "Warn")
end
function PMDG_GS_Inhibit ()
    ipc.control(69935, cg)
    ----DspShow ("G/S", "Inhb")
end
-- ## Passenger Signs ###########
function No_Smoking_on ()
    if ipc.readLvar("switch_29_a") == 0 then
    ipc.control(69661, cd)
    ipc.sleep(500)
    ipc.control(69661, cd)
    elseif ipc.readLvar("switch_29_a") == 50 then
    ipc.control(69661, cd)
    end
end
function No_Smoking_auto ()
    if ipc.readLvar("switch_29_a") == 0 then
    ipc.control(69661, cd)
    elseif ipc.readLvar("switch_29_a") == 100 then
    ipc.control(69661, cg)
    end
end
function No_Smoking_off ()
    if ipc.readLvar("switch_29_a") == 100 then
    ipc.control(69661, cg)
    ipc.sleep(500)
    ipc.control(69661, cg)
    elseif ipc.readLvar("switch_29_a") == 50 then
    ipc.control(69661, cg)
    end
end
function Seat_Belts_on ()
    if ipc.readLvar("switch_30_a") == 0 then
    ipc.control(69662, cd)
    ipc.sleep(500)
    ipc.control(69662, cd)
    elseif ipc.readLvar("switch_30_a") == 50 then
    ipc.control(69662, cd)
    end
end
function Seat_Belts_auto ()
    if ipc.readLvar("switch_30_a") == 0 then
    ipc.control(69662, cd)
    elseif ipc.readLvar("switch_30_a") == 100 then
    ipc.control(69662, cg)
    end
end
function Seat_Belts_off ()
    if ipc.readLvar("switch_30_a") == 100 then
    ipc.control(69662, cg)
    ipc.sleep(500)
    ipc.control(69662, cg)
    elseif ipc.readLvar("switch_30_a") == 50 then
    ipc.control(69662, cg)
    end
end
-- ## Wiper L and R ############
function PMDG_Wiper_L_inc ()
	ipc.control(69652,2147483648)
end
function PMDG_Wiper_L_dec ()
	ipc.control(69652,536870912)
end
function PMDG_Wiper_R_inc ()
	ipc.control(69755,2147483648)
end
function PMDG_Wiper_R_dec ()
	ipc.control(69755,536870912)
end
-- ## ADIRU ###############
function PMDG_ADIRU_on ()
    if ipc.readLvar("switch_59_a") == 0 then
    ipc.control(69691, cg)
    end
    ----DspShow ("ADRU", "on")
end
function PMDG_ADIRU_off ()
    if ipc.readLvar("switch_59_a") == 100 then
    ipc.control(69691, cg)
    end
    ----DspShow ("ADRU", "off")
end
function PMDG_ADIRU_toggle ()
	if _tl("switch_59_a", 0) then
       PMDG_ADIRU_on ()
	else
       PMDG_ADIRU_off ()
	end
end
-- ## Electrical ###############
function Battery_on ()
    if ipc.readLvar("switch_01_a") == 0 then
    ipc.control(69633,cg)
    end
end
function Battery_off ()
    if ipc.readLvar("switch_01_a") == 100 then
    ipc.control(69633,cg)
    end
end
function PMDG_APU_on ()
    if ipc.readLvar("switch_03_a") == 0 then
    ipc.control(69635, 1)
    ----DspShow ("APU", "on")
    end
end
function PMDG_APU_start ()
    ipc.control(69635, 2)
    ----DspShow ("APU", "strt")
end
function PMDG_APU_off ()
    if ipc.readLvar("switch_03_a") == 50 then
    ipc.control(69635, 0)
    ----DspShow ("APU", "off")
    end
end
--
function PMDG_SecExtPower_toggle ()
    ipc.control(69639, cg)
    ----DspShow ("Sec", "ExtP")
end
function PMDG_PrimExtPower_toggle ()
    ipc.control(69640, cg)
    ----DspShow ("Prim", "ExtP")
end
function PMDG_ExtPowerBoth_toggle ()
    PMDG_SecExtPower_toggle ()
    _sleep(150,300)
    PMDG_PrimExtPower_toggle ()
end
-- ## Hydraulic ###############
function PMDG_HydLEng_on ()
    if ipc.readLvar("switch_39_a") == 0 then
    ipc.control(69674,cg)
    end
    ----DspShow ("HydL", "on")
end
function PMDG_HydLEng_off ()
    if ipc.readLvar("switch_39_a") == 100 then
    ipc.control(69674,cg)
    end
    ----DspShow ("HydL", "off")
end
function PMDG_HydLEng_toggle ()
	if _tl("switch_39_a", 0) then
       PMDG_HydLEng_on ()
	else
       PMDG_HydLEng_off ()
	end
end
--
function PMDG_HydREng_on ()
    if ipc.readLvar("switch_42_a") == 0 then
    ipc.control(69671,cg)
    end
    ----DspShow ("HydR", "on")
end
function PMDG_HydREng_off ()
    if ipc.readLvar("switch_42_a") == 100 then
    ipc.control(69671,cg)
    end
    ----DspShow ("HydR", "off")
end
function PMDG_HydREng_toggle ()
	if _tl("switch_42_a", 0) then
       PMDG_HydREng_on ()
	else
       PMDG_HydREng_off ()
	end
end
--
function PMDG_HydEngBoth_on ()
    PMDG_HydLEng_on ()
    _sleep(100,200)
    PMDG_HydREng_on ()
end
function PMDG_HydEngBoth_off ()
    PMDG_HydLEng_off ()
    _sleep(100,200)
    PMDG_HydREng_off ()
end
------------------
function PMDG_HydC1Elec_on ()
    if ipc.readLvar("switch_40_a") == 0 then
    ipc.control(69672, cg)
    end
    ----DspShow ("C1", "on")
end
function PMDG_HydC1Elec_off ()
    if ipc.readLvar("switch_40_a") == 100 then
    ipc.control(69672, cg)
    end
    ----DspShow ("C1", "off")
end
function PMDG_HydC1Elec_toggle ()
	if _tl("switch_40_a", 0) then
       PMDG_HydC1Elec_on ()
	else
       PMDG_HydC1Elec_off ()
	end
end
function PMDG_HydC2Elec_on ()
    if ipc.readLvar("switch_41_a") == 0 then
    ipc.control(69673, cg)
    end
    ----DspShow ("C2", "on")
end
function PMDG_HydC2Elec_off ()
    if ipc.readLvar("switch_41_a") == 100 then
    ipc.control(69673, cg)
    end
    ----DspShow ("C2", "off")
end
function PMDG_HydC2Elec_toggle ()
	if _tl("switch_41_a", 0) then
       PMDG_HydC2Elec_on ()
	else
       PMDG_HydC2Elec_off ()
	end
end
----
function PMDG_HydC1andC2_on ()
    PMDG_HydC1Elec_on ()
    _sleep(100,200)
    PMDG_HydC2Elec_on ()
end
function PMDG_HydC1andC2_off ()
    PMDG_HydC1Elec_off ()
    _sleep(100,200)
    PMDG_HydC2Elec_off ()
end
-----
function PMDG_HydAll_on ()
    PMDG_HydC1andC2_on ()
    _sleep(150,300)
    PMDG_HydEngBoth_on ()
end
function PMDG_HydAll_off ()
    PMDG_HydC1andC2_off ()
    _sleep(150,300)
    PMDG_HydEngBoth_off ()
end
----------------------
----------------------
function PMDG_LElec_show ()
    ipc.sleep(10)
    LElec = ipc.readLvar("switch_35_a")
    if LElec == 0 then LElectxt = "off"
    elseif LElec == 50 then LElectxt = "auto"
    elseif LElec == 100 then LElectxt = "on"
    end
    ----DspShow ("LElc", LElectxt)
end
function PMDG_RElec_show ()
    ipc.sleep(10)
    RElec = ipc.readLvar("switch_38_a")
    if RElec == 0 then RElectxt = "off"
    elseif RElec == 50 then RElectxt = "auto"
    elseif RElec == 100 then RElectxt = "on"
    end
    ----DspShow ("RElc", RElectxt)
end
function PMDG_AirC1_show ()
    ipc.sleep(10)
    AirC1 = ipc.readLvar("switch_36_a")
    if AirC1 == 0 then AirC1txt = "off"
    elseif AirC1 == 50 then AirC1txt = "auto"
    elseif AirC1 == 100 then AirC1txt = "on"
    end
    ----DspShow ("A C1", AirC1txt)
end
function PMDG_AirC2_show ()
    ipc.sleep(10)
    AirC2 = ipc.readLvar("switch_37_a")
    if AirC2 == 0 then AirC2txt = "off"
    elseif AirC2 == 50 then AirC2txt = "auto"
    elseif AirC2 == 100 then AirC2txt = "on"
    end
    ----DspShow ("A C2", AirC2txt)
end
---------------
function PMDG_LElec_inc ()
    ipc.control(69667, cd)
    PMDG_LElec_show ()
end
function PMDG_LElec_dec ()
    ipc.control(69667, cg)
    PMDG_LElec_show ()
end
function PMDG_LElec_off ()
    LElec = ipc.readLvar("switch_35_a")
    if LElec == 100 then step = 2 else step = 1 end
        for i = 0, step, 1 do
        PMDG_LElec_dec ()
        end
    PMDG_LElec_show ()
end
function PMDG_LElec_auto ()
    LElec = ipc.readLvar("switch_35_a")
    if LElec == 0 then PMDG_LElec_inc ()
    elseif LElec == 100 then PMDG_LElec_dec ()
    end
    PMDG_LElec_show ()
end
function PMDG_LElec_on ()
    LElec = ipc.readLvar("switch_35_a")
    if LElec == 0 then step = 2 else step = 1 end
        for i = 0, step, 1 do
        PMDG_LElec_inc ()
        end
    PMDG_LElec_show ()
end
---
---------------
function PMDG_RElec_inc ()
    ipc.control(69670, cd)
    PMDG_RElec_show ()
end
function PMDG_RElec_dec ()
    ipc.control(69670, cg)
    PMDG_RElec_show ()
end
function PMDG_RElec_off ()
    RElec = ipc.readLvar("switch_38_a")
    if RElec == 100 then step = 2 else step = 1 end
        for i = 0, step, 1 do
        PMDG_RElec_dec ()
        end
    PMDG_RElec_show ()
end
function PMDG_RElec_auto ()
    RElec = ipc.readLvar("switch_38_a")
    if RElec == 0 then PMDG_RElec_inc ()
    elseif RElec == 100 then PMDG_RElec_dec ()
    end
    PMDG_RElec_show ()
end
function PMDG_RElec_on ()
    RElec = ipc.readLvar("switch_38_a")
    if RElec == 0 then step = 2 else step = 1 end
        for i = 0, step, 1 do
        PMDG_RElec_inc ()
        end
    PMDG_RElec_show ()
end
-------
function PMDG_ElecAll_off ()
    PMDG_LElec_off ()
    _sleep(150,300)
    PMDG_RElec_off ()
end
function PMDG_ElecAll_auto ()
    PMDG_LElec_auto ()
    _sleep(150,300)
    PMDG_RElec_auto ()
end
function PMDG_ElecAll_on ()
    PMDG_LElec_on ()
    _sleep(150,300)
    PMDG_RElec_on ()
end
---
---------------
function PMDG_AirC1_inc ()
    ipc.control(69668, cd)
    PMDG_AirC1_show ()
end
function PMDG_AirC1_dec ()
    ipc.control(69668, cg)
    PMDG_AirC1_show ()
end
function PMDG_AirC1_off ()
    AirC1 = ipc.readLvar("switch_36_a")
    if AirC1 == 100 then step = 2 else step = 1 end
        for i = 0, step, 1 do
        PMDG_AirC1_dec ()
        end
    PMDG_AirC1_show ()
end
function PMDG_AirC1_auto ()
    AirC1 = ipc.readLvar("switch_36_a")
    if AirC1 == 0 then PMDG_AirC1_inc ()
    elseif AirC1 == 100 then PMDG_AirC1_dec ()
    end
    PMDG_AirC1_show ()
end
function PMDG_AirC1_on ()
    AirC1 = ipc.readLvar("switch_36_a")
    if AirC1 == 0 then step = 2 else step = 1 end
        for i = 0, step, 1 do
        PMDG_AirC1_inc ()
        end
    PMDG_AirC1_show ()
end
-------
---
---------------
function PMDG_AirC2_inc ()
    ipc.control(69669, cd)
    PMDG_AirC2_show ()
end
function PMDG_AirC2_dec ()
    ipc.control(69669, cg)
    PMDG_AirC2_show ()
end
function PMDG_AirC2_off ()
    AirC2 = ipc.readLvar("switch_37_a")
    if AirC2 == 100 then step = 2 else step = 1 end
        for i = 0, step, 1 do
        PMDG_AirC2_dec ()
        end
    PMDG_AirC2_show ()
end
function PMDG_AirC2_auto ()
    AirC2 = ipc.readLvar("switch_37_a")
    if AirC2 == 0 then PMDG_AirC2_inc ()
    elseif AirC2 == 100 then PMDG_AirC2_dec ()
    end
    PMDG_AirC2_show ()
end
function PMDG_AirC2_on ()
    AirC2 = ipc.readLvar("switch_37_a")
    if AirC2 == 0 then step = 2 else step = 1 end
        for i = 0, step, 1 do
        PMDG_AirC2_inc ()
        end
    PMDG_AirC2_show ()
end
--
function PMDG_AirCAll_off ()
    PMDG_AirC1_off ()
    _sleep(150,300)
    PMDG_AirC2_off ()
end
function PMDG_AirCAll_auto ()
    PMDG_AirC1_auto ()
    _sleep(150,300)
    PMDG_AirC2_auto ()
end
function PMDG_AirCAll_on ()
    PMDG_AirC1_on ()
    _sleep(150,300)
    PMDG_AirC2_on ()
end
---
function PMDG_All_HydRotaries_off ()
    PMDG_AirCAll_off ()
   _sleep(150,300)
    PMDG_ElecAll_off ()
end
function PMDG_All_HydRotaries_auto ()
    PMDG_AirCAll_auto ()
   _sleep(150,300)
    PMDG_ElecAll_auto ()
end
function PMDG_All_HydRotaries_on ()
    PMDG_AirCAll_on ()
   _sleep(150,300)
    PMDG_ElecAll_on ()
end
-- ## Fuel Pumps #####
function FuelPump_AFT1_on ()
    if ipc.readLvar("switch_105_a") == 0 then
    ipc.control(69737, cg)
    end
end
function FuelPump_AFT1_off ()
    if ipc.readLvar("switch_105_a") == 100 then
    ipc.control(69737, cg)
    end
end
function FuelPump_AFT2_on ()
    if ipc.readLvar("switch_106_a") == 0 then
    ipc.control(69738, cg)
    end
end
function FuelPump_AFT2_off ()
    if ipc.readLvar("switch_106_a") == 100 then
    ipc.control(69738, cg)
    end
end
function FuelPump_FWD1_on ()
    if ipc.readLvar("switch_103_a") == 0 then
    ipc.control(69735, cg)
    end
end
function FuelPump_FWD1_off ()
    if ipc.readLvar("switch_103_a") == 100 then
    ipc.control(69735, cg)
    end
end
function FuelPump_FWD2_on ()
    if ipc.readLvar("switch_104_a") == 0 then
    ipc.control(69736, cg)
    end
end
function FuelPump_FWD2_off ()
    if ipc.readLvar("switch_104_a") == 100 then
    ipc.control(69736, cg)
    end
end
function FuelPump_CenterL_on ()
    if ipc.readLvar("switch_109_a") == 0 then
    ipc.control(69741, cg)
    end
end
function FuelPump_CenterL_off ()
    if ipc.readLvar("switch_109_a") == 100 then
    ipc.control(69741, cg)
    end
end
function FuelPump_CenterR_on ()
    if ipc.readLvar("switch_110_a") == 0 then
    ipc.control(69742, cg)
    end
end
function FuelPump_CenterR_off ()
    if ipc.readLvar("switch_110_a") == 100 then
    ipc.control(69742, cg)
    end
end
function FuelPump_Aux_on ()
    if ipc.readLvar("switch_1037_a") == 0 then
    ipc.control(69632+1037, cg)
    end
end
function FuelPump_Aux_off ()
    if ipc.readLvar("switch_1037_a") == 100 then
    ipc.control(69632+1037, cg)
    end
end
-- ## Engine Start ###############
function PMDG_Autostart_on ()
    if ipc.readLvar("switch_96_a") == 0 then
    ipc.control(69728, cg)
    end
end
function PMDG_Autostart_off ()
    if ipc.readLvar("switch_96_a") == 100 then
    ipc.control(69728, cg)
    end
end
function PMDG_EngL_Start ()
    ipc.control(69726,cg)
    ----DspShow ("Strt", "left")
end
function PMDG_EngR_Start ()
    ipc.control(69727,cg)
    ----DspShow ("Strt", "rght")
end
-- ## Packs ###############
function PMDG_LPack_on ()
    if ipc.readLvar("switch_135_a") == 0 then
    ipc.control(69767, cg)
    end
    ----DspShow ("LPck", "on")
end
function PMDG_LPack_off ()
    if ipc.readLvar("switch_135_a") == 100 then
    ipc.control(69767, cg)
    end
    ----DspShow ("LPck", "off")
end
function PMDG_LPack_toggle ()
	if _tl("switch_135_a", 0) then
       PMDG_LPack_on ()
	else
       PMDG_LPack_off ()
	end
end
function PMDG_RPack_on ()
    if ipc.readLvar("switch_136_a") == 0 then
    ipc.control(69768, cg)
    end
    ----DspShow ("RPck", "on")
end
function PMDG_RPack_off ()
    if ipc.readLvar("switch_136_a") == 100 then
    ipc.control(69768, cg)
    end
    ----DspShow ("RPck", "off")
end
function PMDG_RPack_toggle ()
	if _tl("switch_136_a", 0) then
       PMDG_RPack_on ()
	else
       PMDG_RPack_off ()
	end
end


-- ## Forward Panel - Display Selectors ##############
function DSP_INDB_DSPL_L_inc ()
    ipc.control(69947,cd)
end
function DSP_INDB_DSPL_L_dec ()
    ipc.control(69947,cg)
end
function DSP_INDB_DSPL_R_inc ()
    ipc.control(69922,cd)
end
function DSP_INDB_DSPL_R_dec ()
    ipc.control(69922,cg)
end
-- ## Chronometers #########
function CHRONO_L_CHR ()
    ipc.control(69803,cg)
end
function CHRONO_L_ET_Start ()
    if ipc.readLvar("switch_173_a") == 50 then
    ipc.control(69805, cd)
    end
end
function CHRONO_L_ET_Stop ()
    if ipc.readLvar("switch_173_a") == 100 then
    ipc.control(69805, cg)
    end
end
function CHRONO_L_ET_Reset ()
    if ipc.readLvar("switch_173_a") == 100 then
    ipc.control(69805, cg)
    ipc.sleep (250)
    ipc.control(69805, cg)
    else
    ipc.control(69805, cg)
    end
end
function CHRONO_R_CHR ()
    ipc.control(69911,cg)
end
function CHRONO_R_ET_Start ()
    if ipc.readLvar("switch_281_a") == 50 then
    ipc.control(69913, cd)
    end
end
function CHRONO_R_ET_Stop ()
    if ipc.readLvar("switch_281_a") == 100 then
    ipc.control(69913, cg)
    end
end
function CHRONO_R_ET_Reset ()
    if ipc.readLvar("switch_281_a") == 100 then
    ipc.control(69913, cg)
    ipc.sleep (250)
    ipc.control(69913, cg)
    else
    ipc.control(69913, cg)
    end
end
-- ## COM 1  XPDR #######
function COM1_OUTER_inc ()
    ipc.control(70159, cd)
end
function COM1_OUTER_dec ()
    ipc.control(70159, cg)
end
function COM1_INNER_inc ()
    ipc.control(70160, cd)
end
function COM1_INNER_dec ()
    ipc.control(70160, cg)
end
function COM1_Transfert ()
    ipc.control(70158, cg)
end
function TCAS_OUTER_Rinc ()
    tcas = ipc.readUW(0x0354)
    tcas = DEC_HEX(tcas)
    if string.len(tcas) == 3 then tcas = "0"..tcas
    elseif string.len(tcas) == 2 then tcas = "00"..tcas
    elseif string.len(tcas) == 1 then tcas = "000"..tcas end
    tcas1 = string.sub(tcas,3,3)
    if tcas1 == "7" then
    tcas = string.sub(tcas,1,2).."0"..string.sub(tcas,4,4)
    tcas = tonumber(tcas,16)
    ipc.writeUW(0x0354,tcas)
    else
    ipc.control(69632+747, cd)
    end
end
function TCAS_OUTER_Linc ()
    tcas = ipc.readUW(0x0354)
    tcas = DEC_HEX(tcas)
    if string.len(tcas) == 3 then tcas = "0"..tcas
    elseif string.len(tcas) == 2 then tcas = "00"..tcas
    elseif string.len(tcas) == 1 then tcas = "000"..tcas end
    tcas1 = string.sub(tcas,1,1)
    if tcas1 == "7" then
    tcas = "0"..string.sub(tcas,2,4)
    tcas = tonumber(tcas,16)
    ipc.writeUW(0x0354,tcas)
    else
    ipc.control(69632+744, cd)
    end
end
function TCAS_INNER_Rinc ()
    tcas = ipc.readUW(0x0354)
    tcas = DEC_HEX(tcas)
    if string.len(tcas) == 3 then tcas = "0"..tcas
    elseif string.len(tcas) == 2 then tcas = "00"..tcas
    elseif string.len(tcas) == 1 then tcas = "000"..tcas end
    tcas1 = string.sub(tcas,4,4)
    if tcas1 == "7" then
    tcas = string.sub(tcas,1,3).."0"
    tcas = tonumber(tcas,16)
    ipc.writeUW(0x0354,tcas)
    else
    ipc.control(69632+748, cd)
    end
end
function TCAS_INNER_Linc ()
    tcas = ipc.readUW(0x0354)
    tcas = DEC_HEX(tcas)
    if string.len(tcas) == 3 then tcas = "0"..tcas
    elseif string.len(tcas) == 2 then tcas = "00"..tcas
    elseif string.len(tcas) == 1 then tcas = "000"..tcas end
    tcas1 = string.sub(tcas,2,2)
    if tcas1 == "7" then
    tcas = string.sub(tcas,1,1).."0"..string.sub(tcas,3,4)
    tcas = tonumber(tcas,16)
    ipc.writeUW(0x0354,tcas)
    else
    ipc.control(69632+745, cd)
    end
end
function TCAS_Ident ()
    ipc.control(69632+746, cg)
end
-- ## Captain's CDU ###############
function Press_CaptCDU_LSK1L()
        ipc.control(69960,cg)
end
function Press_CaptCDU_LSK2L()
        ipc.control(69961,cg)
end
function Press_CaptCDU_LSK3L()
        ipc.control(69962,cg)
end
function Press_CaptCDU_LSK4L()
        ipc.control(69963,cg)
end
function Press_CaptCDU_LSK5L()
        ipc.control(69964,cg)
end
function Press_CaptCDU_LSK6L()
        ipc.control(69965,cg)
end
function Press_CaptCDU_LSK1R()
        ipc.control(69966,cg)
end
function Press_CaptCDU_LSK2R()
        ipc.control(69967,cg)
end
function Press_CaptCDU_LSK3R()
        ipc.control(69968,cg)
end
function Press_CaptCDU_LSK4R()
        ipc.control(69969,cg)
end
function Press_CaptCDU_LSK5R()
        ipc.control(69970,cg)
end
function Press_CaptCDU_LSK6R()
        ipc.control(69971,cg)
end
function Press_CaptCDU_INITREF()
        ipc.control(69972,cg)
end
function Press_CaptCDU_RTE()
        ipc.control(69973,cg)
end
function Press_CaptCDU_DEPARR()
        ipc.control(69974,cg)
end
function Press_CaptCDU_ALTN()
        ipc.control(69975,cg)
end
function Press_CaptCDU_VNAV()
        ipc.control(69976,cg)
end
function Press_CaptCDU_FIX()
        ipc.control(69977,cg)
end
function Press_CaptCDU_LEGS()
        ipc.control(69978,cg)
end
function Press_CaptCDU_HOLD()
        ipc.control(69979,cg)
end
function Press_CaptCDU_FMCCOMM()
        ipc.control(73103,cg)
end
function Press_CaptCDU_PROG()
        ipc.control(69980,cg)
end
function Press_CaptCDU_EXEC()
        ipc.control(69981,cg)
end
function Press_CaptCDU_MENU()
        ipc.control(69982,cg)
end
function Press_CaptCDU_NAVRAD()
        ipc.control(69983,cg)
end
function Press_CaptCDU_PREVPAGE()
        ipc.control(69984,cg)
end
function Press_CaptCDU_NEXTPAGE()
        ipc.control(69985,cg)
end
function Press_CaptCDU_1()
        ipc.control(69986,cg)
end
function Press_CaptCDU_2()
        ipc.control(69987,cg)
end
function Press_CaptCDU_3()
        ipc.control(69988,cg)
end
function Press_CaptCDU_4()
        ipc.control(69989,cg)
end
function Press_CaptCDU_5()
        ipc.control(69990,cg)
end
function Press_CaptCDU_6()
        ipc.control(69991,cg)
end
function Press_CaptCDU_7()
        ipc.control(69992,cg)
end
function Press_CaptCDU_8()
        ipc.control(69993,cg)
end
function Press_CaptCDU_9()
        ipc.control(69994,cg)
end
function Press_CaptCDU_PERIOD()
        ipc.control(69995,cg)
end
function Press_CaptCDU_0()
        ipc.control(69996,cg)
end
function Press_CaptCDU_PLUSMIN()
        ipc.control(69997,cg)
end
function Press_CaptCDU_A()
        ipc.control(69998,cg)
end
function Press_CaptCDU_B()
        ipc.control(69999,cg)
end
function Press_CaptCDU_C()
        ipc.control(70000,cg)
end
function Press_CaptCDU_D()
        ipc.control(70001,cg)
end
function Press_CaptCDU_E()
        ipc.control(70002,cg)
end
function Press_CaptCDU_F()
        ipc.control(70003,cg)
end
function Press_CaptCDU_G()
        ipc.control(70004,cg)
end
function Press_CaptCDU_H()
        ipc.control(70005,cg)
end
function Press_CaptCDU_I()
        ipc.control(70006,cg)
end
function Press_CaptCDU_J()
        ipc.control(70007,cg)
end
function Press_CaptCDU_K()
        ipc.control(70008,cg)
end
function Press_CaptCDU_L()
        ipc.control(70009,cg)
end
function Press_CaptCDU_M()
        ipc.control(70010,cg)
end
function Press_CaptCDU_N()
        ipc.control(70011,cg)
end
function Press_CaptCDU_O()
        ipc.control(70012,cg)
end
function Press_CaptCDU_P()
        ipc.control(70013,cg)
end
function Press_CaptCDU_Q()
        ipc.control(70014,cg)
end
function Press_CaptCDU_R()
        ipc.control(70015,cg)
end
function Press_CaptCDU_S()
        ipc.control(70016,cg)
end
function Press_CaptCDU_T()
        ipc.control(70017,cg)
end
function Press_CaptCDU_U()
        ipc.control(70018,cg)
end
function Press_CaptCDU_V()
        ipc.control(70019,cg)
end
function Press_CaptCDU_W()
        ipc.control(70020,cg)
end
function Press_CaptCDU_X()
        ipc.control(70021,cg)
end
function Press_CaptCDU_Y()
        ipc.control(70022,cg)
end
function Press_CaptCDU_Z()
        ipc.control(70023,cg)
end
function Press_CaptCDU_SP()
        ipc.control(70024,cg)
end
function Press_CaptCDU_DEL()
        ipc.control(70025,cg)
end
function Press_CaptCDU_SLASH()
        ipc.control(70026,cg)
end
function Press_CaptCDU_CLR()
        ipc.control(70027,cg)
end
function Press_CaptCDU_BRTMIN()
        ipc.control(70032,cg)
end
function Press_CaptCDU_BRTPLUS()
        ipc.control(70032,cd)
end
-- ## First Officer's CDU ###############
function Press_FO_CDU_LSK1L()
        ipc.control(69960+73,cg)
end
function Press_FO_CDU_LSK2L()
        ipc.control(69961+73,cg)
end
function Press_FO_CDU_LSK3L()
        ipc.control(69962+73,cg)
end
function Press_FO_CDU_LSK4L()
        ipc.control(69963+73,cg)
end
function Press_FO_CDU_LSK5L()
        ipc.control(69964+73,cg)
end
function Press_FO_CDU_LSK6L()
        ipc.control(69965+73,cg)
end
function Press_FO_CDU_LSK1R()
        ipc.control(69966+73,cg)
end
function Press_FO_CDU_LSK2R()
        ipc.control(69967+73,cg)
end
function Press_FO_CDU_LSK3R()
        ipc.control(69968+73,cg)
end
function Press_FO_CDU_LSK4R()
        ipc.control(69969+73,cg)
end
function Press_FO_CDU_LSK5R()
        ipc.control(69970+73,cg)
end
function Press_FO_CDU_LSK6R()
        ipc.control(69971+73,cg)
end
function Press_FO_CDU_INITREF()
        ipc.control(69972+73,cg)
end
function Press_FO_CDU_RTE()
        ipc.control(69973+73,cg)
end
function Press_FO_CDU_DEPARR()
        ipc.control(69974+73,cg)
end
function Press_FO_CDU_ALTN()
        ipc.control(69975+73,cg)
end
function Press_FO_CDU_VNAV()
        ipc.control(69976+73,cg)
end
function Press_FO_CDU_FIX()
        ipc.control(69977+73,cg)
end
function Press_FO_CDU_LEGS()
        ipc.control(69978+73,cg)
end
function Press_FO_CDU_HOLD()
        ipc.control(69979+73,cg)
end
function Press_FO_CDU_FMCCOMM()
        ipc.control(73103+73,cg)
end
function Press_FO_CDU_PROG()
        ipc.control(69980+73,cg)
end
function Press_FO_CDU_EXEC()
        ipc.control(69981+73,cg)
end
function Press_FO_CDU_MENU()
        ipc.control(69982+73,cg)
end
function Press_FO_CDU_NAVRAD()
        ipc.control(69983+73,cg)
end
function Press_FO_CDU_PREVPAGE()
        ipc.control(69984+73,cg)
end
function Press_FO_CDU_NEXTPAGE()
        ipc.control(69985+73,cg)
end
function Press_FO_CDU_1()
        ipc.control(69986+73,cg)
end
function Press_FO_CDU_2()
        ipc.control(69987+73,cg)
end
function Press_FO_CDU_3()
        ipc.control(69988+73,cg)
end
function Press_FO_CDU_4()
        ipc.control(69989+73,cg)
end
function Press_FO_CDU_5()
        ipc.control(69990+73,cg)
end
function Press_FO_CDU_6()
        ipc.control(69991+73,cg)
end
function Press_FO_CDU_7()
        ipc.control(69992+73,cg)
end
function Press_FO_CDU_8()
        ipc.control(69993+73,cg)
end
function Press_FO_CDU_9()
        ipc.control(69994+73,cg)
end
function Press_FO_CDU_PERIOD()
        ipc.control(69995+73,cg)
end
function Press_FO_CDU_0()
        ipc.control(69996+73,cg)
end
function Press_FO_CDU_PLUSMIN()
        ipc.control(69997+73,cg)
end
function Press_FO_CDU_A()
        ipc.control(69998+73,cg)
end
function Press_FO_CDU_B()
        ipc.control(69999+73,cg)
end
function Press_FO_CDU_C()
        ipc.control(70000+73,cg)
end
function Press_FO_CDU_D()
        ipc.control(70001+73,cg)
end
function Press_FO_CDU_E()
        ipc.control(70002+73,cg)
end
function Press_FO_CDU_F()
        ipc.control(70003+73,cg)
end
function Press_FO_CDU_G()
        ipc.control(70004+73,cg)
end
function Press_FO_CDU_H()
        ipc.control(70005+73,cg)
end
function Press_FO_CDU_I()
        ipc.control(70006+73,cg)
end
function Press_FO_CDU_J()
        ipc.control(70007+73,cg)
end
function Press_FO_CDU_K()
        ipc.control(70008+73,cg)
end
function Press_FO_CDU_L()
        ipc.control(70009+73,cg)
end
function Press_FO_CDU_M()
        ipc.control(70010+73,cg)
end
function Press_FO_CDU_N()
        ipc.control(70011+73,cg)
end
function Press_FO_CDU_O()
        ipc.control(70012+73,cg)
end
function Press_FO_CDU_P()
        ipc.control(70013+73,cg)
end
function Press_FO_CDU_Q()
        ipc.control(70014+73,cg)
end
function Press_FO_CDU_R()
        ipc.control(70015+73,cg)
end
function Press_FO_CDU_S()
        ipc.control(70016+73,cg)
end
function Press_FO_CDU_T()
        ipc.control(70017+73,cg)
end
function Press_FO_CDU_U()
        ipc.control(70018+73,cg)
end
function Press_FO_CDU_V()
        ipc.control(70019+73,cg)
end
function Press_FO_CDU_W()
        ipc.control(70020+73,cg)
end
function Press_FO_CDU_X()
        ipc.control(70021+73,cg)
end
function Press_FO_CDU_Y()
        ipc.control(70022+73,cg)
end
function Press_FO_CDU_Z()
        ipc.control(70023+73,cg)
end
function Press_FO_CDU_SP()
        ipc.control(70024+73,cg)
end
function Press_FO_CDU_DEL()
        ipc.control(70025+73,cg)
end
function Press_FO_CDU_SLASH()
        ipc.control(70026+73,cg)
end
function Press_FO_CDU_CLR()
        ipc.control(70027+73,cg)
end
function Press_FO_CDU_BRTMIN()
        ipc.control(70032+73,cg)
end
function Press_FO_CDU_BRTPLUS()
        ipc.control(70032+73,cd)
end
-- ## CENTRAL CDU ###############
function Press_CENTRAL_CDU_LSK1L()
        ipc.control(69960+325,cg)
end
function Press_CENTRAL_CDU_LSK2L()
        ipc.control(69961+325,cg)
end
function Press_CENTRAL_CDU_LSK3L()
        ipc.control(69962+325,cg)
end
function Press_CENTRAL_CDU_LSK4L()
        ipc.control(69963+325,cg)
end
function Press_CENTRAL_CDU_LSK5L()
        ipc.control(69964+325,cg)
end
function Press_CENTRAL_CDU_LSK6L()
        ipc.control(69965+325,cg)
end
function Press_CENTRAL_CDU_LSK1R()
        ipc.control(69966+325,cg)
end
function Press_CENTRAL_CDU_LSK2R()
        ipc.control(69967+325,cg)
end
function Press_CENTRAL_CDU_LSK3R()
        ipc.control(69968+325,cg)
end
function Press_CENTRAL_CDU_LSK4R()
        ipc.control(69969+325,cg)
end
function Press_CENTRAL_CDU_LSK5R()
        ipc.control(69970+325,cg)
end
function Press_CENTRAL_CDU_LSK6R()
        ipc.control(69971+325,cg)
end
function Press_CENTRAL_CDU_INITREF()
        ipc.control(69972+325,cg)
end
function Press_CENTRAL_CDU_RTE()
        ipc.control(69973+325,cg)
end
function Press_CENTRAL_CDU_DEPARR()
        ipc.control(69974+325,cg)
end
function Press_CENTRAL_CDU_ALTN()
        ipc.control(69975+325,cg)
end
function Press_CENTRAL_CDU_VNAV()
        ipc.control(69976+325,cg)
end
function Press_CENTRAL_CDU_FIX()
        ipc.control(69977+325,cg)
end
function Press_CENTRAL_CDU_LEGS()
        ipc.control(69978+325,cg)
end
function Press_CENTRAL_CDU_HOLD()
        ipc.control(69979+325,cg)
end
function Press_CENTRAL_CDU_FMCCOMM()
        ipc.control(73103+325,cg)
end
function Press_CENTRAL_CDU_PROG()
        ipc.control(69980+325,cg)
end
function Press_CENTRAL_CDU_EXEC()
        ipc.control(69981+325,cg)
end
function Press_CENTRAL_CDU_MENU()
        ipc.control(69982+325,cg)
end
function Press_CENTRAL_CDU_NAVRAD()
        ipc.control(69983+325,cg)
end
function Press_CENTRAL_CDU_PREVPAGE()
        ipc.control(69984+325,cg)
end
function Press_CENTRAL_CDU_NEXTPAGE()
        ipc.control(69985+325,cg)
end
function Press_CENTRAL_CDU_1()
        ipc.control(69986+325,cg)
end
function Press_CENTRAL_CDU_2()
        ipc.control(69987+325,cg)
end
function Press_CENTRAL_CDU_3()
        ipc.control(69988+325,cg)
end
function Press_CENTRAL_CDU_4()
        ipc.control(69989+325,cg)
end
function Press_CENTRAL_CDU_5()
        ipc.control(69990+325,cg)
end
function Press_CENTRAL_CDU_6()
        ipc.control(69991+325,cg)
end
function Press_CENTRAL_CDU_7()
        ipc.control(69992+325,cg)
end
function Press_CENTRAL_CDU_8()
        ipc.control(69993+325,cg)
end
function Press_CENTRAL_CDU_9()
        ipc.control(69994+325,cg)
end
function Press_CENTRAL_CDU_PERIOD()
        ipc.control(69995+325,cg)
end
function Press_CENTRAL_CDU_0()
        ipc.control(69996+325,cg)
end
function Press_CENTRAL_CDU_PLUSMIN()
        ipc.control(69997+325,cg)
end
function Press_CENTRAL_CDU_A()
        ipc.control(69998+325,cg)
end
function Press_CENTRAL_CDU_B()
        ipc.control(69999+325,cg)
end
function Press_CENTRAL_CDU_C()
        ipc.control(70000+325,cg)
end
function Press_CENTRAL_CDU_D()
        ipc.control(70001+325,cg)
end
function Press_CENTRAL_CDU_E()
        ipc.control(70002+325,cg)
end
function Press_CENTRAL_CDU_F()
        ipc.control(70003+325,cg)
end
function Press_CENTRAL_CDU_G()
        ipc.control(70004+325,cg)
end
function Press_CENTRAL_CDU_H()
        ipc.control(70005+325,cg)
end
function Press_CENTRAL_CDU_I()
        ipc.control(70006+325,cg)
end
function Press_CENTRAL_CDU_J()
        ipc.control(70007+325,cg)
end
function Press_CENTRAL_CDU_K()
        ipc.control(70008+325,cg)
end
function Press_CENTRAL_CDU_L()
        ipc.control(70009+325,cg)
end
function Press_CENTRAL_CDU_M()
        ipc.control(70010+325,cg)
end
function Press_CENTRAL_CDU_N()
        ipc.control(70011+325,cg)
end
function Press_CENTRAL_CDU_O()
        ipc.control(70012+325,cg)
end
function Press_CENTRAL_CDU_P()
        ipc.control(70013+325,cg)
end
function Press_CENTRAL_CDU_Q()
        ipc.control(70014+325,cg)
end
function Press_CENTRAL_CDU_R()
        ipc.control(70015+325,cg)
end
function Press_CENTRAL_CDU_S()
        ipc.control(70016+325,cg)
end
function Press_CENTRAL_CDU_T()
        ipc.control(70017+325,cg)
end
function Press_CENTRAL_CDU_U()
        ipc.control(70018+325,cg)
end
function Press_CENTRAL_CDU_V()
        ipc.control(70019+325,cg)
end
function Press_CENTRAL_CDU_W()
        ipc.control(70020+325,cg)
end
function Press_CENTRAL_CDU_X()
        ipc.control(70021+325,cg)
end
function Press_CENTRAL_CDU_Y()
        ipc.control(70022+325,cg)
end
function Press_CENTRAL_CDU_Z()
        ipc.control(70023+325,cg)
end
function Press_CENTRAL_CDU_SP()
        ipc.control(70024+325,cg)
end
function Press_CENTRAL_CDU_DEL()
        ipc.control(70025+325,cg)
end
function Press_CENTRAL_CDU_SLASH()
        ipc.control(70026+325,cg)
end
function Press_CENTRAL_CDU_CLR()
        ipc.control(70027+325,cg)
end
function Press_CENTRAL_CDU_BRTMIN()
        ipc.control(70032+325,cg)
end
function Press_CENTRAL_CDU_BRTPLUS()
        ipc.control(70032+325,cd)
end
-- ## Capt CDU Pages ###############
function CaptCDU_Fuel()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK1L() -- Fuel
    ----DspShow ("CDU1", "Fuel")
end
function CaptCDU_Payload()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK2L() -- Payload
    ----DspShow ("CDU1", "Payl")
end
function CaptCDU_Doors()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ----DspShow ("CDU1", "Door")
end
function CaptCDU_Pushback()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK4L() -- Pushback
    ----DspShow ("CDU1", "Push")
end
function CaptCDU_GroundConn()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK1R() -- GroundConn
    ----DspShow ("CDU1", "Conn")
end
function CaptCDU_GroundOps()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK2R() -- GroundOps
    ----DspShow ("CDU1", "Ops")
end
function CaptCDU_GroundMaint()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3R() -- GroundMaint
    ----DspShow ("CDU1", "Mtnc")
end
function CaptCDU_CabLights()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK4R() -- CabLights
    ----DspShow ("CDU1", "Lght")
end
function CaptCDU_AutoFlight()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK5R() -- AutoFlight
    ----DspShow ("CDU1", "Aflt")
end
-- ## FO CDU Pages ###############
function FO_CDU_Fuel()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK1L() -- Fuel
    ----DspShow ("CDU2", "Fuel")
end
function FO_CDU_Payload()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK2L() -- Payload
    ----DspShow ("CDU2", "Payl")
end
function FO_CDU_Doors()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ----DspShow ("CDU2", "Door")
end
function FO_CDU_Pushback()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK4L() -- Pushback
    ----DspShow ("CDU2", "Push")
end
function FO_CDU_GroundConn()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK1R() -- GroundConn
    ----DspShow ("CDU2", "Conn")
end
function FO_CDU_GroundOps()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK2R() -- GroundOps
    ----DspShow ("CDU2", "Ops")
end
function FO_CDU_GroundMaint()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3R() -- GroundMaint
    ----DspShow ("CDU2", "Mtnc")
end
function FO_CDU_CabLights()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK4R() -- CabLights
    ----DspShow ("CDU2", "Lght")
end
function FO_CDU_AutoFlight()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK5R() -- AutoFlight
    ----DspShow ("CDU2", "Aflt")
end
-- ## Capt CDU Doors ###############
function CaptCDU_Entry_1L()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK1L() -- Entry1 left
    ----DspShow ("CDU1", "E1 L")
end
function CaptCDU_Entry_2L()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK2L() -- Entry2 left
    ----DspShow ("CDU1", "E2 L")
end
function CaptCDU_Entry_3L()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Entry3 left
    ----DspShow ("CDU1", "E3 L")
end
function CaptCDU_Entry_4L()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK4L() -- Entry4 left
    ----DspShow ("CDU1", "E4 L")
end
function CaptCDU_MainDeck_Cargo()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK5L() -- Main Deck Cargo
    ----DspShow ("CDU1", "Crgo")
end
--------------
function CaptCDU_Entry_1R()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK1R() -- Entry1 right
    ----DspShow ("CDU1", "E1 R")
end
function CaptCDU_Entry_2R()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK2R() -- Entry2 right
    ----DspShow ("CDU1", "E2 R")
end
function CaptCDU_Entry_3R()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK3R() -- Entry3 right
    ----DspShow ("CDU1", "E3 R")
end
function CaptCDU_Entry_4R()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_LSK4R() -- Entry4 right
    ----DspShow ("CDU1", "E4 R")
end
---------------
function CaptCDU_Cargo_FWD()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_CaptCDU_LSK1L() -- Cargo FWD
    ----DspShow ("CDU1", "CFwd")
end
function CaptCDU_Cargo_AFT()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_CaptCDU_LSK2L() -- Cargo AFT
    ----DspShow ("CDU1", "CAft")
end
function CaptCDU_Cargo_Bulk()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Bulk
    ----DspShow ("CDU1", "Bulk")
end
function CaptCDU_Access_FWD()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_CaptCDU_LSK1R() -- Access FWD
    ----DspShow ("CDU1", "AFwd")
end
function CaptCDU_Access_EE()
    Press_CaptCDU_MENU()
    ipc.sleep(10)
    Press_CaptCDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_CaptCDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_CaptCDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_CaptCDU_LSK1R() -- Access EE
    ----DspShow ("CDU1", "A EE")
end
---
---
function CaptCDU_Entries_124L()
    CaptCDU_Entry_1L()
    ipc.sleep(1000)
    CaptCDU_Entry_2L()
    ipc.sleep(1000)
    CaptCDU_Entry_4L()
    ipc.sleep(1000)
    ----DspShow ("CDU1", "124L")
end
function CaptCDU_all_Cargo()
    CaptCDU_Cargo_FWD()
    ipc.sleep(1000)
    CaptCDU_Cargo_AFT()
    ipc.sleep(1000)
    CaptCDU_Cargo_Bulk()
    ipc.sleep(1000)
    CaptCDU_MainDeck_Cargo()
    ----DspShow ("CDU1", "Crgo")
end
-- ## FO CDU Doors ###############
function FO_CDU_Entry_1L()
    Press_FO_CDU_MENU()
    ipc.sleep(2000)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(500)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(500)
    Press_FO_CDU_LSK1L() -- Entry1 left
    ipc.sleep(500)
    Press_FO_CDU_LSK1L()
    ----DspShow ("CDU2", "E1 L")
end
function FO_CDU_Entry_2L()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_LSK2L() -- Entry2 left
    ipc.sleep(500)
    Press_FO_CDU_LSK2L()
    ----DspShow ("CDU2", "E2 L")
end
function FO_CDU_Entry_3L()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Entry3 left
    ----DspShow ("CDU2", "E3 L")
end
function FO_CDU_Entry_4L()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_LSK4L() -- Entry4 left
    ipc.sleep(500)
    Press_FO_CDU_LSK4L()
    ----DspShow ("CDU2", "E4 L")
end
function FO_CDU_Entry_5L() --- 777-300
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_LSK5L() -- Entry5 left
    ipc.sleep(500)
    Press_FO_CDU_LSK5L()
    ----DspShow ("CDU2", "E5 L")
end
function FO_CDU_MainDeck_Cargo()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_LSK5L() -- Main Deck Cargo
    ----DspShow ("CDU2", "Crgo")
end
--------------
function FO_CDU_Entry_1R()
    Press_FO_CDU_MENU()
    ipc.sleep(100)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(100)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(100)
    Press_FO_CDU_LSK1R() -- Entry1 right
    ----DspShow ("CDU2", "E1 R")
end
function FO_CDU_Entry_2R()
    Press_FO_CDU_MENU()
    ipc.sleep(100)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(100)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(100)
    Press_FO_CDU_LSK2R() -- Entry2 right
    ipc.sleep(500)
    Press_FO_CDU_LSK2R()
    ----DspShow ("CDU2", "E2 R")
end
function FO_CDU_Entry_3R()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_LSK3R() -- Entry3 right
    ----DspShow ("CDU2", "E3 R")
end
function FO_CDU_Entry_4R()
    Press_FO_CDU_MENU()
    ipc.sleep(100)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(100)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(100)
    Press_FO_CDU_LSK4R() -- Entry4 right
    ipc.sleep(500)
    Press_FO_CDU_LSK4R()
    ----DspShow ("CDU2", "E4 R")
end
function FO_CDU_Entry_5R()  --- 777-300
    Press_FO_CDU_MENU()
    ipc.sleep(100)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(100)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(100)
    Press_FO_CDU_LSK5R() -- Entry5 right
    ipc.sleep(500)
    Press_FO_CDU_LSK5R()
    ----DspShow ("CDU2", "E5 R")
end
---------------
function FO_CDU_Cargo_FWD()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_FO_CDU_LSK1L() -- Cargo FWD
    ----DspShow ("CDU2", "CFwd")
end
function FO_CDU_Cargo_AFT()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_FO_CDU_LSK2L() -- Cargo AFT
    ----DspShow ("CDU2", "CAft")
end
function FO_CDU_Cargo_Bulk()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Bulk
    ----DspShow ("CDU2", "Bulk")
end
function FO_CDU_Access_FWD()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_FO_CDU_LSK1R() -- Access FWD
    ----DspShow ("CDU2", "AFwd")
end
function FO_CDU_Access_EE()
    Press_FO_CDU_MENU()
    ipc.sleep(10)
    Press_FO_CDU_LSK6R() -- FS Actions
    ipc.sleep(10)
    Press_FO_CDU_LSK3L() -- Doors
    ipc.sleep(10)
    Press_FO_CDU_NEXTPAGE() -- Next
    ipc.sleep(10)
    Press_FO_CDU_LSK1R() -- Access EE
    ----DspShow ("CDU2", "A EE")
end
function FO_CDU_Entries_124L()
    FO_CDU_Entry_1L()
    ipc.sleep(1000)
    FO_CDU_Entry_2L()
    ipc.sleep(1000)
    FO_CDU_Entry_4L()
    ipc.sleep(1000)
    ----DspShow ("CDU2", "124L")
end
function FO_CDU_all_Cargo()
    FO_CDU_Cargo_FWD()
    ipc.sleep(1000)
    FO_CDU_Cargo_AFT()
    ipc.sleep(1000)
    FO_CDU_Cargo_Bulk()
    ipc.sleep(1000)
    FO_CDU_MainDeck_Cargo()
    ----DspShow ("CDU2", "Crgo")
end
-- ## Capt CDU Ground Connections ###############
function CaptCDU_Wheel_Chocks ()
    CaptCDU_GroundConn()
    ipc.sleep(10)
    Press_CaptCDU_LSK1L()
    ----DspShow ("CDU1", "Chks")
end
function CaptCDU_PowerType ()
    CaptCDU_GroundConn()
    ipc.sleep(10)
    Press_CaptCDU_LSK2L()
    ----DspShow ("CDU1", "PwrT")
end
function CaptCDU_ExtPower ()
    CaptCDU_GroundConn()
    ipc.sleep(10)
    Press_CaptCDU_LSK3L()
    ----DspShow ("CDU1", "EPwr")
end
function CaptCDU_AirStart ()
    CaptCDU_GroundConn()
    ipc.sleep(10)
    Press_CaptCDU_LSK4L()
    ----DspShow ("CDU1", "AirS")
end
function CaptCDU_AirCondition ()
    CaptCDU_GroundConn()
    ipc.sleep(10)
    Press_CaptCDU_LSK5L()
    ----DspShow ("CDU1", "A/C")
end
---
function CaptCDU_GPU_and_AC_on ()
    GPUvar = ipc.readLvar("NGXGPU")
    AirStartvar = ipc.readLvar("NGXAirStartCart")
    AirCondvar = ipc.readLvar("NGXGSU")
    Chockvar = ipc.readLvar("NGXWheelChocks")
    if Chockvar == 0 then
    CaptCDU_Wheel_Chocks ()
    end
    _sleep(500,1000)
    if GPUvar == 0 then
    CaptCDU_ExtPower ()
    end
    _sleep(500,1000)
    if AirCondvar == 0 then
    CaptCDU_AirCondition ()
    end
end
function CaptCDU_GPU_and_AC_off ()
    GPUvar = ipc.readLvar("NGXGPU")
    AirStartvar = ipc.readLvar("NGXAirStartCart")
    AirCondvar = ipc.readLvar("NGXGSU")
    Chockvar = ipc.readLvar("NGXWheelChocks")
    if AirCondvar == 1 then
    CaptCDU_AirCondition ()
    end
    _sleep(500,1000)
    if GPUvar == 1 then
    CaptCDU_ExtPower ()
    end
     _sleep(500,1000)
        if Chockvar == 1 then
    CaptCDU_Wheel_Chocks ()
    end
end
function CaptCDU_All_GroundConnections_on ()
    GPUvar = ipc.readLvar("NGXGPU")
    AirStartvar = ipc.readLvar("NGXAirStartCart")
    AirCondvar = ipc.readLvar("NGXGSU")
    Chockvar = ipc.readLvar("NGXWheelChocks")
    if Chockvar == 0 then
    CaptCDU_Wheel_Chocks ()
    end
    ipc.sleep(1000)
    if GPUvar == 0 then
    CaptCDU_ExtPower ()
    end
    ipc.sleep(1000)
    if AirCondvar == 0 then
    CaptCDU_AirCondition ()
    end
    ipc.sleep(1000)
    if AirStartvar == 0 then
    CaptCDU_AirStart ()
    end
end
function CaptCDU_All_GroundConnections_off ()
    GPUvar = ipc.readLvar("NGXGPU")
    AirStartvar = ipc.readLvar("NGXAirStartCart")
    AirCondvar = ipc.readLvar("NGXGSU")
    Chockvar = ipc.readLvar("NGXWheelChocks")
    if AirCondvar == 1 then
    CaptCDU_AirCondition ()
    end
    ipc.sleep(1000)
    if GPUvar == 1 then
    CaptCDU_ExtPower ()
    end
    ipc.sleep(1000)
    if AirStartvar == 1 then
    CaptCDU_AirStart ()
    end
    ipc.sleep(1000)
    if Chockvar == 1 then
    CaptCDU_Wheel_Chocks ()
    end
end
-- ## FO CDU Ground Connections ###############
function FO_CDU_Wheel_Chocks ()
    FO_CDU_GroundConn()
    ipc.sleep(10)
    Press_FO_CDU_LSK1L()
    ----DspShow ("CDU2", "Chks")
end
function FO_CDU_PowerType ()
    FO_CDU_GroundConn()
    ipc.sleep(10)
    Press_FO_CDU_LSK2L()
    ----DspShow ("CDU2", "PwrT")
end
function FO_CDU_ExtPower ()
    FO_CDU_GroundConn()
    ipc.sleep(100)
    Press_FO_CDU_LSK3L()
    ----DspShow ("CDU2", "EPwr")
end
function FO_CDU_AirStart ()
    FO_CDU_GroundConn()
    ipc.sleep(10)
    Press_FO_CDU_LSK4L()
    ----DspShow ("CDU2", "AirS")
end
function FO_CDU_AirCondition ()
    FO_CDU_GroundConn()
    ipc.sleep(10)
    Press_FO_CDU_LSK5L()
    ------DspShow ("CDU2", "A/C")
end
---
function FO_CDU_GPU_and_AC_on ()
    GPUvar = ipc.readLvar("NGXGPU")
    AirStartvar = ipc.readLvar("NGXAirStartCart")
    AirCondvar = ipc.readLvar("NGXGSU")
    Chockvar = ipc.readLvar("NGXWheelChocks")
    if Chockvar == 0 then
    FO_CDU_Wheel_Chocks ()
    end
    _sleep(4000,8000)
    if GPUvar == 0 then
    FO_CDU_ExtPower ()
    end
    _sleep(4000,8000)
    if AirCondvar == 0 then
    FO_CDU_AirCondition ()
    end
end
function FO_CDU_GPU_and_AC_off ()
    GPUvar = ipc.readLvar("NGXGPU")
    AirStartvar = ipc.readLvar("NGXAirStartCart")
    AirCondvar = ipc.readLvar("NGXGSU")
    Chockvar = ipc.readLvar("NGXWheelChocks")
    if AirCondvar == 1 then
    FO_CDU_AirCondition ()
    end
    _sleep(500,1000)
    if GPUvar == 1 then
    FO_CDU_ExtPower ()
    end
     _sleep(500,1000)
        if Chockvar == 1 then
    FO_CDU_Wheel_Chocks ()
    end
end
function FO_CDU_All_GroundConnections_on ()
    GPUvar = ipc.readLvar("NGXGPU")
    AirStartvar = ipc.readLvar("NGXAirStartCart")
    AirCondvar = ipc.readLvar("NGXGSU")
    Chockvar = ipc.readLvar("NGXWheelChocks")
    if Chockvar == 0 then
    FO_CDU_Wheel_Chocks ()
    end
    ipc.sleep(1000)
    if GPUvar == 0 then
    FO_CDU_ExtPower ()
    end
    ipc.sleep(1000)
    if AirCondvar == 0 then
    FO_CDU_AirCondition ()
    end
    ipc.sleep(1000)
    if AirStartvar == 0 then
    FO_CDU_AirStart ()
    end
end
function FO_CDU_All_GroundConnections_off ()
    GPUvar = ipc.readLvar("NGXGPU")
    AirStartvar = ipc.readLvar("NGXAirStartCart")
    AirCondvar = ipc.readLvar("NGXGSU")
    Chockvar = ipc.readLvar("NGXWheelChocks")
    if AirCondvar == 1 then
    FO_CDU_AirCondition ()
    end
    ipc.sleep(1000)
    if GPUvar == 1 then
    FO_CDU_ExtPower ()
    end
    ipc.sleep(1000)
    if AirStartvar == 1 then
    FO_CDU_AirStart ()
    end
    ipc.sleep(1000)
    if Chockvar == 1 then
    FO_CDU_Wheel_Chocks ()
    end
end
-- ## Anti-ice ###############
function Wing_antiice_off()
    if ipc.readLvar('switch_111_a') == 50 then
    ipc.control(69743,cg)
    elseif ipc.readLvar('switch_111_a') == 100 then
    ipc.control(69743,cg)
    ipc.sleep(300)
    ipc.control(69743,cg)
    end
end
function Wing_antiice_auto()
    if ipc.readLvar('switch_111_a') == 0 then
    ipc.control(69743,cd)
    elseif ipc.readLvar('switch_111_a') == 100 then
    ipc.control(69743,cg)
    end
end
function Wing_antiice_on()
    if ipc.readLvar('switch_111_a') == 50 then
    ipc.control(69743,cd)
    elseif ipc.readLvar('switch_111_a') == 0 then
    ipc.control(69743,cd)
    ipc.sleep(300)
    ipc.control(69743,cd)
    end
end
function Eng1_antiice_off()
    if ipc.readLvar('switch_112_a') == 50 then
    ipc.control(69744,cg)
    elseif ipc.readLvar('switch_112_a') == 100 then
    ipc.control(69744,cg)
    ipc.sleep(300)
    ipc.control(69744,cg)
    end
end
function Eng1_antiice_auto()
    if ipc.readLvar('switch_112_a') == 0 then
    ipc.control(69744,cd)
    elseif ipc.readLvar('switch_112_a') == 100 then
    ipc.control(69744,cg)
    end
end
function Eng1_antiice_on()
    if ipc.readLvar('switch_112_a') == 50 then
    ipc.control(69744,cd)
    elseif ipc.readLvar('switch_112_a') == 0 then
    ipc.control(69744,cd)
    ipc.sleep(300)
    ipc.control(69744,cd)
    end
end
function Eng2_antiice_off()
    if ipc.readLvar('switch_113_a') == 50 then
    ipc.control(69745,cg)
    elseif ipc.readLvar('switch_113_a') == 100 then
    ipc.control(69745,cg)
    ipc.sleep(300)
    ipc.control(69745,cg)
    end
end
function Eng2_antiice_auto()
    if ipc.readLvar('switch_113_a') == 0 then
    ipc.control(69745,cd)
    elseif ipc.readLvar('switch_113_a') == 100 then
    ipc.control(69745,cg)
    end
end
function Eng2_antiice_on()
    if ipc.readLvar('switch_113_a') == 50 then
    ipc.control(69745,cd)
    elseif ipc.readLvar('switch_113_a') == 0 then
    ipc.control(69745,cd)
    ipc.sleep(300)
    ipc.control(69745,cd)
    end
end

--]]

-- ## VUES ########
function Vue_Ext_F () -- Francis pas ou plus utilisé
		vue = ipc.get("vue")
		--vue = ipc.readUB(0x7002)
        if vue == 0 or vue == nil then
        ipc.control(65825)-- FRANCIS NEW VIEW
        ipc.control(66856)-- FRANCIS VIEW CAMERA SELECT 6
        ipc.control(65828)-- FRANCIS PREVIOUS VIEW
        ipc.sleep(1500)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        vue = 1
		ipc.set("vue",1)
		--ipc.writeUB(0x7002,1)
        elseif vue == 1 then
        ipc.control(65828)
        ipc.control(65824)-- FRANCIS CLOSE VIEW
        ipc.sleep(1500)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        vue = 0
		ipc.set("vue",0)
		--ipc.writeUB(0x7002,0)
        end
end
function Vue_Ext_Francis ()
		vue = ipc.readUB(0x7002)
        if vue == 0 or vue == nil then
        mouse.move(20,400)--Patrick
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
		mouse.click()--Patrick.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne
		
        ipc.sleep(150)-- Francis
        ipc.control(66856)-- FRANCIS VIEW CAMERA SELECT 6. Ce control donne la vue Camera Taxi = vue roulette du menu Aircraft du New View. Ne marche plus 31072017. Je reprogramme en dessous. Marche avec HotKeySelect=6.
		--mouse.move(159,207) -- Dans la fenêtre New view.
		--mouse.click(2)
		--mouse.move(200,324) -- Dans Aircraft.
		--ipc.sleep(500)
		--mouse.move(406,323) -- Latéralement EZCA2
		--ipc.sleep(500)
		--mouse.move(419,710) -- Camera taxi.
		--mouse.click()
		ipc.sleep(500)
		mouse.move(202,180) -- Dans la fenêtre Taxi.
		--ipc.sleep(2000)
		mouse.click(2)
		--ipc.sleep(500)
		mouse.move(263,456) -- Sur la ligne Undock.
		ipc.sleep(2000)
		mouse.click()
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        --ipc.control(65828)--Patrick.
        ipc.sleep(1500)
        --mouse.move(394,201)--Patrick. Postitionne la souris dans la petite fenêtre. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
		-- mouse.click(2)--Patrick. Pour ouvrir le menu où se trouve la commande undock. Le (2) = click droit. 0 ou rien = gauche. 1 milieu. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.		
		
		-- mouse.move(405,449)--Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 478,452. Je teste avec 405,449. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--ipc.sleep(2000) -- Francis pour tester comment cela fonctionne. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--mouse.click()--Patrick. Pour undocker. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        --ipc.sleep(500)--Patrick.
        --mouse.move(20,400)--Patrick.
		--mouse.click()--Patrick.
        --ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement MouseClick.exe. Vue_Ext actions.lua.")
        vue = 1
		ipc.writeUB(0x7002,1)
		ipc.sleep(2000)
		ipc.keypressplus(114,27,4) -- POUR ENLEVER LES BORDURES 27= CTRL2+ALT16+SHIFT1+8 DE BASE
        ipc.sleep(1000)
		ipc.keypressplus(114,27,4) -- POUR ENLEVER LES BORDURES 27= CTRL2+ALT16+SHIFT1+8 DE BASE
        elseif vue == 1 then 
		ext.run(env.."View.exe")-- C'est pour fermer la vue roulette
		ipc.log("Lancement View.exe. Vue_Ext actions.lua.")
		ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        vue = 0
		ipc.writeUB(0x7002,0)
        end
end
function Vue_Ext ()
		vue = ipc.readUB(0x7002)
        if vue == 0 or vue == nil then
        mouse.move(20,400)--Patrick
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
		mouse.click()--Patrick.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne
		
        ipc.sleep(150)-- Francis
        ipc.control(66856)-- FRANCIS VIEW CAMERA SELECT 6. Ce control donne la vue Camera Taxi = vue roulette du menu Aircraft du New View.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        --ipc.control(65828)--Patrick.
        ipc.sleep(1500)
        mouse.move(394,201)--Patrick. Postitionne la souris dans la petite fenêtre.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
		mouse.click(2)--Patrick. Pour ouvrir le menu où se trouve la commande undock. Le (2) = click droit. 0 ou rien = gauche. 1 milieu.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
		--x, y, xr, yr, xp, yp = mouse.getpos() -- Francis pour tester comment cela fonctionne.
        --ipc.log(xp.." "..yp) -- Francis pour tester comment cela fonctionne.
        --ipc.log(xr.." "..yr) -- Francis pour tester comment cela fonctionne.
        --ipc.log(x.." "..y) -- Francis pour tester comment cela fonctionne.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
		mouse.move(405,449)--Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 478,452. Je teste avec 405,449.
		
		ipc.sleep(2000) -- Francis pour tester comment cela fonctionne.
		
		mouse.click()--Patrick. Pour undocker.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        ipc.sleep(500)--Patrick.
        --mouse.move(20,400)--Patrick.
		--mouse.click()--Patrick.
        --ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement MouseClick.exe. Vue_Ext actions.lua.")
        vue = 1
		ipc.writeUB(0x7002,1)
		ipc.sleep(2000)
		ipc.keypressplus(114,27,4) -- POUR ENLEVER LES BORDURES 27= CTRL2+ALT16+SHIFT1+8 DE BASE
        ipc.sleep(1000)
		ipc.keypressplus(114,27,4) -- POUR ENLEVER LES BORDURES 27= CTRL2+ALT16+SHIFT1+8 DE BASE
        elseif vue == 1 then 
		ext.run(env.."View.exe")-- C'est pour fermer la vue roulette
		ipc.log("Lancement View.exe. Vue_Ext actions.lua.")
		ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        vue = 0
		ipc.writeUB(0x7002,0)
        end
end
function Chg_Vue_F () -- Francis pas ou plus utilisé
     if imp == nil then imp = 1 end
     imp = imp + 1
     --ipc.log("Vue "..imp)
end
function Chg_Vue ()
	AG =  ipc.readUB (0x0366)
	ipc.writeUB(0x66FE,255)
	if AG == 1 then
	mesp = ipc.readSTR(0x3380,127)
	mes1 = "Choix vue :\n\n1 = Roulette avant\n2 = 3/4 droite\n3 = 3/4 gauche\n4 = Tour\n5 = Satellite\n6 = Satellite zoom\n7 = Aeroport\n0 = Fermeture"
	mes2 = "\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie."
	ipc.writeSTR(0x3380,mes1.."")
    ipc.writeUW(0x32FA,0)
	else
	ipc.display("Choix vue :\n \n1 = Roulette avant\n2 = Latérale droite\n3 = Latérale gauche\n4 = Tour\n5 = Satellite\n6 = Satellite zoom\n7 = Aeroport\n0 = Fermeture "..
	"\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie.",1,200)
	end
	ipc.runlua("choix")
	ipc.log("Lancement choix lua. Chg Vue actions.lua.")
	ipc.keypressplus(72,8,4)-- Touche H = Global enable EZCA.
	chr1 = ipc.elapsedtime()
	while true do
	choix = ipc.readUB(0x66FE)
		chr2 = ipc.elapsedtime() - chr1
		if chr2 > 5000 and chr3 == nil and AG == 1 then
		ipc.writeSTR(0x3380,mes2.."")
		ipc.writeUW(0x32FA,0)
		chr3 = 1
		elseif chr2 > 7000 and AG == 1 then
		ipc.writeSTR(0x3380,mes1.."")
		ipc.writeUW(0x32FA,0)
		chr3 = nil
		chr1 = ipc.elapsedtime()
		end
		if choix ~= 255 and choix >=0 and choix <= 7 then
		break
		elseif choix ~= 255 then
		ipc.writeUB(0x66FE,255)
		ipc.runlua("choix")
		ipc.log("Lancement choix lua. Chg Vue actions.lua.")
		sound.play("CabinAlert")
		ipc.display("Choix non disponible!\nVeuillez recommencer.",0,5)
		if AG == 0 then
		ipc.sleep(5000)
		ipc.display("Choix vue\n \n1 = Roulette avant\n2 = Latérale droite\n3 = Latérale gauche\n4 = Tour\n5 = Satellite\n6 = Satellite zoom\n7 = Aeroport\n0 = Fermeture "..
		"\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie.",1,200)
		end
		end
	end
	ipc.keypressplus(72,8,4)-- Touche H = Global enable EZCA.
	ipc.display("")
		if AG == 1 then					
		FsuipcDisp ()			
		end
	vue = choix
	ipc.writeUB(0x7002,vue)
	Select_vue_P ()
end
function Select_vue_F () -- Francis pas ou plus utilisé
    vue = ipc.get("vue")
	--vue = ipc.readUB(0x7002)
    if vue == nil then vue = 0 end
    if imp > 3 then
    ipc.control(65828)
    ipc.control(65824)
    ipc.sleep(1500)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    vue = 0
    ipc.set("vue",0)
	--ipc.writeUB(0x7002,0)
    else
        if vue == 0 then
        vue = 2
        else
        ipc.control(65828)
        ipc.control(65824)
        vue = vue + 1
            if vue == 7 then vue = 2 end
        end
        if vue == 2 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66853) --(66853) vue spot
        ipc.control(65701,90)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.set("vue",2)
		--ipc.writeUB(0x7002,2)
        elseif vue == 3 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66857) -- vue laterale
        ipc.control(65701,90)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.set("vue",3)
		--ipc.writeUB(0x7002,3)
        elseif vue == 4 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66858) -- vue tour
        ipc.control(65701,1000)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.set("vue",4)
		--ipc.writeUB(0x7002,4)
        elseif vue == 5 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66852) -- vue satellite
        ipc.control(65701,7000)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.set("vue",5)
		--ipc.writeUB(0x7002,5)
        elseif vue == 6 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66852) -- vue satellite
        ipc.control(65701,18000)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.set("vue",6)
		--ipc.writeUB(0x7002,6)
        end
    end
    imp = 0
end
function Select_vue () -- Francis pas ou plus utilisé
    vue = ipc.readUB(0x7002)
    if vue == nil then vue = 0 end
    if imp > 3 then
    ipc.control(65828)
    ipc.control(65824)
    ipc.sleep(1500)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    vue = 0
    ipc.writeUB(0x7002,0)
    else
        if vue == 0 then
        vue = 2
        else
        ipc.control(65828)
        ipc.control(65824)
        vue = vue + 1
            if vue == 7 then vue = 2 end
        end
        if vue == 2 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66853) --(66853) vue spot
        ipc.control(65701,90)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.writeUB(0x7002,2)
        elseif vue == 3 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66857) -- vue laterale
        ipc.control(65701,90)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.writeUB(0x7002,3)
        elseif vue == 4 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66858) -- vue tour
        ipc.control(65701,1000)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.writeUB(0x7002,4)
        elseif vue == 5 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66852) -- vue satellite
        ipc.control(65701,7000)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.writeUB(0x7002,5)
        elseif vue == 6 then
        ipc.control(65825)
        ipc.sleep(150)
        ipc.control(66852) -- vue satellite
        ipc.control(65701,18000)
        ipc.control(65828)
        ipc.sleep(1000)
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        ipc.writeUB(0x7002,6)
        end
    end
    imp = 0
end
function FsuipcDisp ()
	if ipc.readUB(0x7030) == 0 then
	mes = "  \nSHIFT MODE = 0"
	elseif ipc.readUB(0x7030) == 1 then
	mes = "  \nSHIFT MODE = 1"
	elseif ipc.readUB(0x7030) == 2 then
	mes = "  \nSHIFT MODE = 2"
	end
	ipc.writeSTR(0x3380,mes.."")
    ipc.writeUW(0x32FA,0)
end
-- ## Fonctions Perso ###############
function Depart ()        
        ipc.sleep(1000)
        ipc.runlua("777_annonce")
		ipc.log("Lancement 777 annonce lua. Depart actions.lua.")
        ipc.keypressplus(49,11,4)-- 49 1 on main keyboard + CTRL + SHIFT 
        ipc.sleep(1000)
		ChoixGSX ()
		logo = ipc.readLvar('switch_116_a')
        ipc.runlua("GSX")
		ipc.log("Lancement GSX lua. Depart actions.lua.")
        ipc.sleep(1000)
        Press_FO_CDU_MENU() -- Francis = ipc.control(69982+73,cg)
        ipc.sleep (1500)
        GPUvar = ipc.readLvar("NGXGPU")
        Chockvar = ipc.readLvar("NGXWheelChocks") -- 0 = REMOVED 1 = SET
        if Chockvar == 0 then
        FO_CDU_Wheel_Chocks () -- Francis FO MENU 6R FS ACTION 1R GROUND CONNECTIONS 1L SET
        end
        ipc.sleep(1000)
        if GPUvar == 0 then
        FO_CDU_ExtPower () -- Francis FO MENU 6R FS ACTION 1R GROUND CONNECTIONS 3L CONNECTED
        end
        ipc.sleep(1500)
        PMDG_PrimExtPower_toggle () --Francis = ipc.control(69640, cg) pour cliquer sur l'OH
        AirCondvar = ipc.readLvar("NGXGSU")
        OAT = ipc.readDBL(0x34A8) --Francis Ambient temperature, double float.
        if OAT > 25 or OAT < 15  then
        if AirCondvar == 0 then
        ipc.sleep(3000)
        Press_FO_CDU_MENU()
        ipc.sleep (1500)
        FO_CDU_AirCondition () -- Francis FO MENU 6R FS ACTION 1R GROUND CONNECTIONS 5L CONNECTED
        end
        end
        Bty=ipc.readSTR(0x3500, 4) --Francis ATC aircraft model string for currently loaded user aircraft, as declared in the AIRCRAFT.CFG file.
        if Bty == "B77W"  then
        typ = 1
        else
        typ = 0
        end
        file1 = Chemin
        if (file_exists(file1)) then
        os.remove(file1)
        end
        PMDG_NAV_on () -- Francis = ipc.control(69747, cg) si ipc.readLvar('switch_115_a') == 0        
        if logo == 100 then
        ipc.sleep(50000)
        else
		
        ipc.control(69632+14013, 1)-- DOOR_2L
		ipc.sleep(8000)--FRANCIS
        door2L = ipc.readLvar("7X7XCabinDoor2L")--FRANCIS
	    ipc.log("La Lvar door2L = "..door2L..". Depart de l'actions.lua. Si 100 la porte est ouverte. Si 0 la porte est fermée")--FRANCIS 
		
        end
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(11000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(7000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(12000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(11000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(11000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(11000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(11000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(11000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(11000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(11000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(7000)
        ipc.keypressplus(107,8,4) -- Francis NumPad + avec le cycle EZCA.
        ipc.sleep(8000)
        ipc.keypress(50,11,4) -- Francis Ctrl+Shift+2 main keyboard. Vue arrivée dans le cockpit.
        ipc.sleep(3000)
        if logo == 0 then
		
        ipc.control(69632+14013, 1)-- DOOR_2L
		ipc.sleep(8000)--FRANCIS
        door2L = ipc.readLvar("7X7XCabinDoor2L")--FRANCIS
	    ipc.log("La Lvar door2L = "..door2L..". Depart de l'actions.lua. Si 100 la porte est ouverte. Si 0 la porte est fermée")--FRANCIS
		
        end
end
function NGX_Cockpit_Prepare ()
	ipc.writeUB(0x66FF,20)
end
function Cockpit_Prepar1 ()
    Mod = ipc.get("Mod")
    stage = ipc.readUB(0x7001)
    dem = ipc.readUB(0x7000)
	ipc.log("dem = "..dem..". On récupère la valeur de dem=0x7000. Cockpit Prepar1 de l'actions.lua.")
    if Mod == 1 then
    AG =  ipc.readUB (0x0366)
    if AG == 1 then
        if FRC == 1 then stage = 4 end
        if stage == 0 then Stage1 ()
        elseif stage == 1 then Stage2 ()
        elseif stage == 2 then Stage3 ()
        elseif stage == 3 and dem == 3 then
        Arret_moteurs ()
        elseif stage == 4 then        
        Shutdown ()
        fin=1
        Save()
        end
    end
    --AG =  ipc.readUB (0x0366)
    --elseif Mod == 3  and AG == 1 then Shutdown ()
    end
end
function Payload ()
    p1 = ipc.readDBL(0x1400)/195
    p2 = ipc.readDBL(0x1430)/195
    p3 = ipc.readDBL(0x1460)/195
    p4 = math.floor((ipc.readDBL(0x1490)*0.45359237)+0.5)
    p5 = math.floor((ipc.readDBL(0x14C0)*0.45359237)+0.5)
    p6 = math.floor((ipc.readDBL(0x14F0)*0.45359237)+0.5)
    p7 = math.floor((ipc.readDBL(0x2EF8)*1000)+0.5)/10
    dpl = ""
    dpl = dpl.."         PAYLOAD\n\n"
    dpl = dpl.."First Class : "..p1.." passagers\n"
    dpl = dpl.."Business    : "..p2.." passagers\n"
    dpl = dpl.."Economy    : "..p3.." passagers\n"
    dpl = dpl.."Cargo Fwd  : "..p4.." Kgs\n"
    dpl = dpl.."Cargo Aft    : "..p5.." Kgs\n"
    dpl = dpl.."Cargo Bulk  : "..p6.." Kgs\n\n"
    dpl = dpl.."Total passagers : "..(p1+p2+p3).."\n"
    dpl = dpl.."Total cargo      : "..(p4+p5+p6).." Kgs\n"
    dpl = dpl.."TOCG : "..p7.."%"
    ipc.display(dpl,1,1000)
end
function Stage1 ()
        ipc.log("Stage1")
        if FRC == 1 then
        stage = 4
        dem = 3
		ipc.log("dem = "..dem.." On donne la valeur de 3 à dem. Stage1 de l'actions.lua.")
		ipc.writeUB(0x7000,dem)
        else
	ipc.display(" ",1,3)    
	ipc.control(66507,402)-- 66507 = PANEL_ID_OPEN CDU Left 
    ipc.control(66507,420)-- 66507 = PANEL_ID_OPEN CDU Right
    ipc.control(66507,415)-- 66507 = PANEL_ID_OPEN Zoomed Right Outboard DU
    ipc.control(66507,414)-- 66507 = PANEL_ID_OPEN Zoomed Right Inboard DU
	ipc.keypressplus(122,10,4)--FRANCIS PATRICK MENU GSX 123 11 4 MOI ASN 122 10 4 AVEC GSX NE FAIT PAS LE CATERING ??? 122 F11 + CTRL
	ipc.sleep(1000)
	Francis_Lua_Display ()--FRANCIS
	ipc.sleep(2000)-- TEST POUR FERMETURE MENU ASN CONCLUANT 170816
	ipc.keypressplus(122,10,4)--FRANCIS PATRICK MENU GSX 123 11 4 MOI ASN 122 10 4 AVEC GSX NE FAIT PAS LE CATERING ??? 122 F11 + CTRL
	ipc.sleep(2000)
	--Undock_SimconnectWR_Francis ()-- AVEC CETTE FONCTION PLUS BESOIN DES LIGNES SUIVANTES JUSQU'A sit1 = ipc.readSTR(0x1000,255) MAIS AUSSI LE 122 10 4 DU DESSUS
	ipc.keypressplus(114,27,4)-- FRANCIS POUR ERREUR DES BORDURES 27= CTRL2+ALT16+SHIFT1+8 DE BASE
	ipc.sleep(1000)-- FRANCIS POUR ERREUR DES BORDURES
    ext.run(env.."SimConnectW.exe")
	ipc.log("Lancement du SimConnectW.exe. Stage1 actions.lua.")
	ipc.sleep(1500)
    ipc.keypress(52)-- JE PASSE A 52 PATRICK LUI A 54
	ipc.sleep(1000)-- FIN TEST SI OK LAISSER SINON ENLEVER LIGNES 4371 A 4375 CONCLUANT 170816
    --ipc.keypressplus(114,27,4)--Patrick POUR ENLEVER LES BORDURES MOI AUSSI EN REMARQUE CAR REMIS EN LIGNE 4372 CAR SINON PAS ACTIF CAR FERME 27= CTRL2+ALT16+SHIFT1+8 DE BASE
    --ipc.sleep(1000)--FRANCIS    
    sit1 = ipc.readSTR(0x1000,255)
    long = string.find(sit1,"les\\")
    if long == nil then
    long = string.find(sit1,"r X\\")
    end
    sit=string.sub(sit1,1,long+3)
    doc1 = sit.."pfpx.txt"
    if (file_exists(doc1)) then
    pfpx = 1
    file = assert(io.open(doc1, "r"))
		lines = {}
		i = 1
		--local line = file:read("*all")
		for line in file:lines() do
			lines[i] = line
			i = i+1
		end
		file:close()
        ipc.log(lines[22])
		pp = {}
    for j = 1,i do
        if string.find(lines[j],"DEP:")~=nil then -- On cherche DEP dans le PFPX. On affecte j à la ligne.
		d=string.sub(lines[j],6,9) -- Dans la ligne j on prend du 6 au 9 les caractères. C'est le code ICAO de DEP.
		a=string.sub(lines[j+1],6,9) -- Dans la ligne j+1 on prend du 6 au 9 les caractères. C'est le code ICAO de ARR.
		FL = string.sub(lines[j+1],49,53) -- Dans la ligne j+1 on prend du 49 au 53 les caractères. C'est FL380.
            if tonumber(FL) == nil then
            FL=tonumber(string.sub(FL,3))
            else
            FL = FL/100
            end
        elseif string.find(lines[j],"ULOAD")~=nil then -- On cherche ULOAD dans le PFPX. On affecte j à la ligne.
		p = tonumber(string.sub(lines[j+2],59,64)) -- On va chercher la ligne j+2 pour aller chercher le PLN ZFW.
        elseif string.find(lines[j],"COND:")~=nil then
			if g == nil then g = 1 else g=g+1 end
			pp[g] = string.sub(lines[j-2],23,25) --N° de piste 1 Patrick. j-2 deux lignes au dessus de la ligne COND et on va prendre la piste en service 23 au 25  dans ** TAKE-OFF DATA DNMM 18R **.
				if string.byte(string.sub(pp[g],3,3))<65 then pp[g] = string.sub(pp[g],1,2) end
			g=g+1
			pp[g] = tonumber(string.sub(lines[j+1],16,17)) -- Flaps 2 Patrick. 1 ligne en dessous du COND pour prendre la valeur des Flaps 16 au 17
			g=g+1
			pp[g] = string.match(lines[j+1],"%d+[C]") 
			if pp[g] ~= nil then pp[g] = tonumber(string.sub(pp[g],1,2)) end --temp 3 Patrick. 1 ligne en dessous du COND pour prendre la valeur de la T° assumée 1 au 2.
			g=g+1
			if string.match(lines[j+1],"TO2") ~= nil then pp[g] = 2
			elseif string.match(lines[j+1],"TO1") ~= nil then pp[g] = 1
			elseif string.match(lines[j+1],"TO") ~= nil then pp[g] = 0 end --Derate 4 Patrick.
			g=g+1
			pp[g] = tonumber(string.sub(lines[j+2],29,31)) --V2 5
        elseif string.find(lines[j],"CONT 5")~=nil then -- On cherche CONT 5 dans le PFPX. On affecte j à la ligne.
			cont = tonumber(string.sub(lines[j],14,19))
			if string.find(lines[j+1],"ISLAND")~=nil then
			f = tonumber(string.sub(lines[j+5],14,19))
			AT = tonumber(string.sub(lines[j+1],14,19))
			FR = 0
			else
			FR = tonumber(string.sub(lines[j+2],14,19)) -- j+2 // j=CONT 5 correspond à FINAL RESV et on prend la valeur.
			AT = tonumber(string.sub(lines[j+1],14,19)) -- j+1 // j=CONT 5 correspond à ALTN et on prend la valeur.
			f = tonumber(string.sub(lines[j+6],14,19)) -- j+6 // j=CONT 5 correspond à RELEASE et on prend la valeur.
			end
        elseif string.find(lines[j],"ATC ROUTE")~=nil then
            l=1
            atc = lines[j]
                while string.sub(lines[j+l],13) ~= "" do
                atc = atc..string.sub(lines[j+l],11)
                l=l+1
                end
		break
        end
    end
	np = g
    ipc.log(g.. " = Nombre de lignes pour les pistes et les performances du PFPX.txt.")
    NV = string.sub(lines[7],1,10)-- FRANCIS LIGNE 7 DU PFPX.TXT POUR LE N° DE VOL    
    ipc.log("Flight number:     "..NV)
	ipc.log("Departure Airport: "..d)
    ipc.log("Arrival airport:   "..a)
    ipc.log("Flight Level:      "..FL)
    ipc.log("Zero fuel weight:  "..p)
    ipc.log("Fuel inboard:      "..f)
    ipc.log("5% reserve:        "..cont)
    ipc.log("Final reserve:     "..FR)
    ipc.log("Alternate reserve: "..AT)
    for i=1, g do
	ipc.log(pp[i]) -- C'est pour logger toutes les différentes valeurs de pp. PISTE FLAPS T° DERATE V2.
	end
    ipc.log(atc)
    ipc.display(atc,1,15)
    f = tostring(f)
	lont =string.len(f)
	ipc.control(69982,cg)--CDU_L_MENU
	ipc.sleep(4000)
	ipc.control(69971,cg)--CDU_L_R6 FS ACTION
	ipc.sleep(500)
	ipc.control(69960,cg)--CDU_L_L1 FUEL
	ipc.sleep(500)
	for i = 1, lont do
		cr = string.sub(f,i,i)
		cr = tonumber(cr)
		ipc.sleep(200)
		if cr==0 then
		ipc.control(69996,cg) -- EVT_CDU_L_0 Tape 0
		else
		ipc.control(69985+cr,cg) -- EVT_CDU_L_NEXT_PAGE	+ cr
		end
	end
	ipc.sleep(500)
	ipc.control(69960,cg)--CDU_L_L1 FUEL
    ipc.sleep(500)
	ipc.control(69965,cg)--EVT_CDU_L_L6 RETURN
    ipc.sleep(500)
	ipc.control(69961,cg)-- EVT_CDU_L_L2 PAYLOAD
    ipc.sleep(500)
	ipc.control(69970,cg)-- EVT_CDU_L_R5
    f=p
    f = tostring(f)
    for i = 1, 3 do
	cr = string.sub(f,i,i)
	cr = tonumber(cr)
	ipc.sleep(200)
		if cr==0 then
		ipc.control(69996,cg) -- EVT_CDU_L_0 Tape 0
		else
		ipc.control(69985+cr,cg) -- EVT_CDU_L_NEXT_PAGE	+ cr
		end
	end
	ipc.sleep(200)
	ipc.control(69995,cg)
    for i = 4, 6 do
	cr = string.sub(f,i,i)
	cr = tonumber(cr)
	ipc.sleep(200)
		if cr==0 then
		ipc.control(69996,cg) -- EVT_CDU_L_0 Tape 0
		else
		ipc.control(69985+cr,cg) -- EVT_CDU_L_NEXT_PAGE	+ cr
		end
	end
    ipc.sleep(500)
	ipc.control(69967,cg)
    ipc.sleep(1000)
    ipc.runlua("pfpx")
	ipc.log("Lancement pfpx lua. Stage1 actions.lua.")
    else
    pfpx = 0
    end
        Depart()
        --ipc.runlua("777vue")
        ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
        Payload ()
        LisCeci("Hello Captain. Welcome on board.")
		ipc.log("Hello Captain. Welcome on board. Depart Stage1 actions.lua.")
        ipc.sleep(4000)
		ipc.log("La valeur de l'offset 66C1 = "..ipc.readUB(0x66C1).. "Fonction Depart actions.lua.")
        if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(55,10,4) end  --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL.
        LisCeci("We go with the cockpit preparation.")
		ipc.log("We go with the cockpit preparation. Depart Stage1 actions.lua.")
        ipc.sleep(4000)
        LisCeci("Battery. On.")
		ipc.log("Battery. On. Depart Stage1 actions.lua.")
        ipc.sleep(1000)
        Battery_on ()
        ipc.sleep(1000)
        if ipc.readUB (0x115E) ~= 1 then -- Time of day indicator, 0=Dawn, 1=Day, 2=Dusk, 3=Night.
        LisCeci("Did a little dark here, Dome On")
		ipc.log("Did a little dark here, Dome On. Depart Stage1 actions.lua.")
        PMDG_Dome_Light_on ()
        ipc.sleep(1000)
        else
        PMDG_Dome_Light_off ()
        end
        ipc.sleep(1000)
        ipc.control(69632+28, 120)--120 Master Bright
        ipc.sleep(1000)
        LisCeci("Nave Light : On")
		ipc.log("Nave Light : On. Depart Stage1 actions.lua.")
        --PMDG_NAV_on ()
        ipc.sleep(2000)
        logo = ipc.readLvar('switch_116_a')
        if logo > 0 then
        LisCeci("Logo light : On")
		ipc.log("Logo light : On. Depart Stage1 actions.lua.")
        else
        LisCeci("Logo light : Off")
		ipc.log("Logo light : Off. Depart Stage1 actions.lua.")
        end
        ipc.sleep(3000)
        LisCeci("ADIRU : On")
		ipc.log("ADIRU : On. Depart Stage1 actions.lua.")
        ipc.sleep(1000)
        PMDG_ADIRU_on ()
        ipc.sleep(1000)
        LisCeci("Emergency light : armed")
		ipc.log("Emergency light : armed. Depart Stage1 actions.lua.")
        Emer_Light_armed ()
        ipc.sleep (2000)
        LisCeci("Packs left and right : On auto")
		ipc.log("Packs left and right : On auto. Depart Stage1 actions.lua.")
        ipc.sleep(1000)
        PMDG_LPack_on ()
        ipc.sleep(1000)
        PMDG_RPack_on ()
        ipc.sleep(1000)
        PMDG_EFIS_Baro_hpa ()
        ipc.sleep(1000)
        LisCeci("Demand left and right Elec pumps : Auto")
		ipc.log("Demand left and right Elec pumps : Auto. Depart Stage1 actions.lua.")
        ipc.sleep(2000)
        PMDG_LElec_auto ()
        ipc.sleep(1000)
        PMDG_RElec_auto ()
		ipc.sleep(1000)
		--LisCeci("Primary Elec C2 pump on")
		--ipc.sleep(2000)
		--PMDG_HydC2Elec_on ()
		--LisCeci("Air C2 pump auto")
		--ipc.sleep(1500)
		--PMDG_AirC2_auto ()
		--LisCeci("Primary Elec C1 pump on")
		--ipc.sleep(2000)
		--PMDG_HydC1Elec_on ()
		--LisCeci("Air C1 pump auto")
		--ipc.sleep(1500)
		--PMDG_AirC1_auto ()
        --NGX_EFIS_MINS_MODE_radio ()
        ipc.writeLvar("L:yoke_left_hide", 1)
        ipc.writeLvar("L:yoke_right_hide", 1)
        ipc.sleep(1000)
        --NGX_CDU2_Doors_Airstair()
        --ipc.sleep(1000)
        stage = 1
        ipc.writeUB(0x7001,stage)
        LisCeci("Radio : On")
		ipc.log("Radio : On. Depart Stage1 actions.lua.")
        Com_Radio ()
        --ipc.writeUW(0x034E,0x2200)--COM 1 ACTIVE  122.00
        --ipc.writeUW(0x311A,0x2202)--STBY COM 1    122.02
        ipc.writeUW(0x034E,13975)--COM 1 ACTIVE
        ipc.writeUW(0x311A,13975)--COM 1 STBY
        ipc.sleep(1000)
        prop = ipc.get("prop")
        if prop == "Francis" then
        ipc.control(70428,cg)-- APPUI SUR VHF R COM 2
        ipc.sleep(500)
        ipc.writeUW(0x311C,0x2280)--034E COM1 ACTIVE SUR 122.8 311C COM2 122.8 STBY CAR PAS POSSIBLE DCT COM2
        ipc.sleep(500)
        ipc.control(70433,cg)-- TANSFERT STBY EN 122.8 EN 122.8 ACTIVE  COM 2
        end
        ipc.sleep(3000)
        difL = 20 - ipc.readLvar('switch_315_a')
        difL = difL/10
            if difL > 0 then
            for i = 1, difL do
            ipc.control(69947, cd)
            ipc.sleep (500)
            i = i+1
            end
        end
        if difL < 0  then
            difL = 0 - difL
            for i = 1, difL do
            ipc.control(69947, cg)
            ipc.sleep (500)
            i = i+1
            end
        end
        difR = 10 - ipc.readLvar('switch_290_a')
        difR = difR/10
            if difR > 0 then
            for i = 1, difR do
            ipc.control(69922, cd)
            ipc.sleep (500)
            i = i+1
            end
        end
        if difR < 0  then
            difR = 0 - difR
            for i = 1, difR do
            ipc.control(69922, cg)
            ipc.sleep (500)
            i = i+1
            end
        end
        PMDG_Select_Lwr_Ctr ()
        ipc.sleep(500)
        PMDG_Disp_Nav ()
        ipc.sleep(500)
        PMDG_Select_R_Inbnd ()
        ipc.sleep(500)
        PMDG_Disp_Door ()
        ipc.sleep(500)
        PMDG_Select_L_Inbnd ()
        ipc.sleep(500)
        PMDG_Disp_Fctl ()
        ipc.sleep(500)
        PMDG_Select_R_Inbnd ()
        ipc.sleep(500)
        ipc.control(69922, cg)
        ipc.sleep (500)
        ipc.control(69866, 1)
        ipc.sleep(500)
        ipc.control(69922, cd)
        sound.play ("Point.wav",2,100)
        ipc.sleep(1000)
        PMDG_EFIS_Baro_hpa ()
        if ipc.readLvar('switch_181_a') == 0 then
        PMDG_Min_RadBaro ()
        end
        if pfpx == 1 then
        FMC_Init ()
        else
        ipc.runlua("FlapsDetect")
		ipc.log("Lancement FlapsDetect lua. Depart Stage1 actions.lua.")
        end
        end
end
function Stage2 ()
    ipc.log("Stage 2")
    stage = 2
    ipc.writeUB(0x7001,2)	
	Press_FO_CDU_MENU()
	ipc.sleep(200)
	Press_FO_CDU_LSK1L()
	ipc.sleep(200)
	Press_FO_CDU_PROG()
	ipc.sleep(200)
    if tpv == 0 then Test_Plandevol () wga=0  end
        if tpv == 1 and wga == 0 then
		ipc.writeUB(0x66D3,1)
        ipc.runlua("FmcStep")
		ipc.log("Lancement FmcStep lua. Stage2 actions.lua.")
        while ipc.readUB(0x66D3) ~= 0 do
		--ipc.log("Boucle")
		ipc.sleep(1000)		
		end
        QNH_DEP ()
        ipc.sleep(100)
        ipc.sleep (100)
        CDU3 ()
        ipc.sleep (100)
        EFIS_Baro_std ()
        ipc.sleep (500)
        PMDG_Min_reset ()
        ipc.sleep (500)
        Trans_Alt1 ()
        ipc.sleep (500)
        pistservice()
        ipc.sleep(2000)
            if wga == 0 then
            Calculdist()
            ipc.sleep(1000)
            date = os.date()
			date1 = string.sub(date,4,5)..string.sub(date,1,2)..string.sub(date,7,8)
            nomlog1 = icaoD..icaoI.."_"..date1..".log"
            ipc.writeSTR(0x7316,icaoD..icaoI,8)
            nomlog2 = Chemlog..icaoD..icaoI.."_"..date1.."WP.log"
            ipc.set("nomlog2",nomlog2)
            lgwp =  "--------- FLIGHT LOG "..icaoD.." "..icaoI.." ---------".."\n\n"..
                    "Waypoint   ATO       TTLT      FOB       ALT".."\n\n"
            nomlog2 = ipc.get("nomlog2")
            file = io.open(nomlog2, "a")
            file:write(lgwp)
            file:close()
            nomlog1 = Chemlog..nomlog1
            if (file_exists(nomlog1)) then
            os.remove(nomlog1)
            end
            os.rename(nomlog,nomlog1)
            nomlog = nomlog1
            ipc.set("nomlog",nomlog)
            poidskg = ipc.readDBL(0x30c0)*0.45359237
            ZFW = ipc.readUD(0x3BFC)/256*0.45359237
            poidskg = math.floor((poidskg)+0.5)
            ZFW = math.floor((ZFW)+0.5)
            Fuel = poidskg - ZFW
            FuelD = Fuel
            ipc.sleep(50)
            --ipc.writeUW(0x66CF,FuelD*100)
            ipc.sleep(50)
            tempc = math.floor(ipc.readDBL(0x34A8)+0.5)
            qnhc = math.floor((ipc.readUW(0x0F48)/16)+0.5)
            ventf = math.floor(ipc.readUW(0x0EF0)+0.5)
            ventd = math.floor((ipc.readUW(0x0EF2)*360/65536)+0.5)
            inscr = "Plan de vol pour "..icaoI.." chargé".."\n"..
                    "                          ".."Masse totale :"..poidskg.." Kg".."\n"..
                    "                          ".."Zero Fuel Weight :"..ZFW.." Kg".."\n"..
                    "                          ".."Fuel: "..Fuel.." Kg".."\n"..
                    "                          ".."Temp : "..tempc.."°C QNH : "
                    ..qnhc.." Vent : "..ventf.." Kt au "..ventd.."° M"
            Logvol (inscr)
			ipc.log(inscr)--AJOUT FRANCIS
            stage = 2
            ipc.writeUB(0x7001,2)
            end
        elseif  tpv == 1 and wga == 1 then
        pistservice()
        ipc.sleep(2000)
            if wga == 0 then
            Calculdist()
            ipc.sleep(1000)
            date = os.date()
			date1 = string.sub(date,4,5)..string.sub(date,1,2)..string.sub(date,7,8)
            nomlog1=icaoI..icaoD
            nomlog1 = icaoI..icaoD.."_"..date1..".log"
            nomlog2 = Chemlog..icaoD..icaoI.."_"..date1.."WP.log"
            ipc.set("nomlog2",nomlog2)
            lgwp =  "--------- FLIGHT LOG "..icaoD.." "..icaoI.." ---------".."\n\n"..
                    "Waypoint   ATO       TTLT      FOB       ALT".."\n\n"
            nomlog2 = ipc.get("nomlog2")
            file = io.open(nomlog2, "a")
            file:write(lgwp)
            file:close()
            nomlog1 = Chemlog..nomlog1
            if (file_exists(nomlog1)) then
            os.remove(nomlog1)
            end
            os.rename(nomlog,nomlog1)
            nomlog = nomlog1
            ipc.set("nomlog",nomlog)
            poidskg = ipc.readDBL(0x30c0)*0.45359237
            ZFW = ipc.readUD(0x3BFC)/256*0.45359237
            poidskg = math.floor((poidskg)+0.5)
            ZFW = math.floor((ZFW)+0.5)
            Fuel = poidskg - ZFW
            FuelD = Fuel
            ipc.sleep(50)
            --ipc.writeUW(0x66CF,FuelD*100)
            ipc.sleep(50)
            tempc = math.floor(ipc.readDBL(0x34A8)+0.5)
            qnhc = math.floor((ipc.readUW(0x0F48)/16)+0.5)
            ventf = math.floor(ipc.readUW(0x0EF0)+0.5)
            ventd = math.floor((ipc.readUW(0x0EF2)*360/65536)+0.5)
            inscr = "Plan de vol pour "..icaoI.." chargé".."\n"..
                    "                          ".."Masse totale :"..poidskg.." Kg".."\n"..
                    "                          ".."Zero Fuel Weight :"..ZFW.." Kg".."\n"..
                    "                          ".."Fuel: "..Fuel.." Kg".."\n"..
                    "                          ".."Temp : "..tempc.."°C QNH : "
                    ..qnhc.." Vent : "..ventf.." Kt au "..ventd.."° M"
            Logvol (inscr)
			ipc.log(inscr)--AJOUT FRANCIS
            stage = 2
            ipc.writeUB(0x7001,2)
            end
        end
	ipc.writeUB(0x66EF,9)
end
function Stage3 ()
    ipc.log("Stage3")
    IVAP ()
    ipc.sleep(2000)
    ipc.control(69632+538,cg)-- CPT MIC VHF R
    ipc.control(69632+538,131072)
    ipc.sleep(500)
	stage = 3
    ipc.writeUB(0x7001,3)
	while ipc.readUB(0x6C1C) == 0 do
	ipc.display("Attente alignement IRS",1,1)
	ipc.sleep(250)
	end
	while ipc.readUB(0x66C0)~= 10 do
	ipc.display("Attente procedure depart",1,1)
	ipc.sleep(250)
	end
    ipc.writeUB(0x66D3,1)
	ipc.writeUB(0x66C0,7)
	ipc.runlua("NmCompt")
	ipc.log("Démarrage du NmCompt.LUA. Stage3 actions.lua.")
	ipc.sleep(1000)	
    PMDG_Select_Lwr_Ctr ()
    ipc.sleep(500)
    PMDG_Disp_Stat ()
    ipc.sleep(500)
    PMDG_Select_R_Inbnd ()
    ipc.sleep(500)
    PMDG_Disp_Elec ()
    ipc.sleep(500)
    PMDG_Select_L_Inbnd ()
    ipc.sleep(500)
    PMDG_Disp_Fuel ()
    ipc.sleep(1000)
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(55,10,4) end  --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL.
    ipc.sleep(1000)
    --VoxFO_Toggle ()
	ipc.writeSTR(0x66E0,"100",3)
    LisCeci("Start APU")
	ipc.log("Start APU. Stage3 actions.lua.")
    PMDG_APU_start ()
    ipc.sleep(1000)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    ipc.sleep(2000)
    tim1 = ipc.elapsedtime()
    ipc.sleep(2000)
    ipc.writeSTR(0x66E0,"071",3)
	LisCeci("Updating winds. Wait please.")
	ipc.log("Updating winds. Wait please. Stage3 actions.lua.")
	ipc.sleep(2000)
	ipc.control(73103,cg)
	ipc.sleep(200)
	ipc.control(69964,cg)
	ipc.sleep(1000)
	ipc.control(69971,cg)	
    Parkpref ()	
	if ipc.readUB(0x66C5) == 0 then
	sound.play("CabinAlert")
	ts = 30
		while true do
		ipc.display("Pusback non choisi!\n\nIl vous reste "..ts.."s",1,2)
        ipc.keypressplus(104,10, 4)-- FRANCIS VUE OH CAPTAIN 104 NumPad 8 + CTRL
        ipc.sleep(6000)
			if ipc.readUB(0x66C5) == 1 then break end
		ts = ts -1
			if ts == 0 then break end
		ipc.sleep(1000)
        ipc.keypressplus(100,10, 4)-- FRANCIS MA VUE PILOTE 100 NumPad 4 + CTRL
        ipc.sleep(2000)-- FRANCIS
		end
	end    
    FMCmsg ()
	ipc.control(69971,cg)
	FMCexc ()
	ipc.sleep(1000)
	ipc.control(69965,cg)
	ipc.writeSTR(0x66E0,"072",3)
	LisCeci("OK, update is complete")
	ipc.log("OK, update is complete. Stage3 actions.lua.")
    ipc.sleep(2000)
	ipc.readUB(0x65B4) -- Francis balise pour frein de park 
	ipc.log("La valeur de l'offset avant Radar test, 65B4= "..ipc.readUB(0x65B4)) -- Francis balise pour frein de park
    Radar_test ()	
    while ipc.readUW(0x64C8)~=0 do -- AIR_annunPackOFF[2]
    ipc.sleep(1000)
    end
    ipc.sleep (500)
    PMDG_Select_Lwr_Ctr ()
    ipc.sleep(500)
    PMDG_Disp_Door ()    
	ipc.writeUB(0x66D3,0)
	beforePB ()
    ipc.writeUB(0x66FF,22)
end
function beforePB ()
	ipc.writeUB(0x66D3,1)	
    PMDG_ElecAll_off ()
    FO_CDU_All_GroundConnections_off ()	
    --VoxFO_Toggle ()	
    LisCeci(" All ground connections off, wheel chocks removed. ")
	ipc.log("All ground connections off, wheel chocks removed. beforePB actions.lua.")
    --ipc.sleep(3000) -- Francis à enlever si on supprime la ligne suivante.
	--ipc.control(65752) -- Francis pour serrer le frein de park. Résolu en supprimant la touche Num- dans les affectations de touche des options P3D.
	ipc.sleep(3000) -- d'origine Patrick à laisser
    Press_FO_CDU_PROG()
    LisCeci("Preflight Checklist")
	ipc.log("Preflight Checklist. beforePB actions.lua.")
    ipc.sleep(500)
    chkl = 1
    CheckList ()
    ipc.sleep (1000)
    ipc.control(66508,413)-- 66508 = PANEL_ID_CLOSE Zoomed Lower DU
    ipc.sleep(1000)
    PMDG_Disp_Chkl ()
    CHRONO_R_ET_Reset ()
    ipc.sleep(1000)
    CHRONO_L_ET_Reset ()
    LisCeci("Ready for pushback")
	ipc.log("Ready for pushback. beforePB actions.lua.")
    PMDG_Disp_Door ()
    ipc.writeLvar("L:yoke_left_hide", 0)
    ipc.writeLvar("L:yoke_right_hide", 0)
    ipc.writeUB(0x66D3,0)
end
function Demarre_1 ()
    stage = ipc.readUB(0x7001)
    Mod = ipc.get("Mod")
	dem = ipc.readUB(0x7000)
    ipc.log("dem = "..dem.." On récupère la valeur de dem=0x7000. Demarre 1 de l'actions.lua.")	
    if stage ~= 3 then
    ipc.display("APU non démarré!",4)
    end
    if Mod == 1 and stage == 3 then
    AG =  ipc.readUB (0x0366)
            if dem == 2 then
            ipc.writeUB(0x66D3,1)
            if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(55,10,4) end  --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL.
            ipc.sleep(1000)
            LisCeci("APU : off")
			ipc.log("APU : off. Demarre_1 actions.lua.")
            ipc.sleep(1000)
            PMDG_APU_off ()
            ipc.sleep(1000)
            Anti_ice ()
            ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
            ipc.sleep(2000)
            LisCeci("Autobrake : reject take-off")
			ipc.log("Autobrake : reject take-off. Demarre_1 actions.lua.")
            ipc.sleep(1000)
            PMDG_Autobrake_dec ()
            ipc.sleep(2000)
			fpos = ipc.readUB(0x66E8)
            if fpos == 0 then fpos = 15 end
            if fpos == 5 then ipc.control(69632+5073, cg)
            elseif fpos == 15 then ipc.control(69632+5074, cg)
            elseif fpos == 20 then ipc.control(69632+5075, cg)
            end
            LisCeci("Before Taxi Checklist")
			ipc.log("Before Taxi Checklist. Demarre_1 actions.lua.")
            ipc.sleep(500)
            chkl = 3
            CheckList ()
            ipc.sleep (1000)
            ipc.log("Pushback terminé. Demarre_1 actions.lua.")
            inscr = "Pushback terminé"
			Logvol (inscr)
			ipc.sleep(100)
			PMDG_Taxi_on ()
			ipc.sleep(500)
			PMDG_RunwayTurn_on ()
            ipc.control(66508,413)-- 66508 = PANEL_ID_CLOSE Zoomed Lower DU
            ipc.sleep(1000)
            PMDG_Disp_Chkl ()
				if ipc.readLvar("switch_315_a") == 20 then
				DSP_INDB_DSPL_L_dec ()
				PMDG_Select_Lwr_Ctr ()
				PMDG_Disp_Gear ()
				end
				if ipc.readLvar("switch_290_a") == 10 then
				DSP_INDB_DSPL_R_inc ()
				end
            dem = 3
			ipc.writeUB(0x7000,dem)
			ipc.log("dem = "..dem.." On donne la valeur 3 à dem=0x7000. Demarre 1 de l'actions.lua.")
            pbk = ipc.get("pbk")
				if pbk == 0 then ipc.runlua("777NGX") end
				ipc.log("Lancement 777NGX lua. Demarre_1 actions.lua.")
            vue = ipc.readUB(0x7002)
			if vue == 1 then Vue_Ext_Francis () end -- C'est pour fermer la vue roulette
            ipc.writeUB(0x66D3,0)
            ipc.sleep(1000)
			LisCeci("Ready to Taxi")
			ipc.log("Ready to Taxi. Demarre_1 actions.lua.")
			checktrim = ipc.get("checktrim")
			if checktrim ~= nil then
				LisCeci("Captain, you should check the trim setting.")
				ipc.log("Captain, you should check the trim setting. Demarre_1 actions.lua.")
                ipc.keypressplus(54,10,4) -- Vue PFD CTRL + 6 MODIF Francis
                ipc.sleep(10000) -- je passe de 500 à 10000 le temps de régler le trim
				ipc.keypressplus(100,10,4) -- ajout Francis pour repasser en vue "moi" CTRL + NUM 4
				ipc.control(69947,2)
				ipc.sleep(500)
				ipc.control(69863, 1)
				ipc.sleep(500)
				ipc.control(69874, 1)
                ipc.sleep(1000)--FRANCIS
                Press_FO_CDU_INITREF()--FRANCIS
                ipc.sleep(1000)--FRANCIS
                Press_FO_CDU_LSK6L()--FRANCIS
                ipc.sleep(1000)--FRANCIS
                Press_FO_CDU_LSK5L()--FRANCIS
				if checktrim == 2 then
				ipc.sleep(1000)
				ipc.control(69972,cg)-- CDU L INITREF
				ipc.sleep(1000)
				ipc.control(69971,cg)-- CDU L LSK6R
				ipc.sleep(1000)
				ipc.control(69971,cg)-- CDU L LSK6R
                ipc.sleep(1000)--FRANCIS
                Press_FO_CDU_INITREF()--FRANCIS
                ipc.sleep(1000)--FRANCIS
                Press_FO_CDU_LSK6L()--FRANCIS
                ipc.sleep(1000)--FRANCIS
                Press_FO_CDU_LSK5L()--FRANCIS
                ipc.sleep(10000)--FRANCIS
                Press_FO_CDU_LEGS()--FRANCIS
				end
			end
            ipc.runlua("RWstart")
			ipc.log("Lancement RWstart lua. Demarre_1 actions.lua.")
			ipc.set("pbk",2)        
            ipc.sleep(1000)
            --VoxFO_Toggle ()
            vue = 0
            Luminosite ()
			ipc.sleep(5000)
			ipc.runlua("Autobrake")
			ipc.log("Lancement Autobrake lua. Demarre_1 actions.lua.")
			ipc.writeUW(0x4204, 0x1001)
			ipc.writeUB(0x4200,3)
			ipc.sleep(1000)
            sound.play ("\\Hotesse\\ASC_CC_Safety")
			ipc.sleep(30000)--LE TEMPS DE REGLER LE TRIM
			ipc.control(69947,1)-- PUIS INBOARD DSP SUR NAV
			ipc.sleep(20000)
			ref=tostring(math.random(1,17))
			ref = "song"..ref
			ipc.log(ref)
            ipc.writeSTR(0x4208,ref,250)
            ipc.writeUW(0x4204, 0x1001)
            ipc.writeUB(0x4200,2)
			ipc.control(69947,1)
            else
                if AG == 1  and dem ~= 3 then
                        if dem == 0 then                        
                        --VoxFO_Toggle ()
						GsxBoard = ipc.readLvar("FSDT_GSX_BOARDING_STATE")--AJOUT FRANCIS POUR RETARDER LA BEFORE START TANT QUE LE BOARDING N'EST PAS = A 6
						ipc.readLvar("FSDT_GSX_BOARDING_STATE")--AJOUT FRANCIS
						ipc.log("GsxBoard = "..ipc.readLvar("FSDT_GSX_BOARDING_STATE").." On va rentrer dans la boucle.") -- AJOUT FRANCIS
			            while ipc.readLvar("FSDT_GSX_BOARDING_STATE") ~= 6 do --AJOUT FRANCIS
						ipc.display("Attente de la fin de l'embarquement.",1,1) --AJOUT FRANCIS
	                    ipc.sleep(250) --AJOUT FRANCIS
			            end --AJOUT FRANCIS
						ipc.log("On sort de la boucle GsxBoarding <6.") -- AJOUT FRANCIS
						--ipc.sleep(60000) --AJOUT FRANCIS POUR AVOIR LE TEMPS D'APPELER LE TYPE DE PUSHBACK. Plus besoin car le type de pushback est appelé par la fonction Appel du GSX.lua.
                        LisCeci("Before start Checklist")
						ipc.log("Before start Checklist. Demarre_1 actions.lua.")
                        ipc.sleep(500)
                        chkl = 2
                        CheckList ()
                        ipc.sleep (1000)
                        ipc.control(66508,413)-- 66508 = PANEL_ID_CLOSE Zoomed Lower DU
                        ipc.sleep(1000)
                        PMDG_Disp_Chkl ()
                        TestPush ()
						ipc.log("On vient de faire le TestPush Demarre_1 actions.lua.")
						ipc.sleep(5000) -- FRANCIS de 1000 d'origine je passe à 5000 le temps que les fenêtres GSX s'ouvrent et se ferment.
                        EngStart ()
                        elseif dem == 1 then
                        EngStart ()
                        end
                end
        tpv = 1
        --Sauvegarde ()
        end
    elseif Mod == 2 then
    Spoiler_detent ()
    end
end
function TestPush ()
    if Tpsh == nil then Tpsh = 0 end
    Tpsh = Tpsh + 1
    ipc.log("TestPush "..Tpsh..". TestPush actions.lua.")
    if ipc.readUB(0x66C4) == 21 then
    ipc.writeUB(0x66C4,22)
        if ipc.readUB(0x66C5) == 1 then
		ipc.log("On entre dans 13' d'attente. TestPush actions.lua.")
        ipc.sleep(13000)
        end
    end
end
function EngStart ()
	dem = ipc.readUB(0x7000)
    if dem == 0 then
	while true do
		if ipc.readUB(0x66C4) == 23 then
		ipc.log("On passe ici car l'offset 66C4 est à 23. EngStart actions.lua.")
		ipc.writeUB(0x66C4,0)
		ipc.writeUB(0x66C5,0)
        vue = ipc.readUB(0x7002)
	       if vue == 0 or vue == nil then Vue_Ext_Francis () end -- C'est pour ouvrir la vue roulette
		break
		end
		if ipc.readUB(0x66C4) == 21 then
		ipc.log("On passe ici car l'offset 66C4 est à 21. EngStart actions.lua.")
		ipc.writeUB(0x66C4,22)
			if ipc.readUB(0x66C5) == 1 then
			ipc.log("On entre dans 13' d'attente. EngStart actions.lua.")
			ipc.sleep(13000)
            vue = ipc.readUB(0x7002)
	           if vue == 0 or vue == nil then Vue_Ext_Francis () end -- C'est pour ouvrir la vue roulette
			end
        ipc.writeUB(0x66C4,0)
		ipc.writeUB(0x66C5,0)
		break		
		end
	ipc.sleep(100)
	end
    LisCeci("Prepare to start engine")
	ipc.log("Prepare to start engine. EngStart actions.lua.")
    ipc.sleep(500)
    PMDG_Select_Lwr_Ctr ()
    ipc.sleep(500)
    PMDG_Disp_Eng ()
    ipc.sleep(500)
    PMDG_Select_L_Inbnd ()
    ipc.sleep(500)
    PMDG_Disp_Eng ()
    ipc.sleep(500)
    PMDG_Select_R_Inbnd ()
    ipc.sleep(500)
    PMDG_Disp_Hyd ()
    ipc.sleep(500)
    PMDG_Select_L_Inbnd ()
    ipc.sleep(500)
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(55,10,4) end  --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL. 
    ipc.sleep(1500)
    LisCeci("Fuel pumps : on")
	ipc.log("Fuel pumps : on. EngStart actions.lua.")
    ipc.sleep(1000)
    FuelPump_AFT1_on ()
    ipc.sleep(1000)
    FuelPump_AFT2_on ()
    ipc.sleep(1000)
    FuelPump_FWD1_on ()
    ipc.sleep(1000)
    FuelPump_FWD2_on ()
    ipc.sleep(1000)
    fckg = ipc.readUD(0x0B74)*100/128/65536
    if fckg > 0.5 then
    LisCeci("Fuel pumps center : on")
	ipc.log("Fuel pumps center : on. EngStart actions.lua.")
    ipc.sleep(1000)
    FuelPump_CenterL_on ()
    ipc.sleep(1000)
    FuelPump_CenterR_on ()
    ipc.sleep(1000)
    else
    LisCeci("Fuel pumps center : off")
	ipc.log("Fuel pumps center : off. EngStart actions.lua.")
    ipc.sleep(1000)
    FuelPump_CenterL_off ()
    FuelPump_CenterR_off ()
    end
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    ipc.sleep(100)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    LisCeci("Waiting to Start engine.")
	ipc.log("Waiting to Start engine. EngStart actions.lua.")
    --VoxFO_Toggle ()
    dem = 1
	ipc.writeUB(0x7000,dem)
	ipc.log("dem = "..dem.." On donne la valeur 1 à dem=0x7000. EngStart de l'actions.lua.")
	ipc.sleep(100)
    
    --Sauvegarde ()
    elseif dem == 1 then
    --VoxFO_Toggle ()
    LisCeci("OK. Start engine.")
	ipc.log("OK. Start engine. EngStart actions.lua.")
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(55,10,4) end --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL.	
    ipc.sleep(1500) 
    PMDG_HydC1andC2_on ()
    ipc.sleep(1500)
    PMDG_All_HydRotaries_auto ()
    ipc.sleep(10000)
    LisCeci("Start engine two")
	ipc.log("Start engine two. EngStart actions.lua.")
    --ipc.keypressplus(103,10,4)
    ipc.sleep(1000)
    PMDG_EngR_Start ()
    ipc.sleep(2000)
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(57,10,4) end --ipc.keypressplus(105,10,4) end -- 105 NumPad 9 + CTRL
    ipc.sleep(2000)	
    PMDG_ENG2_idle ()
    ipc.sleep(6000)
    LisCeci("Start engine one")
	ipc.log("Start engine one. EngStart actions.lua.")
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(55,10,4) end --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL.
    ipc.sleep(2000) --Francis je passe de 1000 à 2000 car trop rapide sur le rotateur /// à la vitesse de la vue.
    --VoxFO_Toggle ()
    PMDG_EngL_Start ()
    ipc.sleep(2000)
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(57,10,4) end --ipc.keypressplus(105,10,4) end -- 105 NumPad 9 + CTRL
    ipc.sleep(2000)
    PMDG_ENG1_idle ()
    ipc.sleep(2000)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.    
    ipc.sleep(1000)
    difspt = 100
        while true do
        SPT1 = ipc.readDBL(0x2000)
        SPT2 = ipc.readDBL(0x2100)
        difspt= math.abs(SPT2-SPT1)
            if SPT2 > 15 and SPT1 > 15 and difspt < 2 then
            break
            end
        end
    --VoxFO_Toggle ()
    LisCeci("Engine one and two started and stabilized")
	ipc.log("Engine one and two started and stabilized. EngStart actions.lua.")
    ipc.sleep(2000)
    dem = 2
	ipc.writeUB(0x7000,dem)
	ipc.log("dem = "..dem.." On donne la valeur 2 à dem=0x7000. EngStart de l'actions.lua.")
    --Sauvegarde ()
    ipc.writeUB(0x66FF,22)
    end
end
function Runway_E ()
    AG =  ipc.readUB (0x0366) -- Aircraft on ground flag (0=airborne, 1=on ground).
    RW = ipc.readUB(0x7003)
    if RW == 0 and AG == 1 then RW_E1()
    elseif RW == 1 and AG == 1 then RW_E2()
    elseif RW == 2 and AG == 1 then           
    SPT=ipc.readUD(0x02B4)*3.6/1.852/65536 -- GS: Ground Speed, as 65536*metres/sec.
    while true do
        ipc.sleep(100)
        SPT=ipc.readUD(0x02B4)*3.6/1.852/65536 -- GS: Ground Speed, as 65536*metres/sec.
        if SPT < 1 then
        break
        end
    end
    ipc.writeUB(0x66C0,3)
	CHRONO_L_ET_Stop ()
    ipc.sleep (500)
	Luminosite ()
	ipc.writeSTR(0x66E0,"102",3)
    LisCeci("Taxi and runway turn on")
	ipc.log("Taxi and runway turn on. Runway_E actions.lua.")
    PMDG_Taxi_on ()
    ipc.sleep(500)
    PMDG_RunwayTurn_on ()
    ipc.sleep(500)
	if ipc.readUB (0x115E) ~= 1 then  -- Time of day indicator, 0=Dawn, 1=Day, 2=Dusk, 3=Night.      
	ipc.writeSTR(0x66E0,"103",3)
    LisCeci("Logo light on")
	ipc.log("Logo light on. Runway_E actions.lua.")
    PMDG_Logo_on ()
	else
	PMDG_Logo_off ()
	end
	ipc.writeSTR(0x66E0,"078",3)
    LisCeci("Flaps: up")
	ipc.log("Flaps: up. Runway_E actions.lua.")
    ipc.control(65595)
	ipc.sleep(1000)	
    sound.play ("\\Hotesse\\ASC_CC_After_Landing")
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(55,10,4) end --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL.
    ipc.sleep(1000)
	ipc.writeSTR(0x66E0,"100",3)
    LisCeci("APU start")
	ipc.log("APU start. Runway_E actions.lua.")
    ipc.sleep(1000)
    PMDG_APU_start ()
    ipc.sleep(1000)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    ipc.sleep(1000)
     PMDG_Select_Lwr_Ctr ()
     PMDG_Disp_Gear ()
    ipc.sleep(6000) -- Francis je passe de 1000 Patrick à 6000	
    GSX_Park ()
    ipc.sleep(1000)
	ipc.writeSTR(0x66E0,"105",3)
    LisCeci("Ready to Taxi")
	ipc.log("Ready to Taxi. Runway_E actions.lua.")
    ipc.sleep(1000)
    sound.play ("\\Hotesse\\ASC_CC_After_Landing_Des")
    ipc.sleep(1000)
    RW = 3
    ipc.writeUB(0x7003,RW)
	cmd = 'taskkill /f /im RestartOnCrash.exe'
	ipc.log("Fin Restart On Crash. Runway_E actions.lua.")
    os.execute(cmd)
    end
end
function RW_E1 ()
    if dem == 3 then
    Luminosite ()
    if ipc.readLvar("switch_507_a") > 0 then
    LisCeci("Flight director, on")
	ipc.log("Flight director, on")
    PMDG_AP_both_FD_on ()
    ipc.sleep(1000)
    LisCeci("Auto-Throttle, on")
	ipc.log("Auto-Throttle, on")
    PMDG_AP_both_AT_on ()
    ipc.sleep(1000)
    QNH_DEP ()
    ipc.sleep(100)
    LisCeci("Altimeter set")
	ipc.log("Altimeter set")
    EFIS_Baro_std ()
    ipc.sleep(1000)
    CEfisRange = ipc.readLvar('switch_187_a')
    if CEfisRange > 0 then
    n2 = CEfisRange/10
        for i=1,n2 do
        PMDG_EFIS_Range_dec ()
        ipc.sleep(100)
        end
    end
    LisCeci("Before Take-off Checklist")
	ipc.log("Before Take-off Checklist")
    ipc.sleep(500)
    chkl = 4
    CheckList ()
    ipc.sleep (1000)
    ipc.control(66508,413)-- 66508 = PANEL_ID_CLOSE Zoomed Lower DU
    ipc.sleep(1000)
    PMDG_Disp_Chkl ()
    RW = 1
    ipc.writeUB(0x7003,RW)
    --Sauvegarde ()
    else
    LisCeci("Warning! Flaps not set for Take-off! Please, set Flaps!")
	ipc.log("Warning! Flaps not set for Take-off! Please, set Flaps!")
    end
    end
end
function RW_E2 ()
    ipc.writeUW(0x4204, 0x1001)
    ipc.writeUB(0x4200,3)
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(56,10,4) end --ipc.keypressplus(104,10,4) end -- 104 NumPad 8 + CTRL
    ipc.sleep(1000)
    LisCeci("Strobe, on")
	ipc.log("Strobe, on")
    PMDG_Strobe_on ()
    ipc.sleep(1000)
    LisCeci("Landing lights, on")
	ipc.log("Landing lights, on")
    PMDG_LandingLights_on ()
    ipc.sleep(1000)
    PMDG_Taxi_on ()
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    ipc.sleep(1000)
    LisCeci("T cass: T A R A")
	ipc.log("T cass: T A R A")
    PMDG_TCAS_inc ()
    ipc.sleep(300)
    PMDG_TCAS_inc ()
    ipc.sleep(300)
    PMDG_TCAS_inc ()
    ipc.sleep(300)
    PMDG_TCAS_inc ()
    ipc.sleep(1000)
    if ipc.readLvar("ngx_MCP_LNav") == 0 then
	PMDG_LNAV ()
	LisCeci("L nave engaged")--FRANCIS JE REMETS EN ACTION PATRICK --
	end
	ipc.sleep (500)
	if ipc.readLvar("ngx_MCP_VNav") == 0 then
	PMDG_VNAV ()
	LisCeci("V nave engaged")--FRANCIS JE REMETS EN ACTION PATRICK --
	end
	ipc.sleep (1000)
    lv = 1
    Lisvents ()
    ipc.sleep (1000)
    LisCeci("Ready to Take-off")
	ipc.log("Ready to Take-off")
    ipc.sleep(2000)
    sound.play ("\\Hotesse\\ASC_PF_FaPrepTo")
    ipc.sleep(3000)
    if lum == 1 then
    sound.play ("\\Hotesse\\ASC_CC_Prep_TO_Day")
    else
    sound.play ("\\Hotesse\\ASC_CC_Prep_TO_Night")
    end
    RW = 2
    ipc.writeUB(0x7003,RW)
    --Sauvegarde ()
end
function Taxi_Arr ()
    ipc.control(65825)
    ipc.control(66857)
    ipc.sleep(10000)
    ipc.control(65824)
end
function Arret_moteurs ()
    ipc.writeSTR(0x66D4,"999999",6)
    ipc.sleep(200)
    RW = ipc.readUB(0x7003)
    if RW == 3 then
    HZ = ipc.readUB(0x023B)
    DST = ipc.readUW(0x0246)
        if DST > 32768 then
        DST = math.floor((65536-DST)/60)
        else
        DST = math.floor(DST/60*-1)
        end
    Hloc = HZ + DST
	Mloc = ipc.readUB(0x023C)
	if Hloc < 0 then Hloc = Hloc + 24 end
	if Hloc > 24 then Hloc = Hloc - 24 end
    ipc.log("Heure bloc in: "..HZ.."H"..Mloc.."Z".." Arret_moteurs actions.lua.")
	ipc.log("Heure locale: "..Hloc.."H"..Mloc.." Arret_moteurs actions.lua.")
    HBI = HZ
    MBI = Mloc
    ipc.sleep(50)
    ipc.writeUB(0x66CD,HBI)
    ipc.sleep(50)
    ipc.writeUB(0x66CE,MBI)
    ipc.sleep(50)
    poidskg = ipc.readDBL(0x30c0)*0.45359237
    ZFW = ipc.readUD(0x3BFC)/256*0.45359237
    poidskg = math.floor((poidskg)+0.5)
    ZFW = math.floor((ZFW)+0.5)
    Fuel = poidskg - ZFW
    FuelA = Fuel
    ipc.sleep(50)
    --ipc.writeUW(0x66D1,FuelA*100)
    ipc.sleep(50)
    Park = ipc.get("Park")
    tempc = math.floor(ipc.readDBL(0x34A8)+0.5)
    qnhc = math.floor((ipc.readUW(0x0F48)/16)+0.5)
    ventf = math.floor(ipc.readUW(0x0E90)+0.5)
    ventd = math.floor((ipc.readUW(0x0E92)*360/65536)+0.5)
	magdev = math.floor((ipc.readUW(0x02A0)*360/65536)+0.5)
    if magdev>180 then magdev = magdev - 360 end
	ventd = ventd-magdev
	if ventd > 360 then ventd = ventd - 360 end
    if ventd <= 0 then ventd = ventd + 360 end
    inscr = "Arrivée à "..Park.."\n"..
            "                          ".."Fuel restant:"..Fuel.." Kg".."\n"..
            "                          ".."Temp : "..tempc.."°C QNH : "
            ..qnhc.." Vent : "..ventf.." Kt au "..ventd.."° M"
    Logvol (inscr)
	ipc.log(inscr)--AJOUT FRANCIS
	vue = ipc.readUB(0x7002)
    if vue == 1 then Vue_Ext_Francis () end -- C'est pour fermer la vue roulette.
    ipc.sleep(500)
	ipc.writeUB(0x66C0,5)
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(57,10,4) end --ipc.keypressplus(105,10,4) end -- 105 NumPad 9 + CTRL
    ipc.sleep(1000)
    LisCeci("Engine 1 and 2 cut-off")
	ipc.log("Engine 1 and 2: cut-off. Arret_moteurs actions.lua.")
    PMDG_ENG2_cutoff ()
    ipc.sleep(1000)
    PMDG_ENG1_cutoff ()
    ipc.sleep(1000)
    CHRONO_R_ET_Stop ()
	ipc.sleep(1000) -- ajout Francis pour laisser du temps
    Luminosite ()
    ipc.sleep(1000) -- je passe de 500 avec Patrick à 1000 pour laisser du temps
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.sleep(2000) ipc.keypressplus(55,10,4) end --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL. Ajout d'un sleep 2000 le temps de changer de vue.
    ipc.sleep(1000)
    LisCeci("Taxi light and runway turn: off")
	ipc.log("Taxi light and runway turn: off. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    PMDG_RunwayTurn_off ()
    ipc.sleep(1000)
    PMDG_Taxi_off ()
    ipc.sleep(5000)
    LisCeci("Beacon : off")
	ipc.log("Beacon: off. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    PMDG_BCN_off ()
    ipc.sleep(1000)
    LisCeci("Seat belts and no electronics: off")
	ipc.log("Seat belts and no electronics: off. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    Seat_Belts_off ()
    ipc.sleep(1000)
    No_Smoking_off ()
    ipc.sleep(5000)
    FO_CDU_Wheel_Chocks ()
    ipc.sleep(1000)
    ChoixGSX()
    ipc.sleep(1000)
    GPUvar = ipc.readLvar("NGXGPU")
    AirCondvar = ipc.readLvar("NGXGSU")
    if GPUvar == 0 then
    FO_CDU_ExtPower ()
    end
    _sleep(1000,4000)
    OAT = ipc.readDBL(0x34A8)
    if OAT > 25 or OAT < 15  then
    if AirCondvar == 0 then
    FO_CDU_AirCondition ()
    end
    end
    ipc.sleep(1000)
    LisCeci("Primary external power: on")
	ipc.log("Primary external power: on. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    PMDG_PrimExtPower_toggle ()
    ipc.sleep(2000)
    LisCeci("APU: off")
	ipc.log("APU: off. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    PMDG_APU_off ()
    ipc.sleep(1000)
    LisCeci("All fuel pumps: off")
	ipc.log("All fuel pumps: off. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    FuelPump_CenterL_off ()
    ipc.sleep(1000)
    FuelPump_CenterR_off ()
    ipc.sleep(1000)
    FuelPump_AFT1_off ()
    ipc.sleep(1000)
    FuelPump_AFT2_off ()
    ipc.sleep(1000)
    FuelPump_FWD1_off ()
    ipc.sleep(1000)
    FuelPump_FWD2_off ()
    ipc.sleep(1000)
    LisCeci("Primary C1 and C2 : off")
	ipc.log("Primary C1 and C2: off. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    PMDG_HydC1andC2_off ()
    ipc.sleep(1000)
    LisCeci("All hydraulics pumps demand: off")
	ipc.log("All hydraulics pumps demand: off. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    PMDG_All_HydRotaries_off ()
    ipc.sleep(1000)
	ipc.keypressplus(57,10,4) -- ajout Francis pour vue sur les radios
    LisCeci("Radio: off")
	ipc.log("Radio: off. Arret_moteurs actions.lua.")
    ipc.sleep (1000)
    Com_Radio ()
    ipc.sleep(1000)
	ipc.keypressplus(103,10,4) -- ajout Francis pour revenir en vue pilote
    LisCeci("Shutdown Checklist")
	ipc.log("Shutdown Checklist. Arret_moteurs actions.lua.")
    ipc.sleep(500)
    chkl = 9
    CheckList ()
    ipc.sleep (1000)
    ipc.control(66508,413)-- 66508 = PANEL_ID_CLOSE Zoomed Lower DU
    ipc.sleep(1000)
    PMDG_Disp_Chkl ()
    if ipc.readLvar("switch_315_a") == 10 then
    DSP_INDB_DSPL_L_inc ()
    end
    if ipc.readLvar("switch_290_a") == 20 then
    DSP_INDB_DSPL_R_dec ()
    end
    PMDG_Select_R_Inbnd ()
        ipc.sleep(500)
        ipc.control(69922, cg)
        ipc.sleep (500)
        ipc.control(69866, 1)
        ipc.sleep(500)
        ipc.control(69922, cd)
    ipc.sleep(500)
    PMDG_Select_R_Inbnd ()
    PMDG_Disp_Door ()
    PMDG_Select_L_Inbnd ()
    PMDG_Disp_Gear ()
    PMDG_Select_Lwr_Ctr ()
    PMDG_Disp_Air ()
    ipc.sleep(5000)
    LisCeci("Captain, I request ground maintenance for the brake cooling")
	ipc.log("Captain, I request ground maintenance for the brake cooling. Arret_moteurs actions.lua.")
    ipc.sleep(4000)
    ipc.control(69982+73,cg)
    ipc.sleep(500)
    ipc.control(69971+73,cg)
    ipc.sleep(500)
    ipc.control(69968+73,cg)
    ipc.sleep(500)
    ipc.control(69985+73,cg)
    ipc.sleep(500)
    ipc.control(69960+73,cg)
    ipc.sleep(1500)
    ipc.control(69973,cg)
    ipc.sleep(500)
    ipc.control(69965,cg)
    ipc.sleep(500)
    ipc.control(69966,cg)
    ipc.sleep(500)
    ipc.control(69960,cg)
    ipc.sleep(500)
    stage = 4
    ipc.writeUB(0x7001,stage)	
    GsxDeb = ipc.readLvar("FSDT_GSX_DEBOARDING_STATE")--FRANCIS JE RENOME LA Gsxb en GsxDeb car la Lvar de Patrick est celle du DEBOARDING
	ipc.log("GsxDeb = "..ipc.readLvar("FSDT_GSX_DEBOARDING_STATE")..". GsxDeb dans Arrêt moteurs de l'actions lua.")--AJOUT FRANCIS
    if GsxDeb < 4 then NGX_Cockpit_Prepare () end-- FRANCIS Gsxb en GsxDeb
    end
end
function Shutdown ()
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(55,10,4) end --ipc.keypressplus(103,10,4) end -- NumPad 7 + CTRL.
    ipc.sleep(2000)
    LisCeci("Pack left and right: off")
	ipc.log("Pack left and right: off. Shutdown actions.lua.")
    ipc.sleep (1000)
    PMDG_LPack_off ()
    ipc.sleep(1000)
    PMDG_RPack_off ()
    ipc.sleep(1000)
    LisCeci("ADIRU : off")
	ipc.log("ADIRU: off. Shutdown actions.lua.")
    ipc.sleep (1000)
    PMDG_ADIRU_off ()
    ipc.sleep(1000)
    LisCeci("Emergency light: off")
	ipc.log("Emergency light: off. Shutdown actions.lua.")
    ipc.sleep (1000)
    Emer_Light_off ()
    ipc.sleep(1000)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    LisCeci("Secure Checklist")
	ipc.log("Secure Checklist. Shutdown actions.lua.")
    ipc.sleep(1000)
    chkl = 10
    CheckList ()
    ipc.sleep (1000)
    ipc.control(66508,413)-- 66508 = PANEL_ID_CLOSE Zoomed Lower DU
    ipc.sleep(1000)
    PMDG_Disp_Chkl ()
    ipc.sleep(1000)
    ipc.control(69632+28, 0)--Master Bright
	ipc.writeLvar("NGXPilots",1)
    PMDG_Dome_Light_off ()
    ipc.sleep(3000)
    ipc.keypressplus(51,11,4)-- 3 on main keyboard + CTRL SHIFT
    ipc.sleep(3000)
    ipc.keypressplus(107,8,4)-- NumPad + vue suivante   
    ipc.sleep(5000)
    ipc.keypressplus(107,8,4)-- NumPad + vue suivante 
    ipc.sleep(10000)
    if typ == 1 then
        ipc.control(69982+73,cg)--CDU_R_MENU
		ipc.sleep(20)
		ipc.control(69971+73,cg)--CDU_R_R6 FS ACTION 
		ipc.sleep(20)
		ipc.control(69962+73,cg)--CDU_R_L3 DOORS 
		ipc.sleep(20)
		ipc.control(69964+73,cg)--CDU_R_L5
		ipc.sleep(500)
		ipc.control(69964+73,cg)--CDU_R_L5
        else
		
        ipc.control(69632+14017, 1)--DOOR_4L
		ipc.log("Fermeture de la porte 4L. Shutdown de l'actions.lua.")
		ipc.sleep(8000)--FRANCIS
        door4L = ipc.readLvar("7X7XCabinDoor4L")--FRANCIS
		ipc.log("door4L = "..door4L..". 100 ouverte. 0 fermée. Shutdown de l'actions.lua.")--FRANCIS	
		
		end
    ipc.sleep(1000)
    --ipc.keypressplus(74,10,4) 74 J + CTRL
    --logo = ipc.readLvar('switch_116_a')
    --if logo > 0 then
    ipc.sleep(5000)
    if ipc.readLvar("FSDT_GSX_DEBOARDING_STATE") == 6 then
    Reset_GSX ()
    end
    ipc.sleep(5000)
    ipc.keypressplus(107,8,4) -- 107 NumPad +
    ipc.sleep(10000)
    PMDG_NAV_off ()
    ipc.sleep(1000)
    PMDG_Logo_off ()
    ipc.sleep (1000)
    GPUvar = ipc.readLvar("NGXGPU")
    AirCondvar = ipc.readLvar("NGXGSU")
    if AirCondvar == 1 then
    FO_CDU_AirCondition ()
    end
    ipc.sleep(3000)
    if GPUvar == 1 then
    FO_CDU_ExtPower ()
    end
    ipc.sleep(1000)
    Battery_off ()
    ipc.sleep(1000)
end
function EFIS_Baro_std ()
    AG =  ipc.readUB (0x0366)
    if AG == 1 then
    baro = 0
    else
    if baro == 0 then baro = 2 end
    end
    if baro == 1 then
    ipc.control(69824, 1)
    ipc.sleep (500)
    difb = nil
    Baro_Reg ()
    baro = 0
    elseif baro == 0 then
    difb = nil
    Baro_Reg ()
    end
    if baro == 2 then
    --Baro_Reg ()
    ipc.sleep(100)
    ipc.control(69824, 1)
    baro = 1
    end
    --ipc.log ("fin Efis Baro")
end
function Baro_Reg ()
    if ipc.readLvar('switch_190_a') == 100 then
    hpin=1
    else
    hpin = 2.953007
    end
    --ipc.log("Baro_Reg")
    if  QNHr ~= nil then
    qnh = QNHr
    --ipc.log("qnh = QNHr "..qnh)
    else
    qnh = ipc.readUW(0x0EC6)/16*hpin
    qnh = math.floor(0.5 + qnh)
    end
    qnh1= ipc.readUW(0x0330)/16*hpin
    qnh1 = math.floor(0.5 + qnh1)
    ipc.log("QNH: "..qnh..". PFD "..qnh1..". Baro_Reg actions.lua.")
    dif = qnh1 - qnh
    --ipc.log("qnh1 = "..qnh1.." dif = "..dif)
    --if baro == 2 then dif = qnh - 1013 end
    --if baro == 1 then dif = 1013 - qnh end
    if dif > 0 then
         for i = 1, dif do
         ipc.control(69823, 128)
         ipc.sleep (300)
         i = i+1
        end
    end
    if dif < 0  then
    dif = 0 - dif
        for i = 1, dif do
        ipc.control(69823, 256)
        ipc.sleep (300)
        i = i+1
        end
    end
    ipc.sleep(500)
    if difb == nil or difb > 0 then Baro_Test () end
end
function Baro_Test ()
    ipc.log ("Baro_Test. Baro_Test actions.lua.")
    qnh1= ipc.readUW(0x0330)/16*hpin
    qnh1 = math.floor(0.5 + qnh1)
    difb = math.abs(qnh - qnh1)
    ipc.log("dif = "..difb..". Baro_Test actions.lua.")
    while difb > 0 do
    qnh1= ipc.readUW(0x0330)/16*hpin
    qnh1 = math.floor(0.5 + qnh1)
    difb = math.abs(qnh - qnh1)
    Baro_Reg ()
    ipc.log("Test baro QNH: "..qnh..". PFD "..qnh1..". Baro_Test actions.lua.")
    end
end
function CheckList ()
    PMDG_Select_Lwr_Ctr ()
    ipc.sleep(500)
    PMDG_Disp_Chkl ()
    ipc.sleep(500)
    ipc.control(66507,413)-- 66507 = PANEL_ID_OPEN Zoomed Lower DU
    ipc.sleep(1500)
    mouse.move(76,56,2)
    ipc.sleep(500)
    ReadChkL ()
end
function ReadChkL ()
    if chkl == 1 then
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,64,2)
    ipc.sleep(500)
    mouse.click(0)
    LisCeci("Oxygen. Tested, 100%")
	ipc.log("Oxygen: Tested, 100%")
    ipc.sleep (3000)
    mouse.click(0)
    head = math.floor(ipc.readDBL(0x2B00)+0.5) --ipc.readLvar("ngx_HDGwindow")
    head = tostring(head)
    long = string.len(head)
    if long == 1 then
    car1 = "0"
    car2 = "0"
    car3 = head
    elseif long == 2 then
    car1 = "0"
    car2 = string.sub(head,1,1)
    car3 = string.sub(head,2,2)
    elseif long == 3 then
    car1 = string.sub(head,1,1)
    car2 = string.sub(head,2,2)
    car3 = string.sub(head,3,3)
    end
    head = car1.." "..car2.." "..car3
    alti = ipc.readUW(0x3324)
    alti = math.floor((alti+5)/10)*10
	alti = tostring(alti)
	long = string.len(alti)
    if long == 1 then
    car1 = ""
    car2 = ""
    car3 = ""
	car4 = ""
	car5 = alti
    elseif long == 2 then
    car1 = ""
    car2 = ""
    car3 = ""
	car4 = string.sub(alti,1,1)
	car5 = string.sub(alti,2,2)
    elseif long == 3 then
    car1 = ""
    car2 = ""
    car3 = string.sub(alti,1,1).." hundred"
	car4 = string.sub(alti,2,2)
	car5 = string.sub(alti,3,3)
	elseif long == 4 then
    car1 = ""
    car2 = string.sub(alti,1,1).." thousand"
    car3 = string.sub(alti,2,2)
		if car3 == "0" then
		car3 = "" car4 = "" car5 = ""
		else
		car3 = string.sub(alti,2,2).." hundred"
		car4 = string.sub(alti,3,3)
			if car4 == "0" then
			car4 = "" car5 = ""
			else
			car4 = string.sub(alti,3,3)
			car5 = string.sub(alti,4,4)
			end
		end
	elseif long == 5 then
    car1 = string.sub(alti,1,1)
    car2 = string.sub(alti,2,2).." thousand"
    car3 = string.sub(alti,3,3)
		if car3 == "0" then
		car3 = "" car4 = "" car5 = ""
		else
		car3 = string.sub(alti,3,3).." hundred"
		car4 = string.sub(alti,4,4)
			if car4 == "0" then
			car4 = "" car5 = ""
			else
			car4 = string.sub(alti,4,4)
			car5 = string.sub(alti,5,5)
			end
		end
    end
	alti = car1.." "..car2.." "..car3.." "..car4.." "..car5 
    LisCeci("Flight instruments. Heading: "..head..". Altimeter: "..alti.." feet.")
	ipc.log("Flight instruments: Heading: "..head..". Altimeter: "..alti.." feet")
    ipc.sleep (10000)
    mouse.click(0)
    pbs = ipc.readLvar("switch_515_a")
    LisCeci("Parking brake.")
	ipc.log("Parking brake.")
    ipc.sleep (1000)
        if pbs == 0 then
        LisCeci("not set. Please set parking brake")
		ipc.log("not set. Please set parking brake")
            while pbs == 0 do
            pbs = ipc.readLvar("switch_515_a")
            ipc.sleep (500)
            end
            LisCeci("OK. Set")
			ipc.log("OK. Set")
        else
        ipc.sleep (500)
        LisCeci("Set")
		ipc.log("Set")
        end
    ipc.sleep(2000)
    LisCeci("Fuel control switches.")
	ipc.log("Fuel control switches:")
    ipc.sleep (1000)
        if ipc.readLvar("switch_520_a") == 0 or ipc.readLvar("switch_521_a") == 0  then
        LisCeci("not cut off. Please cut fuel switch")
		ipc.log("not cut off. Please cut fuel switch")
            while ipc.readLvar("switch_520_a") == 0 do
            ipc.sleep (500)
            end
            while ipc.readLvar("switch_521_a") == 0 do
            ipc.sleep (500)
            end
            LisCeci("OK. Cut off")
			ipc.log("OK. Cut off")
        else
        LisCeci("Cut off.")
		ipc.log("Cut off")
        end
    ipc.sleep(2000)
    LisCeci("Preflight Checklist complete.")
	ipc.log("Preflight Checklist complete.")
    elseif chkl == 2 then
	if ipc.readLvar("switch_29_a") == 0 then -- 29_a = OH_NO_SMOKING_LIGHT_SWITCH
    ipc.control(69661, 2) -- OH_NO_SMOKING_LIGHT_SWITCH 2ème position
    ipc.sleep(500)
    ipc.control(69662, 2) -- OH_FASTEN_BELTS_LIGHT_SWITCH 2ème position
	end	
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,67,2)
    ipc.sleep(500)
    mouse.click(0)
    --TestPush ()
    LisCeci("Flight deck door, closed and locked")
	ipc.log("Flight deck door: closed and locked")
    ipc.sleep(3000)
    mouse.click(0)
    --TestPush ()
    LisCeci("Passenger signs, On")
	ipc.log("Passenger signs, On")
    ipc.sleep(2000)
    head = ipc.readLvar("ngx_HDGwindow")
    head = tostring(head)
    long = string.len(head)
    if long == 1 then
    car1 = "0"
    car2 = "0"
    car3 = head
    elseif long == 2 then
    car1 = "0"
    car2 = string.sub(head,1,1)
    car3 = string.sub(head,2,2)
    elseif long == 3 then
    car1 = string.sub(head,1,1)
    car2 = string.sub(head,2,2)
    car3 = string.sub(head,3,3)
    end
    head = car1.." "..car2.." "..car3
    alti = ipc.readLvar("ngx_ALTwindow")
    spw =  ipc.readLvar("ngx_SPDwindow")
    spw = tostring(spw)
    long = string.len(spw)
    if long == 1 then
    car1 = "0"
    car2 = "0"
    car3 = head
    elseif long == 2 then
    car1 = "0"
    car2 = string.sub(spw,1,1)
    car3 = string.sub(spw,2,2)
    elseif long == 3 then
    car1 = string.sub(spw,1,1)
    car2 = string.sub(spw,2,2)
    car3 = string.sub(spw,3,3)
    end
	spw = car1.." "..car2.." "..car3
	alti = tostring(alti)
	long = string.len(alti)
    if long == 1 then
    car1 = ""
    car2 = ""
    car3 = ""
	car4 = ""
	car5 = alti
    elseif long == 2 then
    car1 = ""
    car2 = ""
    car3 = ""
	car4 = string.sub(alti,1,1)
	car5 = string.sub(alti,2,2)
    elseif long == 3 then
    car1 = ""
    car2 = ""
    car3 = string.sub(alti,1,1).." hundred"
	car4 = string.sub(alti,2,2)
	car5 = string.sub(alti,3,3)
	elseif long == 4 then
    car1 = ""
    car2 = string.sub(alti,1,1).." thousand"
    car3 = string.sub(alti,2,2)
		if car3 == "0" then
		car3 = "" car4 = "" car5 = ""
		else
		car3 = string.sub(alti,2,2).." hundred"
		car4 = string.sub(alti,3,3)
			if car4 == "0" then
			car4 = "" car5 = ""
			else
			car4 = string.sub(alti,3,3)
			car5 = string.sub(alti,4,4)
			end
		end
	elseif long == 5 then
    car1 = string.sub(alti,1,1)
    car2 = string.sub(alti,2,2).." thousand"
    car3 = string.sub(alti,3,3)
		if car3 == "0" then
		car3 = "" car4 = "" car5 = ""
		else
		car3 = string.sub(alti,3,3).." hundred"
		car4 = string.sub(alti,4,4)
			if car4 == "0" then
			car4 = "" car5 = ""
			else
			car4 = string.sub(alti,4,4)
			car5 = string.sub(alti,5,5)
			end
		end
    end
	alti = car1.." "..car2.." "..car3.." "..car4.." "..car5
    --TestPush ()
    LisCeci("MCP, V2: "..spw..", Heading Track : "..head..",altitude : "..alti.." feet")
	ipc.log("MCP, V2: "..spw..", Heading Track : "..head..",altitude : "..alti.." feet")
    ipc.sleep(10000)
	v = ipc.readUB(0x6C22)
	if v ~= 0 then
	v=tostring(v)
	car1 = string.sub(v,1,1)
    car2 = string.sub(v,2,2)
    car3 = string.sub(v,3,3)
	v1 = car1.." "..car2.." "..car3
	else
	v1 =" "
	end
	v = ipc.readUB(0x6C23)
	if v ~= 0 then
	v=tostring(v)
	car1 = string.sub(v,1,1)
    car2 = string.sub(v,2,2)
    car3 = string.sub(v,3,3)
	vr = car1.." "..car2.." "..car3
	else
	vr =" "
	end
	v = ipc.readUB(0x6C24)
	if v ~= 0 then
	v=tostring(v)
	car1 = string.sub(v,1,1)
    car2 = string.sub(v,2,2)
    car3 = string.sub(v,3,3)
	v2 = car1.." "..car2.." "..car3
	else
	v2 =" "
	end
    mouse.click(0)
    --TestPush ()
    LisCeci("Take-off speeds, V one: "..v1..", VR: "..vr.." and V two: "..v2..", set.")
	ipc.log("Take-off speeds: V one: "..v1..", VR: "..vr.." and V two: "..v2..", set")
    ipc.sleep(10000)
    mouse.click(0)
    --TestPush ()
    LisCeci("CDU preflight. Completed")
	ipc.log("CDU preflight: Completed")
    ipc.sleep(3000)
    mouse.click(0)
    ipc.sleep(500)
    PMDG_Select_L_Inbnd ()
    PMDG_Disp_Fctl ()
    ipc.sleep(1000)
    --trim = 4 + math.floor(ipc.readUW(0x0bc2)/1418/0.25)*0.25
    trim = math.ceil((ipc.readSW(0x0bc2)+5778)/1465.533/0.25)*0.25
    --TestPush ()
    LisCeci("Stabilizer Trim set to, "..trim.." units. Aileron trim :zero. Rudder trim :zero.")
	ipc.log("Stabilizer Trim set to: "..trim.." units Aileron trim: zero Rudder trim: zero")
    ipc.sleep(8000)
    PMDG_Select_L_Inbnd ()
    PMDG_Disp_Door ()
    PMDG_Select_Lwr_Ctr ()
    mouse.click(0)
    --TestPush ()
    LisCeci("Taxi and take-off briefing. Completed.")
	ipc.log("Taxi and take-off briefing: Completed")
	PMDG_BCN_on ()
    ipc.sleep(3000)
    mouse.click(0)
    --TestPush ()
    LisCeci("Beacon. On.")
	ipc.log("Beacon: On")
    ipc.sleep(2000)
    LisCeci("Before start checklist complete.")
	ipc.log("Before start checklist complete.")
    ipc.sleep(3000)
    elseif chkl == 3 then
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,71,2)
    ipc.sleep(500)
    mouse.click(0)
        if Aion == 1 then
        LisCeci("Anti-Ice: On")
		ipc.log("Anti-Ice: On")
        else
        LisCeci("Anti-Ice: Off")
		ipc.log("Anti-Ice: Off")
        end
    ipc.sleep(3000)
    mouse.click(0)
    LisCeci("Recall. Checked.")
	ipc.log("Recall: Checked")
    ipc.sleep(3000)
    mouse.click(0)
    LisCeci("Autobrake. Reject Take-off.")
	ipc.log("Autobrake: Reject Take-off")
    ipc.sleep(3000)
    ipc.sleep(500)
    PMDG_Select_L_Inbnd ()
    PMDG_Disp_Fctl ()
    ipc.sleep(1000)
    PMDG_Select_Lwr_Ctr ()
    FlightControlTest ()
    RudderTest ()
    LisCeci("Flight controls. Checked.")
	ipc.log("Flight controls: Checked")
    ipc.sleep(5000)
    mouse.click(0)
    while true do
	GsxDep = ipc.readLvar("FSDT_GSX_DEPARTURE_STATE")--FRANCIS JE RENOME Gsxd en GsxDep
		if GsxDep < 4 or GsxDep == 6 then--FRANCIS JE RENOME Gsxd en GsxDep
		ipc.writeSTR(0x0D70,"LuaKill:GSX",40)
		break
		end
    ipc.sleep(150)
    end
    LisCeci("Ground equipement. Clear.")
	ipc.log("Ground equipement: Clear")
    ipc.sleep(4000)
    mouse.click(0)
    LisCeci("Before taxi checklist complete.")
	ipc.log("Before taxi checklist complete.")
    ipc.sleep(2000)
    elseif chkl == 4 then
        mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,75,2)
    ipc.sleep(500)
    mouse.click(0)
            fpos = ipc.readLvar("switch_507_a")
            if fpos == 10  then
			strgf = "Flaps 1"
			elseif fpos == 20 then
			strgf = "Flaps 5"
			elseif fpos == 30 then
			strgf = "Flaps 15"
			elseif fpos == 40 then
			strgf = "Flaps 20"
			elseif fpos == 50 then
			strgf = "Flaps 25"
			end
	ipc.writeSTR(0x66E0,"079",3)
    LisCeci(strgf.." set for take-off")
	ipc.log(strgf.." set for take-off")
    ipc.sleep(3000)
	ipc.writeSTR(0x66E0,"080",3)
    LisCeci("Before take-off checklist complete.")
	ipc.log("Before take-off checklist complete.")
    ipc.sleep(3000)
    elseif chkl == 5 then
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,78,2)
    ipc.sleep(500)
    mouse.click(0)
	ipc.writeSTR(0x66E0,"081",3)
    LisCeci("Landing Gear. Up")
	ipc.log("Landing Gear: Up")
    ipc.sleep (1500)
	ipc.writeSTR(0x66E0,"078",3)
    LisCeci("Flaps. Up.")
	ipc.log("Flaps: Up")
    ipc.sleep (1500)
	ipc.writeSTR(0x66E0,"082",3)
    LisCeci("After take-off checklist complete.")
	ipc.log("After take-off checklist complete.")
    ipc.sleep(3000)
    elseif chkl == 6 then
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,82,2)
    ipc.sleep(500)
    mouse.click(0)
	ipc.writeSTR(0x66E0,"083",3)
    LisCeci("Recall. Checked.")
	ipc.log("Recall: Checked")
    ipc.sleep(3000)
    mouse.click(0)
	ipc.writeSTR(0x66E0,"084",3)
    LisCeci("Notes. Checked.")
	ipc.log("Notes: Checked")
    ipc.sleep(3000)
    mouse.click(0)
    ABvar = ipc.readLvar('switch_292_a')
    if ABvar == 0 then ABtxt = "RTO"
    elseif ABvar == 10 then ABtxt = "off"
    elseif ABvar == 20 then ABtxt = "DisArm"
    elseif ABvar == 30 then ABtxt = "1"
    elseif ABvar == 40 then ABtxt = "2"
    elseif ABvar == 50 then ABtxt = "3"
    elseif ABvar == 60 then ABtxt = "4"
    elseif ABvar == 70 then ABtxt = "MAX"
    end
	ipc.writeSTR(0x66E0,"085",3)
    LisCeci("Autobrake: "..ABtxt)
	ipc.log("Autobrake: "..ABtxt)
    ipc.sleep(3000)
    mouse.click(0)
	V30 = ipc.get("V30")
	ipc.writeSTR(0x66E0,"086",3)
    LisCeci("Landing data. V ref:"..V30..". Minimums: set")
	ipc.log("Landing data: V ref:"..V30..". Minimums: set")
    ipc.sleep(6000)
    mouse.click(0)
	ipc.writeSTR(0x66E0,"087",3)
    LisCeci("Approach briefing. Completed")
	ipc.log("Approach briefing: Completed")
    ipc.sleep(5000)
    mouse.click(0)
	ipc.writeSTR(0x66E0,"088",3)
    LisCeci("Descent checklist complete.")
	ipc.log("Descent checklist complete.")
    ipc.sleep(3000)
    elseif chkl == 7 then
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,86,2)
    ipc.sleep(500)
    mouse.click(0)
    if ipc.readLvar('switch_190_a') == 100 then
    hpin=1
    else
    hpin = 2.953007
    end
    qnh = ipc.readUW(0x0330)/16*hpin
    qnh = math.floor(0.5 + qnh)
    qnh = tostring(qnh)
    long = string.len(qnh)
    if long == 3 then
    car1 = "0"
    car2 = string.sub(qnh,1,1)
    car3 = string.sub(qnh,2,2)
    car4 = string.sub(qnh,3,3)
    elseif long == 4 then
    car1 = string.sub(qnh,1,1)
    car2 = string.sub(qnh,2,2)
    car3 = string.sub(qnh,3,3)
    car4 = string.sub(qnh,4,4)
    end
    qnh = car1.." "..car2.." "..car3.." "..car4
	ipc.writeSTR(0x66E0,"089",3)
    LisCeci("Altimeters QNH set to "..qnh)
	ipc.log("Altimeters QNH set to "..qnh)
    ipc.sleep (6000)
    mouse.click(0)
	ipc.writeSTR(0x66E0,"090",3)
    LisCeci("Approach checklist complete.")
	ipc.log("Approach checklist complete.")
    ipc.sleep(3000)
    elseif chkl == 8 then
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,90,2)
    ipc.sleep(500)
    mouse.click(0)
	ipc.writeSTR(0x66E0,"091",3)
    LisCeci("Speedbrake. Armed")
	ipc.log("Speedbrake: Armed")
    ipc.sleep(3000)
	ipc.writeSTR(0x66E0,"092",3)
    LisCeci("Landing gear. Down")
	ipc.log("Landing gear: Down")
    ipc.sleep(3000)
    fpos = ipc.readLvar("switch_507_a")
            if fpos == 10  then
			strgf = "Flaps 1"
			elseif fpos == 20 then
			strgf = "Flaps 5"
			elseif fpos == 30 then
			strgf = "Flaps 15"
			elseif fpos == 40 then
			strgf = "Flaps 20"
			elseif fpos == 50 then
			strgf = "Flaps 25"
            elseif fpos == 60 then
			strgf = "Flaps 30"
			end
	ipc.writeSTR(0x66E0,"093",3)
    LisCeci(strgf.." set for landing.")
	ipc.log(strgf.." set for landing.")
    ipc.sleep(5000)
	ipc.writeSTR(0x66E0,"094",3)
    LisCeci("Landing checklist complete.")
	ipc.log("Landing checklist complete.")
    ipc.sleep(3000)
    elseif chkl == 9 then
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,94,2)
    ipc.sleep(500)
    mouse.click(0)
    --mouse.move(1404,780)
    LisCeci("Hydraulique panel . Set")
	ipc.log("Hydraulique panel: Set")
    ipc.sleep(3000)
    LisCeci("Fuel pumps . Off.")
	ipc.log("Fuel pumps: Off")
    ipc.sleep(2000)
    LisCeci("Flaps. Up.")
	ipc.log("Flaps: Up")
    ipc.sleep(2000)
    pbs = ipc.readLvar("switch_515_a")
    if pbs > 0 then
    LisCeci("Parkingbrake: Set")
	ipc.log("Parkingbrake: Set")
    else
    LisCeci("Parkingbrake: Off")
	ipc.log("Parkingbrake: Off")
    end
    ipc.sleep(3000)
    mouse.click(0)
    LisCeci("Fuel control switches. Cut off")
	ipc.log("Fuel control switches: Cut off")
    ipc.sleep(3000)
    LisCeci("Weather radar. Off")
	ipc.log("Weather radar: Off")
    ipc.sleep(2000)
    LisCeci("Shutdown checklist complete.")
	ipc.log("Shutdown checklist complete.")
    ipc.sleep(3000)
    elseif chkl == 10 then
    mouse.move(76,56,2) -- menu
    ipc.sleep(500)
    mouse.click(0)
    mouse.move(76,97,2)
    ipc.sleep(500)
    mouse.click(0)
    --mouse.move(1404,744)
    LisCeci("ADIRU. Off")
	ipc.log("ADIRU: Off")
    ipc.sleep(2000)
    LisCeci("Emergency lights. Off")
	ipc.log("Emergency lights: Off")
    ipc.sleep(3000)
    LisCeci("Packs. Off")
	ipc.log("Packs: Off")
    ipc.sleep(2000)
    mouse.click(0)
    LisCeci("Secure checklist complete. Bye Bye")
	ipc.log("Secure checklist complete. Bye Bye")
    ipc.sleep(3000)
    end
end
function Anti_ice ()
    QNH_DEP ()
    if metper == 0 then
    lota= 0
    lotd=0
    longma = string.match(MET,"[M]%d+[/]")
    if longma ~= nil then lota = 1 end
    if lota == 0 then
    longma = string.match(MET,"%d+[/]")
        if longma ~= nil then lota = 2 end
    end
    longmd = string.match(MET,"[/][M]%d+")
    if longmd ~= nil then lotd = 1 end
    if lotd == 0 then
    longmd = string.match(MET,"[/]%d+")
        if longmd ~= nil then lotd = 2 end
    end
    if lota == 1 then
    TA=string.sub(longma,2,3)
    TA =  tonumber(TA)*-1
    elseif lota == 2 then
    TA=string.sub(longma,1,2)
    TA =  tonumber(TA)
    end
    if lotd == 1 then
    TD=string.sub(longmd,3,5)
    TD =  tonumber(TD)*-1
    elseif lotd == 2 then
    TD=string.sub(longmd,2,4)
    TD =  tonumber(TD)
    end
    else
    TA = ipc.readDBL(0x34A8)
    TD = ipc.readUW(0x04C8)/256
        if TD > 128 then TD = TD - 256 end
    end
    if TA == nil then TA = ipc.readDBL(0x34A8) end
    if TD == nil then
    TD = ipc.readUW(0x04C8)/256
        if TD > 128 then TD = TD - 256 end
    end
    --ipc.log("Temp :"..TA.." Dewpoint :"..TD)
    es = 7.5*TA/(237.3+TA)
    es1 = 6.11*10^es
    es = 7.5*TD/(237.3+TD)
    es2 = 6.11*10^es
    RH= es2/es1*100
    --ipc.log("% humidité :"..RH)
    if TA<10 and RH>55 then
    --ipc.log("Icing condition")
    LisCeci("Icing condition. Engine anti-ice on for take-off.")
	ipc.log("Icing condition. Engine anti-ice on for take-off.")
    Aion = 1
    ipc.sleep(4000)
    Eng1_antiice_on()
    ipc.sleep(1000)
    Eng2_antiice_on()
    else
    --ipc.log("No icing condition")
    LisCeci("No icing condition. Engine anti-ice off for take-off.")
	ipc.log("No icing condition. Engine anti-ice off for take-off.")
    Aion = 0
    ipc.sleep(4000)
    Eng1_antiice_off()
    ipc.sleep(1000)
    Eng2_antiice_off()
    end
end
function Luminosite ()
    lum = ipc.readUB (0x115E) -- Time of day indicator, 0=Dawn, 1=Day, 2=Dusk, 3=Night.
    if lum ~= 1 then
        if ipc.readLvar("switch_26_a") == 0 and ipc.readLvar("switch_521_a") == 100 then -- 26 = EVT_OH_DOME_SWITCH 521 = EVT_CONTROL_STAND_ENG2_START_LEVER
        PMDG_Dome_Light_on ()
        ipc.control(69632+2101, 0)--80 EVT_OH_GS_FLOOD_LIGHT_CONTROL
        ipc.control(69632+3220, 0)--80 EVT_FWD_LEFT_FLOOD_LIGHT_CONTROL
        ipc.control(69632+2850, 0)--80 EVT_FWD_RIGHT_FLOOD_LIGHT_CONTROL
        ipc.control(69632+737, 0)--80 EVT_PED_FLOOD_LIGHT_CONTROL
        elseif ipc.readLvar("switch_521_a") == 0 and ipc.readLvar("switch_737_a")==0 then -- 521 = EVT_CONTROL_STAND_ENG2_START_LEVER 737 = EVT_PED_FLOOD_LIGHT_CONTROL
        PMDG_Dome_Light_off ()
        ipc.control(69632+2101, 90)--80 EVT_OH_GS_FLOOD_LIGHT_CONTROL
        ipc.control(69632+3220, 90)--80 EVT_FWD_LEFT_FLOOD_LIGHT_CONTROL
        ipc.control(69632+2850, 90)--80 EVT_FWD_RIGHT_FLOOD_LIGHT_CONTROL
        ipc.control(69632+737, 90)--80 EVT_PED_FLOOD_LIGHT_CONTROL
        end
    elseif lum == 1 and ipc.readLvar("switch_737_a")>0 or ipc.readLvar("switch_26_a") > 0 then -- 737 = EVT_PED_FLOOD_LIGHT_CONTROL 26 = EVT_OH_DOME_SWITCH
    PMDG_Dome_Light_off ()
    ipc.control(69632+2101, 0)--80 EVT_OH_GS_FLOOD_LIGHT_CONTROL
    ipc.control(69632+3220, 0)--80 EVT_FWD_LEFT_FLOOD_LIGHT_CONTROL
    ipc.control(69632+2850, 0)--80 EVT_FWD_RIGHT_FLOOD_LIGHT_CONTROL
    ipc.control(69632+737, 0)--80 EVT_PED_FLOOD_LIGHT_CONTROL
    end
end
function Debarquement ()
    ipc.runlua("GSX_Arr")
	ipc.log("Lancement Gsx Arr lua. Debarquement actions.lua.")
    ipc.sleep(1000)
     -- Menu GSX
    ipc.keypressplus(123,11,4)ipc.sleep(500)ext.run(env.."SimConnectW.exe") -- F12 + CTRL + SHIFT
	ipc.log("Lancement du SimConnectW.exe. Debarquement de l'actions.lua.")
    ipc.sleep(1500)
    -- deboarding
    ipc.keypress(49)
    ipc.sleep(2000)
    ipc.keypress(50)
    ipc.sleep(1000)
	
end
function Reset_GSX ()
    -- Menu GSX
    ipc.keypressplus(123,11,4)ipc.sleep(500)ext.run(env.."SimConnectW.exe") -- F12 + CTRL + SHIFT
	ipc.log("Lancement du SimConnectW.exe. Reset_GSX de l'actions.lua.")
    ipc.sleep(2000)
    -- Reset
    ipc.keypress(54)
    ipc.sleep(2000)    
    ipc.sleep(2000)
end
function ChoixGSX ()
	if ipc.readLvar('switch_115_a') == 100 then -- Francis 115_a surveille les NAV
		ipc.writeUB(0x66FE,255)
		ipc.display("Debarquement GSX?\n \n1 = OUI \n2 = NON "..
		"\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie.",1,200)
		ipc.runlua("choix")
		ipc.log("Lancement choix lua. ChoixGSX actions.lua.")
		ipc.keypressplus(72,8,4)-- Touche H = Global enable EZCA.
		while true do
		choix = ipc.readUB(0x66FE)
			if choix ~= 255 and choix >=1 and choix <= 2 then
			break
			elseif choix ~= 255 then
			ipc.writeUB(0x66FE,255)
			ipc.runlua("choix")
			ipc.log("Lancement choix lua. ChoixGSX actions.lua.")
			sound.play("CabinAlert")
			ipc.display("Choix non disponible!\nVeuillez recommencer.",0,5)
			ipc.sleep(5000)
			ipc.display("Debarquement GSX?\n \n1 = OUI \n2 = NON "..
			"\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie.",1,200)
			end
		end
		ipc.sleep(1000) ipc.keypressplus(72,8,4)-- Touche H = Global enable EZCA.
		ipc.display("")
		if choix == 1 then
		ipc.writeUW(0x4204, 0x1001)
		ipc.writeUB(0x4200,3)
		sound.play ("\\Hotesse\\ASC_CC_After_Landing_Gate")
		Debarquement ()
		else
		ipc.writeUW(0x4204, 0x1001)
		ipc.writeUB(0x4200,3)
		if typ == 1 then -- Francis ici c'est le 300
			ipc.control(69982+73,cg)--CDU_R_MENU
			ipc.sleep(20)
			ipc.control(69971+73,cg)--CDU_R_R6 = FS ACTION
			ipc.sleep(20)
			ipc.control(69962+73,cg)--CDU_R_L3 = DOORS
			ipc.sleep(20)
			ipc.control(69964+73,cg)--CDU_R_L5 = choix non disponible sur le 200
			ipc.sleep(500)
			ipc.control(69964+73,cg)--CDU_R_L5
			else
			
			ipc.control(69632+14017, 1)--DOOR_4L
			ipc.log("Ipc.control pour la porte 4L. ChoixGSX de l'actions.lua.")
			ipc.sleep(8000)--FRANCIS
            door4L = ipc.readLvar("7X7XCabinDoor4L")--FRANCIS
		    ipc.log("La Lvar door4L = "..door4L.." Si 100 la porte est ouverte. Si 0 la porte est fermée. ChoixGSX actions.lua.")--FRANCIS	
			
			end
		end
	else
		ipc.writeUB(0x66FE,255)
		ipc.display("Embarquement GSX?\n \n1 = OUI \n2 = NON "..
		"\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie.",1,200)
		ipc.runlua("choix")
		ipc.log("Lancement choix lua. ChoixGSX actions.lua.")
		ipc.keypressplus(72,8,4)-- Touche H = Global enable EZCA.
		while true do
		choix = ipc.readUB(0x66FE)
			if choix ~= 255 and choix >=1 and choix <= 2 then
			break
			elseif choix ~= 255 then
			ipc.writeUB(0x66FE,255)
			ipc.runlua("choix")
			ipc.log("Lancement choix lua. ChoixGSX actions.lua.")
			sound.play("CabinAlert")
			ipc.display("Choix non disponible!\nVeuillez recommencer.",0,5)
			ipc.sleep(5000)
			ipc.display("Embarquement GSX?\n \n1 = OUI \n2 = NON "..
			"\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie.",1,200)
			end
		end
		ipc.sleep(1000) ipc.keypressplus(72,8,4)-- Touche H = Global enable EZCA.
		ipc.display("")
		if choix == 1 then
		PMDG_Logo_on ()
		else
		PMDG_Logo_off ()
		end
	end
end
function VerifPark ()
	FSXchem=ipc.get("FSXchem")
	ipc.sleep(2000)
    if (file_exists(FSXchem.."GSXchoix.dat")) then
		file = io.open(FSXchem.."GSXchoix.dat", "r")
        line = file:read ("*l")
        ipc.log(line)
		file:close()
        ParseCSV (line)
		ipc.display(" ")
        Park =  res[1]
		ipc.set("Park",Park)
		--ipc.setdisplay (1920,0,200,120)
		ipc.display("OK. Le parking "..Park.." est retenu.",1,5 )		
        LisGate()
        LisCeci("Parking "..gat.." is sheduled for arrival.")
		ipc.log("Parking "..gat.." is sheduled for arrival. VerifPark actions.lua.")
		ipc.sleep(500)
		ipc.sleep(2000)
   else
   sound.play("CabinAlert")
   --ipc.setdisplay (1920,0,200,120)
    ipc.display("Pas de parking choisi pour la destination.",0,5 )	
    ipc.sleep(2000)
   end
end
function Parkpref()
	FSXchem=ipc.get("FSXchem")
	ipc.sleep(2000)
    if (file_exists(FSXchem.."GSXchoix.dat")) then
		file = io.open(FSXchem.."GSXchoix.dat", "r")
        line = file:read ("*l")
        ipc.log(line)
		file:close()
        ParseCSV (line)
		ipc.display(" ")
        Park =  res[1]
		ipc.set("Park",Park)
		--ipc.setdisplay (1920,0,200,120)
		ipc.display("OK. Le parking "..Park.." est retenu.",1,5 )
		inscr = "Démarrage APU. Parkpref actions.lua.".."\n".."                          "..
		"Le parking "..Park.." est choisi pour la destination. Parkpref actions.lua."
		Logvol (inscr)
		ipc.log(inscr)--AJOUT FRANCIS
        ipc.sleep(2000)
        LisGate()
        LisCeci("Parking "..gat.." is sheduled for arrival.")
		ipc.log("Parking "..gat.." is sheduled for arrival. Parkpref actions.lua.")
		ipc.sleep(500)
		ipc.sleep(2000)
   else
   sound.play("CabinAlert")
   --ipc.setdisplay (1920,0,200,120)
    ipc.display("Pas de parking choisi pour la destination.",0,5 )
	inscr = "Démarrage APU. Parkpref actions.lua.".."\n".."                          "..
	"Pas de parking choisi pour la destination."
	Logvol (inscr)
	ipc.log(inscr)--AJOUT FRANCIS
    ipc.sleep(2000)
   end
end
function GSX_Park ()
    if (file_exists(FSXchem.."GSXchoix.dat")) then
		file = io.open(FSXchem.."GSXchoix.dat", "r")
        line = file:read ("*l")
        ipc.log(line)
		file:close()
        ParseCSV (line)
		os.remove(FSXchem.."GSXchoix.dat")
		lat2 = res[2]
		ipc.writeDBL(0x7017,lat2)
		lon2 = res[3]
		ipc.writeDBL(0x701F,lon2)
			Park =  res[1]
			ipc.set("Park",Park)
			ipc.display("Parking "..Park.." prévu.",1,15)
			--ipc.sleep(10000) --Francis ajout pour temporiser
			Occupe ()
			ipc.sleep(1000) -- Francis je passe de 1000 Patrick à 5000
            lontable = #res
			ipc.keypressplus(123,11,4)ipc.sleep(500)ext.run(env.."SimConnectW.exe")
			ipc.log("Lancement du SimConnectW.exe. GSX_Park de l'actions.lua.")			
			ipc.sleep(1500) -- Francis je passe de 1500 Patrick à 5000
            for j = 4, lontable do
            ipc.keypress(res[j])
            ipc.sleep(1000) -- Francis je passe de 1000 Patrick à 5000
            end
			ipc.keypress(50)    
			ipc.sleep(2000) -- Francis je passe de 2000 Patrick à 5000
			ipc.keypress(50)
			ipc.sleep(2000) -- Francis je passe de 2000 Patrick à 5000
			--ipc.keypressplus(123,11,4) F12 + CTRL + SHIFT
			ipc.runlua("Followme")
			ipc.log("Lancement Followme lua. GSX_Park actions.lua.")
            ipc.sleep(2000) -- Francis je passe de 2000 Patrick à 5000
            LisGate()
			--ipc.sleep(5000) -- ajout Francis pour temporiser
            LisCeci("Captain, we are expected "..gat)
			ipc.log("Captain, we are expected "..gat..". GSX_Park actions.lua.")
    else
    ipc.display("Parking non prévu.",0,15)
    Park =  nil
    ipc.set("Park",Park)
    end
end
function Occupe ()
    gate =  Park
    if string.sub(gate,1,3)=="Par" then codeG = 1 lon = 4
    elseif string.sub(gate,1,3)=="N P" then codeG = 2 lon = 6
    elseif string.sub(gate,1,3)=="NE " then codeG = 3 lon = 7
    elseif string.sub(gate,1,3)=="E P" then codeG = 4 lon = 6
    elseif string.sub(gate,1,3)=="SE " then codeG = 5 lon = 7
    elseif string.sub(gate,1,3)=="S P" then codeG = 6 lon = 6
    elseif string.sub(gate,1,3)=="SW " then codeG = 7 lon = 7
    elseif string.sub(gate,1,3)=="W P" then codeG = 8 lon = 6
    elseif string.sub(gate,1,3)=="NW " then codeG = 9 lon = 7
    elseif string.sub(gate,1,3)=="Doc" then codeG = 11 lon = 4
    elseif string.sub(gate,1,3)=="Gat" then codeG = 10
    end
    if codeG == 10 then
        if string.byte(string.sub(gate,6,6)) >= 65 and string.byte(string.sub(gate,6,6)) <= 90 then
        codeG = string.byte(string.sub(gate,6,6)) - 53
        lon = 6
        else
        lon = 4
        end
    end
    ipc.log("codeG = "..codeG.." Valeur fonction du type de parking. Gate=10 Par=1 NE=3 etc etc. Occupe actions.lua." )
    lon1 = string.len(gate)
    numb = string.sub(gate, lon+1,lon1)
    numb = tonumber(numb)
    ipc.log("numb "..numb.." Numéro de l'emplacement. Occupe actions.lua.")
    n1=1
    for i = 53312 , 55212, 20 do
        if ipc.readUB(i)== codeG then
             if ipc.readUW(i+2)== numb then
             ipc.log("Occupé "..i.." "..n1)
             j = 57472+((n1-1)*40)
             --ipc.log(j)
             add = ipc.readUD(j)
             --ipc.log(add)
             ipc.writeUD(0x2904,65535)
             ipc.writeUD(0x2908,0)
             ipc.writeUD(0x2900,add)
             ipc.sleep(100)
             ipc.writeUD(0x2904,0)
             end
        end
    n1=n1+1
    end
end
function LisGate ()
	gate =  ipc.get("Park")
    if string.sub(gate,1,3)=="Par" then codeG = "Park " lon = 4
    elseif string.sub(gate,1,3)=="N P" then codeG = "North Park " lon = 6
    elseif string.sub(gate,1,3)=="NE " then codeG = "North East Park " lon = 7
    elseif string.sub(gate,1,3)=="E P" then codeG = "East Park " lon = 6
    elseif string.sub(gate,1,3)=="SE " then codeG = "South East Park " lon = 7
    elseif string.sub(gate,1,3)=="S P" then codeG = "South Park " lon = 6
    elseif string.sub(gate,1,3)=="SW " then codeG = "South West Park " lon = 7
    elseif string.sub(gate,1,3)=="W P" then codeG = "West Park " lon = 6
    elseif string.sub(gate,1,3)=="NW " then codeG = "North West Park " lon = 7
    elseif string.sub(gate,1,3)=="Doc" then codeG = "Dock " lon = 4
    elseif string.sub(gate,1,3)=="Gat" then codeG = "Gate "
    end
    if codeG == "Gate " then
        if string.byte(string.sub(gate,6,6)) >= 65 and string.byte(string.sub(gate,6,6)) <= 90 then
        codeR = string.byte(string.sub(gate,6,6)) - 64
		Radio()
		codeR = radio[codeR].." "
        lon = 6
        else
		codeR = ""
        lon = 4
        end
	else
	codeR = ""
    end
	lon1 = string.len(gate)
    numb = string.sub(gate, lon+1,lon1)
	numb = tonumber(numb)
	numb = tostring(numb)
	pist1 = numb
	long = string.len(pist1)
	if long == 1 then
	car1 = string.sub(pist1,1,1)
	car2 = ""
	car3 = ""
	elseif long == 2 then
	car1 = string.sub(pist1,1,1)
	car2 = string.sub(pist1,2,2)
	car3 = ""
	elseif long == 3 then
	car1 = string.sub(pist1,1,1)
	car2 = string.sub(pist1,2,2)
	car3 = string.sub(pist1,3,3)
	end
	numb = car1.." "..car2.." "..car3
	gat = codeG..codeR..numb
	return (gat)
end
function ASN_Weather ()
    if flag == nil then
    flag = 1
    AG =  ipc.readUB (0x0366) -- Aircraft on ground flag (0=airborne, 1=on ground).
    ipc.keypressplus(122,10,4)ipc.sleep(500)ext.run(env.."SimConnectW.exe") -- F11 + CTRL
	ipc.log("Lancement du SimConnectW.exe. ASN_Weather de l'actions.lua.")
    ipc.sleep(1500)
        if AG == 1 then
        ipc.keypressplus(52)--METAR DEPART Francis passe en test keypressplus car ne fonctionne pas sur la touche 53. 1 pour press		
        else
        ipc.keypressplus(53)--METAR ARRIVEE Francis passe en test keypressplus car ne fonctionne pas sur la touche 53 
        end
    else
    ipc.keypressplus(49,8,4) -- 49 1 on main keyboard
	ipc.sleep(1500)
	ipc.keypressplus(54,8,4)-- 54 6 on main keyboard
    flag = nil
    end
end
-- ## Perso 2 ###
function Synchro ()
    Yo = tonumber(os.date("%Y"))
	jyo = tonumber(os.date("%j"))
	Hjo = tonumber(os.date("!%H"))
	Mjo = tonumber(os.date("!%M"))
    Hj = ipc.readUB(0x023B)--H ZULU
    Mj = ipc.readUB(0x023C)--MN ZULU
    jy = ipc.readUW(0x023E)--DAY NUMBER COUNTING FROM 1
    Y = ipc.readUW(0x0240)-- ZULU YEAR
    ipc.log("OS  :"..Yo.." "..jyo.." "..Hjo.." "..Mjo)
    ipc.log("P3D :"..Y.." "..jy.." "..Hj.." "..Mj)
    nho = (jyo * 24) + Hjo + (Mjo/60)
	nh = (jy * 24) + Hj + (Mj/60)
	ipc.log(nho - nh)
    nh= nho - nh
    if Y == Yo and nh < 1  then
    ipc.writeStruct(0x023B, "2UB", Hjo,Mjo,0x023E,"2UW", jyo,Yo)
    ipc.log("Synchro OK. Synchro actions.lua.")
    gmt = 1
    Yo = tonumber(os.date("%Y"))
	jyo = tonumber(os.date("%j"))
	Hjo = tonumber(os.date("!%H"))
	Mjo = tonumber(os.date("!%M"))
    Hj = ipc.readUB(0x023B)
    Mj = ipc.readUB(0x023C)
    jy = ipc.readUW(0x023E)
    Y = ipc.readUW(0x0240)
    ipc.log("OS  :"..Yo.." "..jyo.." "..Hjo.." "..Mjo.." Synchro actions.lua.")
    ipc.log("P3D :"..Y.." "..jy.." "..Hj.." "..Mj.." Synchro actions.lua.")
    end
end
function FMCmsg ()
    --ipc.log("La valeur de l'offset, avant le while du FMCmsg, 65A2= "..ipc.readUB(0x65A2)) -- balise Francis. Sert à savoir si il y a du texte dans le scratchpad.
    while ipc.readUB(0x65A2) == 0 do
	--zoe=ipc.readUB(0x65A2)-- Francis
	--ipc.log(zoe.. " FMCmsg")-- Francis
    ipc.sleep(100)
	--ipc.log("La valeur de l'offset, après le while du FMCmsg, 65A2= "..ipc.readUB(0x65A2)) -- balise Francis
    end
    ipc.sleep(1000)
    ipc.control(70027,cg)--Clr
    ipc.sleep(100)
    ipc.control(70027,131072)--Clr
    ipc.sleep(500)
end
function FMCexc ()
	while ipc.readUB(0x6599) == 0 do
    ipc.sleep(100)
    end
    ipc.sleep(1000)
	ipc.control(69981,cg)-- EVT_CDU_L_EXEC
end
function FMC_Init ()
    LisCeci("FMC preparation. Initial position")
	ipc.log("FMC preparation. Initial position. FMC_Init actions.lua.")
    ipc.sleep(3000)--FRANCIS
    ipc.keypressplus(100,10,4)--FRANCIS VUE CTRL NUM 4
    ipc.control(69960,cg)--FMC EVT_CDU_L_L1
    ipc.sleep(500)
    ipc.control(69971,cg)--POS INIT
    ipc.sleep(500)
    PosInit ()
    ipc.sleep(500)
    ipc.control(69970,cg)
    ipc.sleep(3000)
    file2 = "City.dat"
    if (file_exists(file2)) then
    file = io.open(file2, "r")
    for n=1 , 11336 do -- Francis 11336 en vrai
    city1 = file:read ("*l")
    city2 = string.sub(city1,1,4)
	--ipc.log(city2)-- Francis
    if city2 == a then break end
    end
    file:close()
    --ipc.log(city1)
    city1 = string.sub(city1,6)
	ipc.log(city1)-- Francis
    LisCeci("Request route to "..city1)
	ipc.log("Request route to "..city1..". FMC_Init actions.lua.")
    end
    ipc.control(69971,cg)--Route EVT_CDU_L_R6
    ipc.sleep(500)
    d=d..a
	ipc.log(d)--Francis
    for i = 1, 8 do
    car = string.byte(string.sub(d,i,i)) - 64
	ipc.log(car.. " = FMC_init")-- Francis
    ipc.control(69997+car,cg) -- EVT_CDU_L_PLUS_MINUS
	ipc.sleep(200)
    end
    ipc.control(69968,cg)--Coroute EVT_CDU_L_R3
    ipc.sleep(500)
    ipc.control(69962,cg)--Request EVT_CDU_L_L3
    FMCmsg ()
    ipc.control(69963,cg)--Load EVT_CDU_L_L4
    ipc.sleep(2000)
	--ipc.log("La valeur de l'offset, avant le while, 65A2= "..ipc.readUB(0x65A2)) -- balise Francis
    while ipc.readUB(0x65A2) ~= 0 do
	--capucine=ipc.readUB(0x65A2)-- Francis
	--ipc.log(capucine.." FMC_Init")-- Francis
    ipc.sleep(100)
	--ipc.log("La valeur de l'offset, après le while, 65A2= "..ipc.readUB(0x65A2)) -- balise Francis
    end
    ipc.sleep(1000)
    ipc.control(69971,cg)--Activate EVT_CDU_L_R6
    ipc.sleep(500)
    ipc.control(69981,cg)--Exec EVT_CDU_L_EXEC
    FMCmsg ()
    LisCeci("inititiale performance with flight level and reserves of fuel")
	ipc.log("inititiale performance with flight level and reserves of fuel. FMC_Init actions.lua.")
    ipc.sleep(2000)
    ipc.control(69971,cg)--Perf Init EVT_CDU_L_R6
    ipc.sleep(1000)
    ipc.control(69970,cg)--Accept EVT_CDU_L_R5
    FMCmsg ()
    ipc.sleep(1000)
	ipc.control(69962,cg)-- EVT_CDU_L_L3 ZFW
	ipc.sleep(2500)
	ipc.control(69962,cg)-- EVT_CDU_L_L3 ZFW
    ipc.sleep(1000)
	ipc.control(69987,cg)-- EVT_CDU_L_2 FUEL
	ipc.sleep(200)
	ipc.control(69996,cg)-- EVT_CDU_L_0 O
	ipc.sleep(200)
	ipc.control(69996,cg)-- EVT_CDU_L_0
	ipc.sleep(500)
	ipc.control(69967,cg)-- EVT_CDU_L_R2 COST INDEX
    ipc.sleep(1000)
    f=FL
    --if FL >= 270 then
    f = tostring(f)
	lont =string.len(f)
		for i = 1, lont do
			cr = string.sub(f,i,i)
			cr = tonumber(cr)
			ipc.sleep(200)
			if cr==0 then
			ipc.control(69996,cg) -- EVT_CDU_L_0
			else
			ipc.control(69985+cr,cg) -- EVT_CDU_L_NEXT_PAGE
			end
		end
	ipc.sleep(1000)
	ipc.control(69966,cg) -- EVT_CDU_L_R1
	--end
    ipc.sleep(500)
	ipc.control(69632+14505,FL*100)	
	ipc.sleep(500)
    FR = FR + cont + AT
    FR = math.ceil(FR/100)/10
    ipc.sleep(1000)
    f=FR
    f = tostring(f)
	lont =string.len(f)
	for i = 1, lont do
		cr = string.sub(f,i,i)
		cr = tonumber(cr)
		if cr ~= nil then
		ipc.sleep(200)
			if cr==0 then
			ipc.control(69996,cg)
			else
			ipc.control(69985+cr,cg)
			end
		else
		ipc.sleep(200)
		ipc.control(69995,cg)
		end
	end
	ipc.sleep(1000)
	ipc.control(69963,cg)
    ipc.sleep(500)
    ipc.control(69996,cg)
    ipc.sleep(500)
    ipc.control(69970,cg)
    ipc.sleep(1000)
    ipc.control(69971,cg) --Thrust Limit
    ipc.sleep(500)
    if pp[4] == 0 then ipc.control(69961,cg) dt="no derated Take-off" dt1 = " TO "
    elseif pp[4] == 1 then ipc.control(69962,cg) dt="10% derated Take-off" dt1 = " D-TO1 "
    elseif pp[4] == 2 then ipc.control(69963,cg) dt="20% derated Take-off" dt1 = " D-TO2 " end
    ipc.sleep(500)
	ipc.set("dt1",dt1)
	ipc.writeUW(0x66FC,pp[4]*100)
    if pp[3] ~= nil then
		if dt1 == " TO " then dt1 = " D-TO " dt = "derated Take-off" end
    dt = dt.." and "..pp[3].." degrees assumed temperature."
	dt1 = dt1.."+"..pp[3].."C"
	ipc.set("dt1",dt1)
	ipc.writeUW(0x66FC,(pp[4]*100)+pp[3])
    f=pp[3]
    f = tostring(f)
	lont =string.len(f)
		for i = 1, lont do
			cr = string.sub(f,i,i)
			cr = tonumber(cr)
			ipc.sleep(200)
			if cr==0 then
			ipc.control(69996,cg)
			else
			ipc.control(69985+cr,cg)
			end
		end
	ipc.sleep(200)
	ipc.control(69960,cg)
    end
    pist1 = pp[1]
    long = string.len(pist1)
    if long == 2 then
    car1 = string.sub(pist1,1,1)
    car2 = string.sub(pist1,2,2)
    car3 = ""
    elseif long == 3 then
    car1 = string.sub(pist1,1,1)
    car2 = string.sub(pist1,2,2)
    car3 = string.sub(pist1,3,3)
    end
    if car3 == "L" then car3 = " Left"
    elseif car3 == "R" then car3 = " Right"
    elseif car3 == "C" then car3 = " Center"
    end
    LisCeci("Trust limit for runway "..car1.." "..car2.." "..car3.." with "..dt)
	ipc.log("Trust limit for runway "..car1.." "..car2.." "..car3.." with "..dt.." FMC_Init actions.lua.")
    ipc.sleep(6000)
    ipc.control(69971,cg) -- Take-Off
    ipc.sleep(500)
    LisCeci("Flaps "..pp[2].." selected for take-off.")
	ipc.log("Flaps "..pp[2].." selected for take-off. FMC_Init actions.lua.")
    ipc.writeUB(0x66E8,pp[2])
    f=pp[2]
    f = tostring(f)
	lont =string.len(f)
	for i = 1, lont do
		cr = string.sub(f,i,i)
		cr = tonumber(cr)
		ipc.sleep(200)
		if cr==0 then
		ipc.control(69996,cg)
		else
		ipc.control(69985+cr,cg)
		end
	end
	ipc.sleep(200)
	ipc.control(69960,cg)
    ipc.sleep(200)
	ipc.control(69962,cg)
    ipc.sleep(200)
	ipc.control(69962,cg)
	ipc.sleep(200)
	ipc.control(69632+14502,pp[5])
    ipc.sleep(1500)
    ipc.control(69973,cg)
    ipc.sleep(500)
    for i=1,10 do
	cr =(string.byte(NV,i))
		if cr >= 65 and cr <= 90 then
		cr = cr - 64
		ipc.control(69997+cr,cg)
		elseif cr >= 48 and cr <= 57 then
		cr = cr - 48
			if cr == 0 then
			ipc.control(69996,cg)
			else
			ipc.control(69985+cr,cg)
			end
		end
	ipc.sleep(200)
	end
	ipc.control(69967,cg)
    ipc.sleep(500)
    ipc.control(69971,cg)
    LisCeci("Captain, you can adjust the trim.")
	ipc.log("Captain, you can adjust the trim. FMC_Init actions.lua.")
	ipc.keypressplus(54,10,4) -- Vue PFD CTRL + 6 MODIF Francis
    ipc.sleep(17000) -- je passe de 500 à 17000 le temps de régler le trim
	ipc.keypressplus(100,10,4) -- ajout Francis pour repasser en vue "moi" CTRL + NUM 4
    --ipc.sleep(2000) -- là en origine mais je supprime car j'ai rajouté du temps entre les vues  
    ipc.sleep(1000)
    ext.focus(0)
	LegsRdata ()
	ipc.sleep(3000)
	ipc.control(69973,cg)
	ipc.sleep(750)
	ipc.control(69971,cg)
end
function PosInit ()	
	LAT = ipc.readDBL(0x6010)
	LON = ipc.readDBL(0x6018)
	if LAT > 0 then latform ="N" else latform ="S" end
	LAT1 = math.abs(LAT)
	latform1 = math.floor(LAT1)
	latform2 = (LAT1 - latform1)*60
	latform2 = math.floor((latform2*10)+0.5)/10
	latform2 = string.format("%.1f",latform2)
	latform2 = tostring(latform2)
	--if string.find(latform2,".")==nil then latform2 =latform2..".0" end
	if string.len(latform2)==3 then latform2="0"..latform2 end
	latform1 = tostring(latform1)
	if string.len(latform1)==1 then latform1="0"..latform1 end
	latform = latform..latform1..latform2
	if LON > 0 then lonform ="E" else lonform ="W" end
	LON1 = math.abs(LON)
	lonform1 = math.floor(LON1)
	--ipc.log(lonform1)
	lonform2 = (LON1 - lonform1)*60
	--ipc.log(lonform2)
	lonform2 = math.floor((lonform2*10)+0.5)/10
	lonform2 = string.format("%.1f",lonform2)
	lonform2 = tostring(lonform2)
	--ipc.log(lonform2)
	--if string.find(lonform2,".")==nil then lonform2 =lonform2..".0" end
	if string.len(lonform2)==3 then lonform2="0"..lonform2 end
	lonform1 = tostring(lonform1)
	if string.len(lonform1)==1 then lonform1="00"..lonform1
	elseif string.len(lonform1)==2 then lonform1="0"..lonform1 end
	lonform = lonform..lonform1..lonform2
	FMCform = latform..lonform
	ipc.log(FMCform)
	ipc.sleep(200)
	car1 = string.byte(string.sub(FMCform,1,1)) - 64
	ipc.log(car1.. " = Premier caractère du FMCform.")-- Francis
    car2 = string.byte(string.sub(FMCform,8,8)) - 64 
	ipc.log(car2.. " = Huitième caractère du FMCform.")-- Francis	
	ipc.control(69997+car1,cg)
	ipc.sleep(200)
	for i = 2, 5 do
		cr = string.sub(FMCform,i,i)
		cr = tonumber(cr)
		ipc.log(cr.. " = Valeur du 2ème caractère au 5 ème du FMCform.")-- Francis
		ipc.sleep(500)
		if cr==0 then
		ipc.control(69996,cg)-- EVT_CDU_L_0	
		else
		ipc.control(69985+cr,cg)
		end
	end	
	ipc.sleep(200)
	ipc.control(69995,cg)-- EVT_CDU_L_DOT
	cr = string.sub(FMCform,7,7)
	cr = tonumber(cr)
	ipc.log(cr.. " = Septième caractères du FMCform.")-- Francis
	ipc.sleep(200)
	if cr==0 then
	ipc.control(69996,cg)-- EVT_CDU_L_0	
	else
	ipc.control(69985+cr,cg)
	end
	ipc.sleep(200)
	ipc.control(69997+car2,cg)
	ipc.sleep(200)
	for i = 9, 13 do
		cr = string.sub(FMCform,i,i)
		cr = tonumber(cr)
		ipc.log(cr.. " = Valeur du 9ème caractère au 13ème du FMCform.")-- Francis
		ipc.sleep(500)
		if cr==0 then
		ipc.control(69996,cg)
		else
		ipc.control(69985+cr,cg)
		end
	end	
	ipc.sleep(200)
	ipc.control(69995,cg)
	cr = string.sub(FMCform,15,15)
	cr = tonumber(cr)
	ipc.log(cr.. " = 15eme caracteres du FMCform.")-- Francis
	ipc.sleep(200)
	if cr==0 then
	ipc.control(69996,cg)
	else
	ipc.control(69985+cr,cg)
	end	
end
function MAJFMC ()
    pist1 = pp[1+j1]
    long = string.len(pist1)
    if long == 2 then
    car1 = string.sub(pist1,1,1)
    car2 = string.sub(pist1,2,2)
    car3 = ""
    elseif long == 3 then
    car1 = string.sub(pist1,1,1)
    car2 = string.sub(pist1,2,2)
    car3 = string.sub(pist1,3,3)
    end
    if car3 == "L" then car3 = " Left"
    elseif car3 == "R" then car3 = " Right"
    elseif car3 == "C" then car3 = " Center"
    end
	LisCeci("Captain, I modify performance for takeoff runway "..car1.." "..car2.." "..car3)
	ipc.log("Captain, I modify performance for takeoff runway "..car1.." "..car2.." "..car3.." MAJFMC actions.lua.")
    ipc.keypressplus(54,10,4)--FRANCIS POUR VUE FMC ET FCTRL ND
	ipc.sleep(1500)
    ipc.control(69972,cg)
    ipc.sleep(1000)
    ipc.control(69965,cg)
    ipc.sleep(1000)
    ipc.control(69963,cg)
    ipc.sleep(1000)
    if pp[4+j1] == 0 then ipc.control(69961,cg) dt="no derated Take-off" dt1 = " TO "
    elseif pp[4+j1] == 1 then ipc.control(69962,cg) dt="10% derated Take-off" dt1 = " D-TO1 "
    elseif pp[4+j1] == 2 then ipc.control(69963,cg) dt="20% derated Take-off" dt1 = " D-TO2 " end
    ipc.sleep(500)
	ipc.set("dt1",dt1)
	ipc.writeUW(0x66FC,pp[4+j1]*100)
    if pp[3+j1] ~= nil then
		if dt1 == " TO " then dt1 = " D-TO " dt = "derated Take-off" end
    dt = dt.." and "..pp[3+j1].." degrees assumed temperature."
	dt1 = dt1.."+"..pp[3+j1].."C"
	ipc.set("dt1",dt1)
	ipc.writeUW(0x66FC,(pp[4+j1]*100)+pp[3+j1])
    f=pp[3+j1]
    f = tostring(f)
	lont =string.len(f)
		for i = 1, lont do
			cr = string.sub(f,i,i)
			cr = tonumber(cr)
			ipc.sleep(200)
			if cr==0 then
			ipc.control(69996,cg)
			else
			ipc.control(69985+cr,cg)
			end
		end
	ipc.sleep(1000)
	ipc.control(69960,cg)
    end
    LisCeci("Trust limit with "..dt)
	ipc.log("Trust limit with "..dt.." MAJFMC actions.lua.")
    ipc.sleep(5000)
    ipc.control(69971,cg) -- Take-Off
    ipc.sleep(500)
    LisCeci("Flaps "..pp[2+j1].." selected for take-off.")
	ipc.log("Flaps "..pp[2+j1].." selected for take-off. MAJFMC actions.lua.")
    ipc.writeUB(0x66E8,pp[2+j1])
    f=pp[2+j1]
    f = tostring(f)
	lont =string.len(f)
	for i = 1, lont do
		cr = string.sub(f,i,i)
		cr = tonumber(cr)
		ipc.sleep(200)
		if cr==0 then
		ipc.control(69996,cg)
		else
		ipc.control(69985+cr,cg)
		end
	end
	ipc.sleep(1000)
	ipc.control(69960,cg)
    if ipc.readUB(0x6C1C) == 1 then
    ipc.sleep(1000)
	ipc.control(69966,cg)
	ipc.sleep(500)
	ipc.control(69967,cg)
	ipc.sleep(500)
	ipc.control(69968,cg)
	ipc.sleep(100)				
	v2 = ipc.readUB(0x6C24)
	checktrim = 1
	ipc.set("checktrim",checktrim)
		if v2 > 0 then ipc.control(69632+14502,v2) else VspeedUn() end
	end
	if ipc.readUB(0x66C3)>1 then
	LisCeci("Captain, you should check the trim setting.")
	ipc.log("Captain, you should check the trim setting. MAJFMC actions.lua.")
	--ipc.control(69947,2)
	ipc.sleep(500)
	--ipc.control(69863, 1)
	ipc.sleep(500)
	--ipc.control(69874, 1)
	checktrim = nil
	ipc.set("checktrim",checktrim)
	end
end
function VspeedUn()
	TA = ipc.readDBL(0x34A8)
	tas = ipc.readUW(0x66FC)
	as = tostring(tas)
    if tas ~= 0 then
		if tas < 100 then 
		dt = 0 
		as = tonumber(string.sub(as,1,2)) 
		else 
		dt = tonumber(string.sub(as,1,1)) 
		as = tonumber(string.sub(as,2,3))
		end	
		if dt > 0 then
			dt = dt - 1
			ipc.control(70027,cg)--Clr
			ipc.sleep(100)
			ipc.control(70027,131072)--Clr release
			ipc.sleep(100)
			ipc.control(69971,cg) -- THLimit
			ipc.sleep(500)
			ipc.writeUW(0x66FC,dt*100)
				if dt == 0 then ipc.control(69961,cg) dt="no derated Take-off" dt1 = " TO "
				elseif dt == 1 then ipc.control(69962,cg) dt="10% derated Take-off" dt1 = " D-TO1 "
				elseif dt == 2 then ipc.control(69963,cg) dt="20% derated Take-off" dt1 = " D-TO2 " end
				ipc.sleep(500)
				ipc.set("dt1",dt1)
			if as ~= 0 then
				if dt1 == " TO " then dt1 = " D-TO " dt = "derated Take-off" end
			dt = dt.." and "..as.." degrees assumed temperature."
			dt1 = dt1.."+"..as.."C"
			ipc.set("dt1",dt1)
			tas = ipc.readUW(0x66FC) 
			ipc.writeUW(0x66FC,tas+as)
			f=as
			f = tostring(f)
			lont =string.len(f)
				for i = 1, lont do
					cr = string.sub(f,i,i)
					cr = tonumber(cr)
					ipc.sleep(200)
					if cr==0 then
					ipc.control(69996,cg)
					else
					ipc.control(69985+cr,cg)
					end
				end
			ipc.sleep(200)
			ipc.control(69960,cg)
			end
			ipc.sleep(500)
			ipc.control(69971,cg) -- Take-Off
			ipc.sleep(500)
			ipc.control(69966,cg)
			ipc.sleep(500)
			ipc.control(69967,cg)
			ipc.sleep(500)
			ipc.control(69968,cg)
			ipc.sleep(100)				
			v2 = ipc.readUB(0x6C24)
				if v2 > 0 then ipc.control(69632+14502,v2) else VspeedUn() end
		elseif as ~= 0 and as-10 > TA then
			as = as - 10
			ipc.control(70027,cg)--Clr
			ipc.sleep(100)
			ipc.control(70027,131072)--Clr release
			ipc.sleep(100)
			ipc.control(69971,cg) -- THLimit
			ipc.sleep(500)
			ipc.writeUW(0x66FC,dt*100)
				if dt == 0 then ipc.control(69961,cg) dt="no derated Take-off" dt1 = " TO "
				elseif dt == 1 then ipc.control(69962,cg) dt="10% derated Take-off" dt1 = " D-TO1 "
				elseif dt == 2 then ipc.control(69963,cg) dt="20% derated Take-off" dt1 = " D-TO2 " end
			ipc.sleep(500)
				if dt1 == " TO " then dt1 = " D-TO " dt = "derated Take-off" end
			dt = dt.." and "..as.." degrees assumed temperature."
			dt1 = dt1.."+"..as.."C"
			ipc.set("dt1",dt1)
			tas = ipc.readUW(0x66FC)
			ipc.writeUW(0x66FC,tas+as)
			f=as
			f = tostring(f)
			lont =string.len(f)
				for i = 1, lont do
					cr = string.sub(f,i,i)
					cr = tonumber(cr)
					ipc.sleep(200)
					if cr==0 then
					ipc.control(69996,cg)
					else
					ipc.control(69985+cr,cg)
					end
				end
			ipc.sleep(200)
			ipc.control(69960,cg)
			ipc.sleep(500)
			ipc.control(69971,cg) -- Take-Off
			ipc.sleep(500)
			ipc.control(69966,cg)
			ipc.sleep(500)
			ipc.control(69967,cg)
			ipc.sleep(500)
			ipc.control(69968,cg)
			ipc.sleep(100)
			v2 = ipc.readUB(0x6C24)
				if v2 > 0 then ipc.control(69632+14502,v2) else VspeedUn() end
			else
			ipc.display("V-Speeds Unavailable! \nCorrection impossible!",0,10)
			end
	else
	ipc.display("V-Speeds Unavailable! \nCorrection impossible!",0,10)
    end
	ipc.set("checktrim",checktrim)
	checktrim = 2
end

function Logvol (inscr,code)
    HZ1 = ipc.readUB(0x023B)
	MZ1 = ipc.readUB(0x023C)
    HL1 = ipc.readUB(0x0238)
    ML1 = ipc.readUB(0x0239)
    SZ = ipc.readUB(0x023A)
    if code == "BO" then
    HBO=HZ1
    MBO=MZ1
    ipc.sleep(100)
    ipc.writeUB(0x66C8,MBO)
    ipc.sleep(100)
    ipc.writeUB(0x66C7,HBO)
    end
    if code == "dec" then
    HDC=HZ1
    MDC=MZ1
    ipc.sleep(100)
    ipc.writeUB(0x66C9,HDC)
    ipc.sleep(100)
    ipc.writeUB(0x66CA,MDC)
    end
    if code == "AT" then
    HAT=HZ1
    MAT=MZ1
    ipc.sleep(100)
    ipc.writeUB(0x66CB,HAT)
    ipc.sleep(100)
    ipc.writeUB(0x66CC,MAT)
    end
	if HZ1<10 then HZ1="0"..HZ1 end
	if HL1<10 then HL1="0"..HL1 end
	if MZ1<10 then MZ1="0"..MZ1 end
	if ML1<10 then ML1="0"..ML1 end
    if SZ<10 then SZ="0"..SZ end
    timestamp = HZ1..":"..MZ1..":"..SZ.."Z "..HL1..":"..ML1..":"..SZ.." loc  : "
    nomlog = ipc.get("nomlog")
    inscr = timestamp..inscr.."\n"
    file = io.open(nomlog, "a")
    file:write(inscr)
    file:close()
end
function Stat ()
    nbcaf = ipc.readUB(0x66C3)
    ipc.sleep(100)
    nbsw = ipc.readUB(0x66C4)
    ipc.sleep(100)
    nbsc = ipc.readUB(0x66C5)
    ipc.sleep(100)
    nbrc = ipc.readUB(0x66C6)
    ipc.sleep(100)
    HBO = ipc.readUB(0x66C7)
    ipc.sleep(100)
    MBO = ipc.readUB(0x66C8)
    ipc.sleep(100)
    HDC = ipc.readUB(0x66C9)
    ipc.sleep(100)
    MDC = ipc.readUB(0x66CA)
    ipc.sleep(100)
    HAT = ipc.readUB(0x66CB)
    ipc.sleep(100)
    MAT = ipc.readUB(0x66CC)
    ipc.sleep(100)
    HBI = ipc.readUB(0x66CD)
    ipc.sleep(100)
    MBI = ipc.readUB(0x66CE)
    ipc.sleep(100)
    --FuelA = ipc.readUW(0x66D1)/100
    ipc.sleep(100)
    --FuelD = ipc.readUW(0x66CF)/100
    ipc.sleep(100)
    hdv = HAT - HDC
    if hdv < 0 then hdv = 24 + hdv end
    mdv = MAT - MDC
    if mdv < 0 then mdv = 60 + mdv hdv = hdv - 1 end
    if mdv < 10 then mdv="0"..mdv end
    tempsdevol = "Durée de vol effective (Off - ON): "..hdv.."H"..mdv.."mn"
    hdv = HBI - HBO
    if hdv < 0 then hdv = 24 + hdv end
    mdv = MBI - MBO
    if mdv < 0 then mdv = 60 + mdv hdv = hdv - 1 end
    if mdv < 10 then mdv="0"..mdv end
    tempsdevolG = "Durée de vol globale (Bloc out - Bloc in): "..hdv.."H"..mdv.."mn"
    --carburant = FuelD - FuelA
    --carburant = "Fuel consommé: "..carburant.."T"
    --consh = hdv + (tonumber(mdv)/60)
    --consh = math.floor((FuelD - FuelA)*1000/consh)
    --consh = "Consommation horaire: "..consh.." Kg/H"
    inscr = "\n".."\n"..
            "------ Services à bord ------".."\n".."\n"..
            "Nombre de café servi à l'équipage    : "..nbcaf.."\n"..
            "Nombre de sandwich servi à l'équipage: "..nbsw.."\n"..
            "Nombre de service cabine             : "..nbsc.."\n"
    if nbrc ~= nil then
    inscr = inscr.."Nombre de repas chaud servi          : "..nbrc
    else
    inscr = inscr.."Nombre de repas chaud servi          : ".."0"
    end
    --inscr = inscr.."\n".."\n".."--------- STATISTIQUES ---------".."\n".."\n"..
            --tempsdevolG.."\n"..carburant
    nomlog = ipc.get("nomlog")
    file = io.open(nomlog, "a")
    file:write(inscr)
    file:close()
end
function DEC_HEX(Value)
	HexVal = string.format("%X", Value)  -- %X returns uppercase hex, %x gives lowercase letters
	HexVal = HexVal..""
	return (HexVal)
end
function Test_Plandevol ()
    ipc.log("Test FP. Test_Plandevol actions.lua.")
	file1 = Chemin
	tim = ipc.elapsedtime()
    s = 1
	while true do
		ipc.display("Attente plan de vol AS16 "..s.."s",1,2)
		if (file_exists(file1)) then break end
		ipc.sleep(1000)
        s=s+1
		if ipc.elapsedtime() - tim > 40000 then
		ipc.display("Nouveau chargement",1,2)
		PlnCreator ()
		ipc.sleep(2000)
		end
	end
	ipc.log("Temps de chargement :"..(math.floor((ipc.elapsedtime() - tim)/1000)).."s. Test Plandevol de l'actions.lua")
	ipc.sleep(1000)
	if pcall(lecture) then
	ipc.log("Lecture ok. Test Plandevol de l'actions.lua.")
	ipc.keypressplus(122,10,4)ipc.sleep(500)ext.run(env.."SimConnectW.exe")
	ipc.log("Lancement du SimConnectW.exe. Test Plandevol de l'actions.lua.")
	ipc.sleep(1500)
	ipc.keypress(52)
	ipc.sleep(1500)	
	ipc.writeUB(0x66EF,8)--transfert vers Sauvegarde auto Ecoute ATIS
	ipc.log("On passe l'offset 66EF à 8 pour aller dans le Sauvegarde auto pour changer la fréquence COM1. Test Plandevol de l'actions.lua.") -- Ajout Francis pour test.
	ipc.sleep(8000) -- ajout francis le temps au Sauvegarde de changer le COM1 et l'offset 034E
	ipc.readUW(0x034E) --ajout Francis pour initier le while ligne suivante.
	ipc.log("La valeur de l'offset est = "..ipc.readUW(0x034E).." Test Plandevol de l'actions.lua.") -- ajout Francis.
	    while ipc.readUW(0x034E) ~= 13975 do -- Ajout Francis pour éviter la superposition lecture ATIS et annonce plan de vol chargé.
	    ipc.display("Attente fin de lecture de l'ATIS.",1,1) --AJOUT FRANCIS
	    ipc.sleep(250) --AJOUT FRANCIS
		end --AJOUT FRANCIS
    ext.run(env.."ASMinV4.exe")
	ipc.log("Lancement du ASMinV4.exe. Test Plandevol de l'actions.lua.")
    ext.focus(0)
    ipc.sleep(2000) -- avec ma mofification au dessus while do plus besoin d'attendre 35000 de Patrick. Je le passe à 2000.
    file = io.open(file1, "r")
    METD = file:read ("*l")
    META = file:read ("*l")
	file:close()
    long = string.match(METD,"[=]%u+")
    icaoD = string.sub(long,2)
    long = string.match(META,"[=]%u+")
    icaoI = string.sub(long,2)
    --ipc.setdisplay (1920,0,200,120)
    ipc.display("Plan de vol pour "..icaoI.." chargé",1,8)
	ipc.sleep(100)
    ipc.writeSTR(0x66E3,icaoI,4)
    ipc.sleep(100)
	ipc.writeSTR(0x700A,icaoD,4)
    ipc.sleep(100)
    ici = icaoI
    city()
    coderadio()
    LisCeci("Flight plan for "..ici..":"..city1.." in use")
	ipc.log("Flight plan for "..ici..":"..city1.." in use. Test Plandevol de l'actions.lua.")
    tpv = 1
    metper = 0
    ipc.set("annon",1)
    ipc.sleep(8000)
    else	
	ipc.log("Erreur de lecture FP. Test Plandevol de l'actions.lua.")
    sound.play("CabinAlert")
    --ipc.setdisplay (1920,0,200,120)
    ipc.display ("PAS DE PLAN DE VOL DANS ASN\nNouvel essai dans 5s",15)
    metper = 1
    --PlnCreator ()
    ipc.sleep(5000)
	Test_Plandevol ()
    end
end
function lecture ()
	env = os.getenv("USERPROFILE")	
	Chemin = env.."\\AppData\\Roaming\\Hifi\\AS_P3Dv4\\Weather\\activeflightplanwx.txt"
	env = env.."\\Documents\\AutoIt\\"
	ipc.log("Lecture. Lecture actions.lua.")
    file1 = Chemin
	--if (file_exists(file1)) then
    file = io.open(file1, "r")
    METD = file:read ("*l")
    META = file:read ("*l")
	file:close()
    ipc.log(META..". Hifi\\AS_P3Dv4\\Weather\\activeflightplanwx.txt.")
    --long = string.match(METD,"[=]%u+")
    --icaoD = string.sub(long,2)
    long = string.match(META,"[=]%u+")
    icaoI1 = string.sub(long,2)
    --ipc.log(icaoI1)
    Z = string.match(META,"%d+[Z]")
    --ipc.log(Z)
    Z = string.sub(Z,1,4)*2
    --ipc.log(Z)
    --end
end
function M_a_J_Plandevol ()
    ipc.log("MAJ. MaJ Plandevol actions.lua et on part dans la fonction PlnCreator actions.lua pour créer le Encours.PLN.")    
    PlnCreator ()    
    ipc.sleep(1000)
    annon = ipc.get("annon")
    if annon > 0 then
		while true do
			if pcall(lecture) then
			ipc.log("Lecture ok. MaJ Plandevol actions.lua.")
			break
			else
			ipc.log("Erreur de lecture MAJ. MaJ Plandevol actions.lua. Attente 2s.")
			ipc.sleep(2000)			
			end
		end
    icaoI = ipc.readSTR(0x66E3,4)
    if icaoI1 ~= icaoI then
    ipc.writeSTR(0x66E3,icaoI1,4)
    ipc.sleep(100)
	file = io.open("Transitions.dat", "r")    
		--ipc.log(icaoI)
		for n=1 ,12936 do
		icao2 = file:read(23)
		icao1 = string.sub(icao2,1,4)
			if icao1 == icaoI then break end
		end		
		file:close()
	TA = string.sub(icao2,6,10)
	TA = tonumber(TA)
	TLevel = string.sub(icao2,12,16)
	TLevel = tonumber(TLevel)
	AltT = string.sub(icao2,18,22)
	AltT = tonumber(AltT)
	ipc.writeSW(0x66DA,AltT)
	ipc.sleep(100)
    Parkpref ()
    ipc.set("annon",2)
    ipc.sleep(100)
    end
    end
	AG =  ipc.readUB (0x0366)
	if AG == 0 then ipc.writeUB(0x66DC,2) end
end
function PlnCreator ()
    sit1 = ipc.readSTR(0x1000,255)
    long = string.find(sit1,"les\\")
    if long == nil then
    long = string.find(sit1,"r X\\")
    end
    sit=string.sub(sit1,1,long+3)
    sit1 = sit.."WX.PLN"
    sit2 = sit.."Vol_en_cours\\Encours.PLN"
    ext.run(env.."PlnV4.exe")	
	ipc.log("Lancement du PlnV4.exe pour refaire le WX.PLN du v3 Files et le Encours.PLN du Vol en Cours. PlnCeator actions.lua.")
    PLN = sit2
    ipc.sleep(100)
    ipc.writeSTR(0x0130,PLN.."")
    ipc.sleep(4000)
	nomt="Route"
	ipc.writeSTR(0x3F04,nomt.."")
    ipc.writeUB(0x3F00,1)
	ipc.writeUB(0x66E7,1)
end
function Save ()
    ipc.control(66508,402)-- PATRICK RENTRE DEPORTEES 402 420 EN ID CLOSE 66508 = PANEL_ID_CLOSE CDU Left
    ipc.control(66508,420)-- 66508 = PANEL_ID_CLOSE CDU Right
    ipc.control(66508,414)-- 66508 = PANEL_ID_CLOSE Zoomed Right Inboard DU
    ipc.control(66508,415)-- 66508 = PANEL_ID_CLOSE Zoomed Right Outboard DU
	ext.run(env.."View.exe")
	ipc.log("Lancement du View.exe. Save actions.lua.")
    ipc.sleep(1000)
    FSXchem=ipc.get("FSXchem")
    --os.remove(FSXchem.."Linda777old.log")
    --os.rename(FSXchem.."Linda777.log",FSXchem.."Linda777old.log")
    inscr = "Situation sauvegardée."
    Logvol (inscr)
	ipc.log(inscr)--AJOUT FRANCIS
    Stat ()
    Chemlog=ipc.get("Chemlog")
	nomlog3 = Chemlog.."NmDist.log"
    infile = io.open(nomlog3, "r")
    instr = infile:read("*a")
    infile:close()
    nomlog = ipc.get("nomlog")
    outfile = io.open(nomlog, "a")
    outfile:write("\n\n"..instr)
    outfile:close()
    nomlog2 = ipc.get("nomlog2")
    infile = io.open(nomlog2, "r")
    instr = infile:read("*a")
    infile:close()
    nomlog = ipc.get("nomlog")
    outfile = io.open(nomlog, "a")
    outfile:write("\n\n"..instr)
    outfile:close()
    os.remove(nomlog3)
    os.remove(nomlog2)
    os.remove(Chemlog.."Linda777.log")
    os.remove(Chemlog.."777lua.log")
    os.remove(Chemlog.."NmDistSav.log")
    icaoI = ipc.readSTR(0x66E3,4)
    icaoD = ipc.readSTR(0x700A,4)
    os.rename(Chemlog.."pfpx2.txt",Chemlog.."pfpx"..icaoD..icaoI..".txt")
    sit2 = ipc.get("sit2")
    if fin == 1 then
        if typ == 1 then
        nomt="777_300 Last"
        else
        nomt="777 Last"
        end
	ICAO1 ()
	nomt = nomt.."_"..ici1
    ipc.writeSTR(0x3F04,nomt .."") -- Write the file name for the FLT+WX file you wish to Load or Save.
    ipc.writeUB(0x3F00,1) -- To load or save a Flight (.FLT). 1 to save the flight/situation with no description.
	sit1 = ipc.readSTR(0x1000,255)
    long = string.find(sit1,"les\\")
    if long == nil then
    long = string.find(sit1,"r X\\")
    end
    sit=string.sub(sit1,1,long+3)
	nomt = sit..nomt
	DST = ipc.readSW(0x0246)/60*-1 -- Local time offset from Zulu (minutes). +ve = behind Zulu, –ve = ahead.
	file = io.open(nomt..".UTC", "w+")
	file:write(DST)
	file:close()
    else
    nom1 = "FRC"
    if nm == nil then nm = 1 else nm=nm+1 end
    nomt = nom1.. nm
    ipc.writeSTR(0x3F04,nomt .."") -- Write the file name for the FLT+WX file you wish to Load or Save.
    ipc.writeUB(0x3F00,1) -- To load or save a Flight (.FLT). 1 to save the flight/situation with no description.
    end
	ipc.sleep(2000)
	ext.run(env.."P3DFinV4.exe")
	ipc.log("Lancement du P3DFinV4.exe. Save actions.lua.")
end
function Enregistrement ()
    if typ == 1 then
    nomt="777_300_Test"
    else
    nomt="777_200_Test"
    end       
    Sauvegarde ()    
        ipc.writeUB(0x66FF,2)
		while ipc.readUB(0x66FF) ~= 0 do
		ipc.sleep(10)
		end
		ipc.writeUB(0x66FF,3)
		while ipc.readUB(0x66FF) ~= 0 do
		ipc.sleep(10)
		end
    ipc.writeSTR(0x3F04,nomt .."") -- Write the file name for the FLT+WX file you wish to Load or Save.
    ipc.writeUB(0x3F00,1) -- To load or save a Flight (.FLT). 1 to save the flight/situation with no description.
	ipc.sleep(250)
    ext.run(env.."SauvetestV4.exe")
	ipc.log("Lancement du SauvetestV4.exe. Enregistrement actions.lua.")
end
function Sauvegarde ()
    Mod = ipc.get("Mod")
    pbk = ipc.get("pbk")
    RW = ipc.readUB(0x7003)
    stage = ipc.readUB(0x7001)
    dem = ipc.readUB(0x7000)
    nomlog = ipc.get("nomlog")
    nomlog2 = ipc.get("nomlog2")
    icaoI = ipc.readSTR(0x66E3,4)
    icaoD = ipc.readSTR(0x700A,4)
    DP = ipc.readUB(0x7004)
    voxatc = 0
    kml = ipc.get("kml")
    Pistpref=ipc.readSTR(0x700E,3)
    lonpist = ipc.readUW(0x66D1)
    lat2 = ipc.readDBL(0x7300)
    lon2 = ipc.readDBL(0x7308)
    PMDG = ipc.readSTR(0x7005,5)
    nomvar1 = {"Mod","pbk","dem","stage","mont","FRC","fin","baro","RW",
            "nogsx","tp","metper","tpv","chkl","prop","Chemin","FSXchem",
            "typ","AES","cd","cg","nomlog","nomlog2","icaoI","icaoD",
            "Chemlog","Chemsav","DP","voxatc","kml","Pistpref","lonpist","lat2","lon2","gmt","PMDG","Lastwp"}
    valvar1 = {Mod,pbk,dem,stage,mont,FRC,fin,baro,RW,nogsx,tp,metper,
            tpv,chkl,prop,Chemin,FSXchem,typ,AES,cd,cg,nomlog,
            nomlog2,icaoI,icaoD,Chemlog,Chemsav,DP,voxatc,kml,Pistpref,lonpist,lat2,lon2,gmt,PMDG,Lastwp}
    local count = 0
    for _ in pairs(nomvar1) do count = count + 1 end
    _loggg('[USER] Linda777.log opening...')
    file = io.open(Chemlog.."Linda777.log", "w+")    --awg
    for i = 1 , count do
        if valvar1[i] == nil then valvar1[i] = "nil" end
        file:write(valvar1[i])
        file:write("\n")
    end
	file:close()
    ipc.log("Sauvegarde Linda N°"..sav1)
end
function Restauration ()
    nomvar1 = {"Mod","pbk","dem","stage","mont","FRC","fin","baro","RW",
            "nogsx","tp","metper","tpv","chkl","prop","Chemin","FSXchem",
            "typ","AES","cd","cg","nomlog","nomlog2","icaoI","icaoD",
            "Chemlog","Chemsav","DP","voxatc","kml","Pistpref","lonpist","lat2","lon2","gmt","PMDG","Lastwp"}
    local count = 0
    for _ in pairs(nomvar1) do count = count + 1 end
    file = io.open(Chemlog.."Linda777.log", "r")
    for i = 1 , count do
    nomvar1[i] = file:read ("*l")
        if tonumber(nomvar1[i]) ~= nil then
        nomvar1[i] = tonumber(nomvar1[i])
        elseif nomvar1[i] == "nil" then
        nomvar1[i] = nil
        end
    end
	file:close()
	Mod = nomvar1[1]
	pbk = nomvar1[2]
	dem = nomvar1[3]
	stage = nomvar1[4]
	mont = nomvar1[5]
	FRC = nomvar1[6]
	fin = nomvar1[7]
	baro = nomvar1[8]
	RW = nomvar1[9]
	nogsx = nomvar1[10]
	tp = nomvar1[11]
	metper = nomvar1[12]
	tpv = nomvar1[13]
	chkl = nomvar1[14]
	prop = nomvar1[15]
	Chemin = nomvar1[16]
	FSXchem = nomvar1[17]
	typ = nomvar1[18]
	AES = nomvar1[19]
	cd = nomvar1[20]
	cg = nomvar1[21]	
	nomlog = nomvar1[22]
	nomlog2 = nomvar1[23]
	icaoI = nomvar1[24]
	icaoD = nomvar1[25]
    Chemlog = nomvar1[26]
    Chemsav = nomvar1[27]
    DP = nomvar1[28]
    voxatc = nomvar1[29]
    kml = nomvar1[30]
    Pistpref = nomvar1[31]
    lonpist = nomvar1[32]
    lat2 =  nomvar1[33]
    lon2 =  nomvar1[34]
    gmt =  nomvar1[35]
    PMDG =  nomvar1[36]
    Lastwp =  nomvar1[37]
    ipc.set("PMDG",PMDG)
    ipc.writeDBL(0x7300,lat2)
    ipc.writeDBL(0x7308,lon2)
    ipc.set("Mod",Mod)
    ipc.sleep(10)
    ipc.set("pbk",pbk)
    ipc.sleep(10)
    ipc.writeUB(0x7001,stage)
    ipc.sleep(10)
    ipc.set("nomlog",nomlog)
    ipc.sleep(10)
    ipc.set("nomlog2",nomlog2)
    ipc.sleep(10)
    ipc.writeSTR(0x66E3,icaoI,4)
    ipc.sleep(10)
	ipc.writeSTR(0x700A,icaoD,4)
    ipc.sleep(10)
	ipc.writeUB(0x7000,dem)
    ipc.sleep(10)
    ipc.set("Chemlog",Chemlog)
    ipc.sleep(10)
    ipc.set("Chemsav",Chemsav)
    ipc.sleep(10)
    ipc.writeUB(0x7004,DP)
    ipc.sleep(10)
    voxatc = 0
    ipc.sleep(10)
    ipc.set("kml",kml)
    ipc.sleep(10)
    ipc.writeSTR(0x700E,Pistpref,3)
    ipc.sleep(10)
    ipc.writeUW(0x66D1,lonpist)
    imp = 0
	ipc.writeUB(0x7002,0)
    os.remove(Chemlog.."Linda777.log")
end
function Taxi ()
    if ipc.readLvar("switch_290_a") == 10 then
    DSP_INDB_DSPL_R_inc ()
    end
    if ipc.readLvar("switch_315_a") == 10 then
    DSP_INDB_DSPL_L_inc ()
    PMDG_Select_L_Inbnd ()
    PMDG_Disp_Gear ()
    elseif  ipc.readLvar("switch_315_a") == 20 then
    PMDG_Select_L_Inbnd ()
    PMDG_Disp_Gear ()
    end
end
function CDU3 ()
    if prop == "Patrick" then
    Press_CENTRAL_CDU_MENU ()
    ipc.sleep(1500)
    Press_CENTRAL_CDU_LSK5R ()
    ipc.sleep(1000)
    Press_CENTRAL_CDU_LSK1L ()
    ipc.sleep(1000)
    Press_CENTRAL_CDU_LSK3L ()
    else
    Press_CENTRAL_CDU_MENU ()
    ipc.sleep(1500)
    Press_CENTRAL_CDU_LSK6R ()
    ipc.sleep(1000)
    Press_CENTRAL_CDU_LSK5R ()
    end
end
function Situation_test()
    ipc.log("On part dans la fonction Situation test. Situation test actions.lua.") -- Balise Francis	
    sit = ipc.readSTR(0x3f04,255)
    sit1 = ipc.readSTR(0x1000,255)-- OFFSET CHEMIN SAUVEGARDE DES VOLS DONC V3 FILES
    ipc.log("Linda :"..sit1.." Situation_test actions.lua.")
    long = string.find(sit1,"\\Doc")
    long1 = string.sub(sit1,1,long-1)
    prop = string.sub(sit1,10,long-1)
    ipc.log(prop)
    ipc.set("prop",prop)
	if ipc.readUB(0x3308) == 10 then --FS version, as determined by FSUIPC. P3D=10
    Chemin = long1.."\\AppData\\Roaming\\Hifi\\AS_P3Dv4\\Weather\\activeflightplanwx.txt"
	else
	Chemin = long1.."\\AppData\\Roaming\\Hifi\\AS_P3Dv4\\Weather\\activeflightplanwx.txt"
	end
    ipc.log(Chemin)
    ipc.sleep(100)
    fl = string.find(sit,"_Test")
    fl1 = string.find(sit,"_Sauv")
    if fl ~= nil then
        ipc.writeUB(0x66EF,2)
    elseif fl1 ~= nil then
        ipc.writeUB(0x66EF,1)
    end
end
function ParseCSVLine (line,sep)
    line = pist[i]
	res = {}
	local pos = 1
	while true do
		local c = string.sub(line,pos,pos)
		if (c == "") then break end
		local startp,endp = string.find(line,sep,pos)
			if (startp) then
				table.insert(res,string.sub(line,pos,startp-1))
				pos = endp + 1
			else
				-- no separator found -> use rest of string and terminate
				table.insert(res,string.sub(line,pos))
				break
		end
	end
    nompist[i] = res[2]
    lonpist[i] = tonumber(res[3])
    Latpist[i] = tonumber(res[6])
    Longpist[i] = tonumber(res[7])
    Hdgpist[i] = tonumber(res[8])
end
function VoxParse (line,sep)
    line = pistvox[i]
	res = {}
	local pos = 1
	while true do
		local c = string.sub(line,pos,pos)
		if (c == "") then break end
		local startp,endp = string.find(line,sep,pos)
			if (startp) then
				table.insert(res,string.sub(line,pos,startp-1))
				pos = endp + 1
			else
				-- no separator found -> use rest of string and terminate
				table.insert(res,string.sub(line,pos))
				break
		end
	end
    nompistvox[i] = res[2]
    lonpistvox[i] = tonumber(res[3])
    Latpistvox[i] = tonumber(res[6])
    Longpistvox[i] = tonumber(res[7])
    Hdgpistvox[i] = tonumber(res[8])
end
function ParseCSV (line,sep)
    --ipc.log(line)
	res = {}
    sep = ","
	local pos = 1
	while true do
		local c = string.sub(line,pos,pos)
		if (c == "") then break end
		local startp,endp = string.find(line,sep,pos)
			if (startp) then
				table.insert(res,string.sub(line,pos,startp-1))
				pos = endp + 1
			else
				-- no separator found -> use rest of string and terminate
				table.insert(res,string.sub(line,pos))
				break
		end
	end
   return res
end
function pistservice ()
    AG =  ipc.readUB (0x0366)
    if AG == 1 then
        ici = ipc.readSTR(0x700A,4)
        QNH_DEP ()
        dec = 1        
    else
        Metardest()
        dec = 0        
    end
	pist = {}
	nompist = {}
	pistpref = {}
	lonpref = {}
	lonpist = {}
	angpref = {}	
    Latpist = {}
    Longpist = {}
    Hdgpist = {}
	i = 0
	g = 0	
	file2 = "Pistes.dat"
	file = io.open(file2, "r")
    sep = file:read ("*l")
        if string.find(sep,";") == nil then
        sep = ","
        else
        sep = ";"
        end
        file:close()
        local ctr = 0
        for _ in io.lines'Pistes.dat' do
        ctr = ctr + 1
        end
        file = io.open(file2, "r")
        for n=1 , ctr do
            piste = file:read ("*l")
            if i>=1 and string.sub(piste,1,4) ~= ici then
            break
            else
                if string.sub(piste,1,4)== ici then
                    if dec == 1 and (string.find(piste,";CT;") or string.find(piste,",CT,")) == nil then
                    i= i+1
                    pist[i] = piste
                    elseif dec == 0  and (string.find(piste,";CL;") or string.find(piste,",CL,")) == nil then
                    i= i+1
                    pist[i] = piste
                    end
                    if i >= 1 then
                    --ipc.log (pist[i].." "..i.. " "..n)
                    ParseCSVLine (line,sep)
						if lonpist[i] < 5000 then i = i-1 end
                    end
                end
            end
        end
    if i > 0 then		
        DV = 0        
        if winddir == "direction variable" then
        DV = 1
        else
        magdev = ipc.readUW(0x02A0)*360/65536
            if magdev>180 then magdev = magdev - 360 end
            --ipc.log("Mag Dev = "..magdev)
            winddir = math.floor(winddir - magdev + 0.5)
            if winddir > 360 then winddir = winddir - 360 end
            if winddir <= 0 then winddir = winddir + 360 end
            --ipc.log("win dir "..winddir)
        end
		minang = 90
		AngPist ()
		--ipc.log("g="..g)
		if g > 1 then --Tri--
		permut = 0
		 while permut == 0 do
		 --ipc.log("permut "..permut)
		 permut = 1
			for j=1,g-1 do
				--ipc.log("j="..j)
				if angpref[j]>angpref[j+1] then
				--ipc.log("angpref[j]="..angpref[j])
				--ipc.log("angpref[j+1]="..angpref[j+1])
				temp = lonpref[j]
				lonpref[j]=lonpref[j+1]
				lonpref[j+1]=temp
				temp = pistpref[j]
				--ipc.log("temp "..j.." ="..temp)
				pistpref[j]=pistpref[j+1]
				pistpref[j+1]=temp
				--ipc.log("temp "..j.." ="..pistpref[j])
				temp = angpref[j]
				angpref[j]=angpref[j+1]
				angpref[j+1]=temp
				temp = Latpist[j]
				Latpist[j]=Latpist[j+1]
				Latpist[j+1]=temp
				temp = Longpist[j]
				Longpist[j]=Longpist[j+1]
				Longpist[j+1]=temp
				temp = Hdgpist[j]
				Hdgpist[j]=Hdgpist[j+1]
				Hdgpist[j+1]=temp
				permut = 0
				end
			end
		 end
		permut = 0
		while permut == 0 do
		 --ipc.log("permut "..permut)
		 permut = 1
			for j=1,g-1 do
				--ipc.log("j="..j)
				if lonpref[j]<lonpref[j+1] then
				temp = lonpref[j]
				lonpref[j]=lonpref[j+1]
				lonpref[j+1]=temp
				temp = pistpref[j]
				--ipc.log("temp "..j.." ="..temp)
				pistpref[j]=pistpref[j+1]
				pistpref[j+1]=temp
				--ipc.log("temp "..j.." ="..pistpref[j])
				temp = Latpist[j]
				Latpist[j]=Latpist[j+1]
				Latpist[j+1]=temp
				temp = Longpist[j]
				Longpist[j]=Longpist[j+1]
				Longpist[j+1]=temp
				temp = Hdgpist[j]
				Hdgpist[j]=Hdgpist[j+1]
				Hdgpist[j+1]=temp
				permut = 0
				end
			end
		 end
		end        
		if g > 0 then
		wga = 0
		LisPiste ()
		end
	else
	ipc.display("Pas de pistes trouvées pour "..ici,0,10)
	end
end
function AngPist ()
	for j= 1 ,i do
		if DV == 0 then
		pref=math.abs(Hdgpist[j] - winddir)
		else
		pref = 0
		end
	--ipc.log("pist et pref "..nompist[j].." "..pref)
		if pref > 180 then pref = math.abs(pref - 360) end
		if pref <= minang then
		g=g+1
		angpref[g] = pref
		pistpref[g] = nompist[j]
		lonpref[g] = lonpist[j]
		Latpist[g] = Latpist[j]
		Longpist[g] = Longpist[j]
		Hdgpist[g] = Hdgpist[j]
		--ipc.log ("pref:"..pistpref[g])
		--ipc.log ("long:"..lonpref[g])
		--ipc.log ("Ang:"..angpref[g])
		end
	end
	if g == 0 then 
	minang = minang + 30
	AngPist ()
	end
end
function Metardest ()
    file1 = Chemin
	if metper == 0  then
		while true do
			if pcall(lecture) then
			ipc.log("Lecture ok. Metardest de l'actions.lua.")
			break
			else
			ipc.log("Erreur de lecture. Metardest de l'actions.lua. Attente 2s.")
			ipc.sleep(2000)			
			end
		end
	ipc.sleep(150)
    file = io.open(file1, "r")
    MET = file:read ("*l")
    MET = file:read ("*l")
	file:close()
	n = string.find(MET,"TEMPO")
	if n ~= nil then
	MET = string.sub(MET,1,n)
	end
    long = string.match(MET,"[=]%u+")
    long = string.sub(long,2)
	--ipc.log(long)
    ici = long
    QNHr = string.match(MET,"[Q]%d+")
    if QNHr == nil then
    QNHr = string.match(MET,"[A]%d+")
    QNHr = string.sub(QNHr,2)
    --ipc.log(QNHr)
    QNHr = tonumber(QNHr)
    PMDG_EFIS_Baro_in ()
    else
    QNHr = string.sub(QNHr,2)
    QNHr = tonumber(QNHr)
    PMDG_EFIS_Baro_hpa ()
    end
    wind = string.match(MET,"%a+%d+[G]%d+[K]")
    if wind ~= nil then windg = 1 end
    if wind == nil then
    wind = string.match(MET,"%d+[G]%d+[K]")
    end
            if wind == nil then
            wind = string.match(MET,"%a+%d+[K]")
            windg = 0
            else
            windg = 1
            end
            if wind == nil then
            wind = string.match(MET,"%d+[K]")
            end
            if wind == nil then
				wind = string.match(MET,"%a+%d+[G]%d+[MPS]")
				if wind ~= nil then windg = 1  mps=1 end
				if wind == nil then
				wind = string.match(MET,"%d+[G]%d+[MPS]")
				end
				if wind == nil then
				wind = string.match(MET,"%a+%d+[MPS]")
				windg = 0
				mps=1
				else
				windg = 1
				mps=1
				end
				if wind == nil then
				wind = string.match(MET,"%d+[MPS]")
				mps=1
				end
			end
            --ipc.log(wind)
            winddir = string.sub(wind,1,3)
            if winddir == "VRB" then winddir = "direction variable" end
    else
    --ipc.setdisplay (1920,0,200,120)
    ipc.display("Pas de Metar Valide, QNH local",8)
    QNHr =  ipc.readUW(0x0EC6)/16
	end
end
function file_exists(name)
    f=io.open(name,"r")
   if f~=nil then io.close(f) return true else return false end
end
function QNH_DEP ()
		while true do
			if pcall(lecture) then
			ipc.log("Lecture ok. QNH DEP de l'actions.lua.")
			ipc.sleep(150)
			break
			else
			ipc.log("Erreur de lecture. QNH DEP de l'actions.lua. Attente 2s.")
			ipc.sleep(2000)			
			end
		end
	if metper == 0 then
    file = io.open(file1, "r")
	MET = file:read ("*l")
	file:close()
	n = string.find(MET,"TEMPO")
	if n ~= nil then
	MET = string.sub(MET,1,n)
	end
	ipc.log(MET)
    QNHr = string.match(MET,"[Q]%d+")
    if QNHr == nil then
    QNHr = string.match(MET,"[A]%d+")
    QNHr = string.sub(QNHr,2)
    --ipc.log(QNHr)
    QNHr = tonumber(QNHr)
    PMDG_EFIS_Baro_in ()
    else
    QNHr = string.sub(QNHr,2)
    QNHr = tonumber(QNHr)
    PMDG_EFIS_Baro_hpa ()
    end
    --ipc.log(QNHr)
    wind = string.match(MET,"%a+%d+[G]%d+[K]")
    if wind ~= nil then windg = 1 end
    if wind == nil then
    wind = string.match(MET,"%d+[G]%d+[K]")
    end
    if wind == nil then
    wind = string.match(MET,"%a+%d+[K]")
    windg = 0
    else
    windg = 1
    end
    if wind == nil then
    wind = string.match(MET,"%d+[K]")
    end
    if wind == nil then
		wind = string.match(MET,"%a+%d+[G]%d+[MPS]")
		if wind ~= nil then windg = 1  mps=1 end
		if wind == nil then
		wind = string.match(MET,"%d+[G]%d+[MPS]")
		end
		if wind == nil then
		wind = string.match(MET,"%a+%d+[MPS]")
		windg = 0
		mps=1
		else
		windg = 1
		mps=1
		end
		if wind == nil then
		wind = string.match(MET,"%d+[MPS]")
		mps=1
		end
	end
    --ipc.log(wind)
    winddir = string.sub(wind,1,3)
    if winddir == "VRB" then winddir = "direction variable" end
    else
    --ipc.setdisplay (1920,0,200,120)
    ipc.display("Pas de Metar Valide, QNH local",8)
    QNHr =  ipc.readUW(0x0EC6)/16
	end
end
function LisPiste ()
    AG =  ipc.readUB (0x0366)
    if AG == 1 then
    pist2 = "Runway in use for take-off: "
    else
    pist2 = "Runway in use for Landing: "
    end
    pist3=""
    --ipc.log ("Lispiste")
    if angpref[1] > 90 then
    g=1
    warnd3 = "Attention vent arrière"
    warn3 = "Warning! Tail wind."
    end
    if g>2 then g=2 end
    for i=1 , g do
    pist1 = pistpref[i]
    long = string.len(pist1)
        if long == 2 then
        car1 = string.sub(pist1,1,1)
        car2 = string.sub(pist1,2,2)
        car3 = ""
        elseif long == 3 then
        car1 = string.sub(pist1,1,1)
        car2 = string.sub(pist1,2,2)
        car3 = string.sub(pist1,3,3)
        end
        if car3 == "L" then car3 = " Left"
        elseif car3 == "R" then car3 = " Right"
        elseif car3 == "C" then car3 = " Center"
        end
        if i == g-1 then
        car4 = " or "
        else
        car4 = "."
        end
        pist3 = pist3.." "..car1.." "..car2.." "..car3..car4
    end
    pist1 = pist2..pist3
    ipc.log(pist1)
    --ipc.setdisplay (1920,0,200,120)
    ipc.display(pist1,1,15)
    if dec == 1 then	
    city()
    coderadio()
    LisCeci(ici..":"..city1..":"..pist1)
	ipc.log(ici..":"..city1..":"..pist1)
    ipc.sleep(10000)
        if warn1 ~= nil then
        LisCeci(warn1)
        ipc.display(warnd1,10)
        ipc.sleep(5000)
        warn1 = nil
        end
        if warn2 ~= nil then
        LisCeci(warn2)
        ipc.display(warnd2,10)
        ipc.sleep(5000)
        warn2 = nil
        end
        if warn3 ~= nil then
        LisCeci(warn3)
        ipc.display(warnd3,10)
        ipc.sleep(5000)
        warn3 = nil
        end        
    else
    LisCeci(pist1)
    ipc.sleep(3000)
    end
end
function confirm ()
    g=nil
	Pistpref=ipc.readSTR(0x700E,3)
	if string.byte(Pistpref,3) == 0 then
	Pistpref = ipc.readSTR(0x700E,2)
	end
	sit1 = ipc.readSTR(0x1000,255)
	long = string.find(sit1,"les\\")
	if long == nil then
	long = string.find(sit1,"r X\\")
	end
	sit=string.sub(sit1,1,long+3)
	doc1 = sit.."pfpx.txt"
	if (file_exists(doc1)) then
	pfpx = 1
    --ipc.log("ok pfpx")
	file = assert(io.open(doc1, "r"))
		lines = {}
		i = 1
		--local line = file:read("*all")
		for line in file:lines() do
			lines[i] = line
			i = i+1
		end
		file:close()
		pp = {}
		for j = 1,i do
		if string.find(lines[j],"COND:")~=nil then
		if g == nil then g = 1 else g=g+1 end
		pp[g] = string.sub(lines[j-2],23,25)--N° de piste 1
			if string.byte(string.sub(pp[g],3,3))<65 then pp[g] = string.sub(pp[g],1,2) end
        --ipc.log(pp[g]..g)
        g=g+1
		pp[g] = tonumber(string.sub(lines[j+1],16,17)) -- Flaps 2
		g=g+1
		pp[g] = string.match(lines[j+1],"%d+[C]")
		if pp[g] ~= nil then pp[g] = tonumber(string.sub(pp[g],1,2)) end --temp 3
		g=g+1
		if string.match(lines[j+1],"TO2") ~= nil then pp[g] = 2
		elseif string.match(lines[j+1],"TO1") ~= nil then pp[g] = 1
		elseif string.match(lines[j+1],"TO") ~= nil then pp[g] = 0 end --Derate 4
		g=g+1
		pp[g] = tonumber(string.sub(lines[j+2],29,31)) --V2 5
			elseif string.find(lines[j],"CONT 5")~=nil then			 
			break
			end
		end		
	else
	pfpx = 0
	end
    --ipc.log("g="..g.." piste:"..pp[1])
	FSXchem1 = ipc.readSTR(0x3C00,255)
	long = string.find(FSXchem1,"SimObjects")
	FSXchem1 = string.sub(FSXchem1,1,long-1)
	PMDG = FSXchem1.."PMDG\\PMDG 777X\\PanelState\\Route.fxml.0.rte"
	file = assert(io.open(PMDG, "r"))
	lines = {}
	i = 0
	for line in file:lines() do
		i = i+1
		lines[i] = line
	end
	file:close()
	if lines[13] ~= "-----" then
	ppf = ipc.readSTR(0x700E,3)
	ipc.log(ppf)
	if string.byte(ppf,1) == 0 then ppf = 0 else ppf = 1 end
	ipc.log("ppf= "..ppf..". Pour voir la piste preferentielle dans Route.fxml.0.rte. Confirm actions.lua.")
	Pistpref = lines[13]
    sid = lines[55]
    dpl = "Piste choisie : "..Pistpref
    if sid ~= "" then dpl = dpl.."\nProcédure : "..sid end
    --ipc.display(dpl,1,10)
    ipc.log(dpl)
	ipc.writeSTR(0x700E,Pistpref,3)
    if pfpx == 1 then
			if Pistpref ~= pp[1] and g > 5 and ppf == 0 then
				for j=5 ,g ,5 do
                    --ipc.log(pp[j+1])
					if Pistpref == pp[j+1] then
                    j1 = j
					MAJFMC ()
					break
					end
				end
			elseif g > 5 and ppf == 1 then
				for j=0 ,g ,5 do
                    --ipc.log(pp[j+1])
					if Pistpref == pp[j+1] then
                    j1 = j
					MAJFMC ()
					break
					end
				end
			end
		ipc.log("Choix Piste : "..Pistpref.." Confirm actions.lua.")
        else
        ipc.log("Choix Piste : "..Pistpref.." Confirm actions.lua.")
		end	
	ipc.writeUB(0x66C0,10)
	Testalign ()
    RealHDG ()
	DistPist ()
    Hpist ()
	ipc.keypressplus(56,10,4) -- ajout Francis pour avoir la vue sur les landing lights afin de sélecter la direction du push. Puis on revient à la vue "moi" dans le 777 annonce lua fonction PLV.
	ipc.sleep(8000) -- ajout Francis pour le temps nécessaire au choix du push.
	else
	ipc.display("Erreur. Pas de piste trouvée",0,5)
	end
end
function Testalign ()
	if ipc.readUB(0x6C1C) == 1 and ipc.readUB(0x66C0) == 10 then -- 6C1C = IRS Aligned OFFSET PMDG 66C0 = FREE jusqu'au 6700 = RESERVED
	ipc.writeUB(0x66D3,1)
	ipc.sleep(1000)
	ipc.control(69973,cg)
	ipc.sleep(500)
	ipc.control(69969,cg)
	ipc.sleep(500)
	ipc.control(69971,cg)			
	ipc.sleep(500)
	Weather ()
	ipc.control(69966,cg)
	ipc.sleep(500)
	ipc.control(69967,cg)
	ipc.sleep(500)
	ipc.control(69968,cg)
	ipc.sleep(100)				
	v2 = ipc.readUB(0x6C24) -- 6C24 = V2 FMC OFFSET PMDG
		if v2 > 0 then ipc.control(69632+14502,v2) else VspeedUn() end
	ipc.writeUB(0x66D3,0)
	ipc.sleep(100)
	ipc.log("Departure OK quand V1 VR V2 sont validées dans le CDU. Testalign actions.lua.")
    nomt="Route"
	ipc.writeSTR(0x3F04,nomt.."")
    ipc.writeUB(0x3F00,1)
	end
end
function Weather ()
	ipc.control(70027,cg)--Clr
    ipc.sleep(100)
    ipc.control(70027,131072)--Clr release
	ipc.sleep(100)
	ipc.control(69985,cg)
	ipc.sleep(500)
    RA = ipc.readUB(0x04CC)
	tp = math.floor((ipc.readSW(0x0E8C)/256)+0.5)
	WD = math.floor((ipc.readUW(0x0EF2)*360/65536)+0.5)
	WF = math.floor(ipc.readUW(0x0EF0)+0.5)
	WG = math.floor(ipc.readUW(0x0EF6)+0.5)
	if WG ~= 0 then WF = math.ceil((WF+WG)/2) end
	if tp < 0 then  ipc.control(69997,cg) ipc.sleep(500) end
	tp = tostring(math.abs(tp))
		lont =string.len(tp)        
		for i = 1, lont do
			cr = string.sub(tp,i,i)
			cr = tonumber(cr)
			ipc.sleep(200)
			if cr==0 then
			ipc.control(69996,cg)
			else
			ipc.control(69985+cr,cg)
			end
		end
		ipc.sleep(500)
	ipc.control(69970,cg)
	ipc.sleep(500)
	if WF > 0 then
		WD = tostring(WD)
			lont =string.len(WD)        
			for i = 1, lont do
				cr = string.sub(WD,i,i)
				cr = tonumber(cr)
				ipc.sleep(200)
				if cr==0 then
				ipc.control(69996,cg)
				else
				ipc.control(69985+cr,cg)
				end
			end
			ipc.sleep(500)
		ipc.control(70026,cg)
		ipc.sleep(500)
		WF = tostring(WF)
			lont =string.len(WF)        
			for i = 1, lont do
				cr = string.sub(WF,i,i)
				cr = tonumber(cr)
				ipc.sleep(200)
				if cr==0 then
				ipc.control(69996,cg)
				else
				ipc.control(69985+cr,cg)
				end
			end
			ipc.sleep(500)
		ipc.control(69962,cg)
		ipc.sleep(500)
	end
    if RA > 0 then
    ipc.control(70026,cg)
    ipc.sleep(500)
    ipc.control(70020,cg)
    ipc.sleep(500)
    ipc.control(69964,cg)
    end
    ipc.sleep(2500)
	ipc.control(69984,cg)
	ipc.sleep(500)
end
function RealHDG ()
	Pistpref=ipc.readSTR(0x700E,3)
	if string.byte(Pistpref,3) == 0 then
	Pistpref = ipc.readSTR(0x700E,2)
	end
    lat2 = nil
    lon2 = nil
    i = 0
		pistvox = {}
		nompistvox = {}
		lonpistvox = {}
		Latpistvox = {}
		Longpistvox = {}
		Hdgpistvox = {}
    file2 = "Pistes.dat"
		file = io.open(file2, "r")
		sep = file:read ("*l")
			if string.find(sep,";") == nil then
			sep = ","
			else
			sep = ";"
			end
			file:close()
			local ctr = 0
			for _ in io.lines'Pistes.dat' do
			ctr = ctr + 1
			end
			ici = ipc.readSTR(0x700A,4)
			file = io.open(file2, "r")
			for n=1 , ctr do
				piste = file:read ("*l")
				if i>=1 and string.sub(piste,1,4) ~= ici then
				break
				else
					if string.sub(piste,1,4)== ici then
						i= i+1
						pistvox[i] = piste
						nbpist=i
						VoxParse (line,sep)
							if nompistvox[i] == Pistpref then
							ipc.writeDBL(0x7017,Latpistvox[i])
							ipc.writeDBL(0x701F,Longpistvox[i])
							ipc.writeDBL(0x7027,Hdgpistvox[i])
							end
					end
				end
			end
    Pistpref=ipc.readSTR(0x700E,3)
	if string.byte(Pistpref,3) == 0 then
	Pistpref = ipc.readSTR(0x700E,2)
	end
    if string.len(Pistpref) == 3 then
        if string.sub(Pistpref,3,3) == "R" then lop = "L"
        elseif string.sub(Pistpref,3,3) == "L" then lop = "R"
        elseif string.sub(Pistpref,3,3) == "C" then lop = "C" end
        Ho = string.sub(Pistpref,1,2)
        Ho = tonumber(Ho)
        Hop = Ho + 18
        if Hop > 36 then Hop = Hop - 36 end
        Hop = tostring(Hop)
        if string.len(Hop) == 1 then Hop = "0"..Hop end
        if lop ~= nil then Pistop = Hop..lop else Pistop = Hop end
    else
        Ho = string.sub(Pistpref,1,2)
        Ho = tonumber(Ho)
        Hop = Ho + 18
        if Hop > 36 then Hop = Hop - 36 end
        Hop = tostring(Hop)
        if string.len(Hop) == 1 then Hop = "0"..Hop end
        Pistop = Hop
    end
    --ipc.log(Pistop)
    for i = 1, nbpist do
        if nompistvox[i] == Pistpref then
        lat1 = Latpistvox[i]
		lon1 = Longpistvox[i]
        lonpist =  lonpistvox[i]
        lonpist = math.floor((lonpist /3.280839895013123)+0.5)
        ipc.writeUW(0x66D1,lonpist)
        elseif nompistvox[i] == Pistop then
        lat2 = Latpistvox[i]
        ipc.writeDBL(0x7300,lat2) --- offset pour distance restante
		lon2 = Longpistvox[i]
        ipc.writeDBL(0x7308,lon2)
        end
    end
    if lat2 ~= nil and lon2 ~= nil then
    lat1s = math.sin((lat1*math.pi/180))
    lat2s = math.sin((lat2*math.pi/180))
    lat1c = math.cos((lat1*math.pi/180))
    lat2c = math.cos((lat2*math.pi/180))
    lon1 = lon1*math.pi/180
    lon2 = lon2*math.pi/180
    lonc = math.cos(lon1-lon2)
    dist = math.acos((lat1s*lat2s) + (lat1c*lat2c*lonc))
    Dist = math.floor((dist*6378137*3.280839895013123)+0.5)
    --ipc.log(Dist)
	magdev = ipc.readUW(0x02A0)*360/65536
    --ipc.log(magdev)
    if magdev>180 then magdev = magdev - 360 end
    if math.sin(lon1-lon2)<0 then
    cap = math.acos((lat2s-lat1s*math.cos(dist))/(math.sin(dist)*lat1c))
    --cap = math.floor((cap*57.2957795) - magdev + 0.5)
    else
    cap = 2*math.pi - math.acos((lat2s-lat1s*math.cos(dist))/(math.sin(dist)*lat1c))
    --cap = math.floor((cap*57.2957795)- magdev + 0.5)
    end
    cap = (cap * 57.2957795)- magdev
    if cap > 360 then cap = cap - 360 end
    if cap <= 0 then cap = cap + 360 end
	ipc.log("HDG Real : "..cap)
    hdgpist = cap
	ipc.writeDBL(0x7027,hdgpist)
    end
end
function DistPist ()
	lat1 = ipc.readDBL(0x6010)
    lon1 = ipc.readDBL(0x6018)
    lat2 = ipc.readDBL(0x7017)
    lon2 = ipc.readDBL(0x701F)
    lat1s = math.sin((lat1*math.pi/180))
    lat2s = math.sin((lat2*math.pi/180))
    lat1c = math.cos((lat1*math.pi/180))
    lat2c = math.cos((lat2*math.pi/180))
    lon1 = lon1*math.pi/180
    lon2 = lon2*math.pi/180
    lonc = math.cos(lon1-lon2)
    dist = math.acos((lat1s*lat2s) + (lat1c*lat2c*lonc))
    Dist = math.floor((dist*6378137)+0.5)
	Calculcap()
	ipc.display(dpl.."\n\nDistance: "..Dist.." m Cap: "..cap.."°\n\n"..Dev,1,1000) 
end
function Calculdist()
    dist = nil
    --ipc.log(g)
    Dist = {}
    Cap =  {}
    for i=1,g do
    lat1 = ipc.readDBL(0x6010)
    --ipc.log(lat1)
    lon1 = ipc.readDBL(0x6018)
    --ipc.log(lon1)
    lat2 = Latpist[i]
    --ipc.log(lat2)
    lon2 = Longpist[i]
    --ipc.log(lon2)
    lat1s = math.sin((lat1*math.pi/180))
    lat2s = math.sin((lat2*math.pi/180))
    lat1c = math.cos((lat1*math.pi/180))
    lat2c = math.cos((lat2*math.pi/180))
    lon1 = lon1*math.pi/180
    lon2 = lon2*math.pi/180
    lonc = math.cos(lon1-lon2)
    dist = math.acos((lat1s*lat2s) + (lat1c*lat2c*lonc))
    Dist[i] = math.floor((dist*6378137)+0.5)
    --ipc.log(Dist[i].." "..pistpref[i])
    Calculcap()
    Cap[i] = cap
    --ipc.log(Cap[i].." "..pistpref[i])
    end
	if np >= 5 then
		disp = "\n\nPiste(s) PFPX :\n\n"
		for i=1,np,5 do
		disp = disp..pp[i].."\n"
		end
	end
    if g == 2 then
        if Dist[1] < Dist[2] then
        ipc.display(pist1.."\n\nLa piste la plus proche est:\n".."la "..pistpref[1].." à "..Dist[1].." m\n Cap :"..Cap[1]..disp,1,20)
        else
        ipc.display(pist1.."\n\nLa piste la plus proche est:\n".."la "..pistpref[2].." à "..Dist[2].." m\n Cap :"..Cap[2]..disp,1,20)
        end       
    elseif g == 1 then
    ipc.display(pist1.."\n\nLa piste "..pistpref[1].." est à "..Dist[1].." m\n Cap :"..Cap[1]..disp,1,20)    
    end
    ipc.sleep(20000)
    ipc.display(atc,1,2000)
    --Hpist ()
end
function Hpist ()
    Hdg = ipc.readDBL(0x7027)
    Hdg = math.floor(Hdg+0.5)
    Hdgw = ipc.readLvar("ngx_HDGwindow")
    while Hdg ~= Hdgw do
    ec = Hdgw - Hdg
    if ec < -180 then ec = ec + 360 end
    if ec > 180 then ec = ec - 360 end
    --ipc.log(ec)
    if ec > 0 then
        for i = 1,ec do
        ipc.control(71812, 128)
        ipc.sleep (50)
        i = i+1
        end
    end
    if ec < 0 then
    ec = ec * -1
        for i = 1, ec do
        ipc.control(71812, 256)
        ipc.sleep (50)
        i = i+1
        end
    end
    Hdgw = ipc.readLvar("ngx_HDGwindow")
    end
end
function Calculcap()
    cap = nil
    magdev = ipc.readUW(0x02A0)*360/65536
    if magdev>180 then magdev = magdev - 360 end
    if math.sin(lon1-lon2)<0 then
    cap = math.acos((lat2s-lat1s*math.cos(dist))/(math.sin(dist)*lat1c))
    cap = math.floor((cap*57.2957795) - magdev + 0.5)
    else
    cap = 2*math.pi - math.acos((lat2s-lat1s*math.cos(dist))/(math.sin(dist)*lat1c))
    cap = math.floor((cap*57.2957795)- magdev + 0.5)
    end
	head = math.floor(ipc.readDBL(0x2B00)+0.5)
	Dev = cap - head
	if Dev > 180 and Dev > 0 then Dev = Dev - 360 
	elseif Dev < 0  and Dev < -180 then Dev = Dev + 360 end
	if Dev > 0 then Dev = "Suggested Pushback : Right" 
	elseif Dev < 0 then Dev = "Suggested Pushback : Left"
	elseif Dev == 0 or Dev == 180 then Dev = "Suggested Pushback : none" end
end
function Radio ()
    radio = {}
    radio[1]= "alpha "
    radio[2]= "bravo "
    radio[3]= "charlie "
    radio[4]= "delta "
    radio[5]= "echo "
    radio[6]= "foxtrot "
    radio[7]= "golf "
    radio[8]= "hotel "
    radio[9]= "india "
    radio[10]= "juliet "
    radio[11]= "kilo "
    radio[12]= "lima "
    radio[13]= "mike "
    radio[14]= "november "
    radio[15]= "oscar "
    radio[16]= "papa "
    radio[17]= "quebec "
    radio[18]= "romeo "
    radio[19]= "sierra "
    radio[20]= "tango "
    radio[21]= "uniform "
    radio[22]= "victor "
    radio[23]= "whiskey "
    radio[24]= "x-ray "
    radio[25]= "yankee "
    radio[26]= "zulu "
end
function coderadio()
    car1 = string.byte(string.sub(ici,1,1)) - 64
    car2 = string.byte(string.sub(ici,2,2)) - 64
    car3 = string.byte(string.sub(ici,3,3)) - 64
    car4 = string.byte(string.sub(ici,4,4)) - 64
    Radio ()
    ici = radio[car1]..radio[car2]..radio[car3]..radio[car4]
end
function city()
    file2 = "City.dat"
    if (file_exists(file2)) then
    file = io.open(file2, "r")
    for n=1 , 11336 do
    city1 = file:read ("*l")
    city2 = string.sub(city1,1,4)
    if city2 == ici then break end
    end
    file:close()
    --ipc.log(city1)
    city1 = string.sub(city1,6)
    end
end
function Com_Radio ()
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(57,10,4) end --ipc.keypressplus(105,10,4) end -- 105 NumPad 9 + CTRL
    ipc.sleep(4000)
    ipc.control(69632 + 532,cg)-- OFF SWITCH COM 1
    ipc.sleep(2000)
    ipc.control(69632 + 795,cg)-- OFF SWITCH COM 2
    ipc.sleep(2000)
    ipc.control(69632 + 603,cg)-- OFF SWITCH COM 3
    ipc.sleep(2000)	
    ipc.control(69632 + 536,cg)-- CPT MIC VHF L 536 PATRICK MOI POUR IVAP 538 VHF R
    ipc.control(69632 + 536,131072)-- PATRICK 536 MOI 538 EN ACCORD LIGNE PRECEDENTE
    ipc.sleep(2000)
    ipc.control(69632 + 789,cg)-- FO MIC VHF R
    ipc.control(69632 + 789,131072)
    ipc.sleep(2000)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
end
function Lisvents ()
		while true do
			if pcall(lecture) then
			ipc.log("Lecture ok. Lisvents de l'actions.lua")
			ipc.sleep(150)
			break
			else
			ipc.log("Erreur de lecture. Lisvents de l'actions.lua. Attente 2s")
			ipc.sleep(2000)			
			end
		end
	if metper == 0 then
        if lv == 2 then
        file = io.open(file1, "r")
		MET = file:read ("*l")
		MET = file:read ("*l")
		file:close()
		elseif lv == 1 then
		file = io.open(file1, "r")
		MET = file:read ("*l")
		file:close()
		end
	n = string.find(MET,"TEMPO")
	if n ~= nil then
	MET = string.sub(MET,1,n)
	end
	--ipc.log("Lisvents "..MET)
    QNHr = string.match(MET,"[Q]%d+")
    if QNHr == nil then
    QNHr = string.match(MET,"[A]%d+")
    QNHr = string.sub(QNHr,2)
    --ipc.log(QNHr)
    QNHr = tonumber(QNHr)
    PMDG_EFIS_Baro_in ()
    else
    QNHr = string.sub(QNHr,2)
    QNHr = tonumber(QNHr)
    PMDG_EFIS_Baro_hpa ()
    end
	--ipc.log(QNHr)
    variag = string.match(MET,"%d+[V]%d+")
    if variag ~= nil then
    ang1 = string.sub(variag,1,3)
    ang2 = string.sub(variag,5,7)
    car1 = string.sub(ang1,1,1)
    car2 = string.sub(ang1,2,2)
    car3 = string.sub(ang1,3,3)
    ang1 = car1.." "..car2.." "..car3
    car1 = string.sub(ang2,1,1)
    car2 = string.sub(ang2,2,2)
    car3 = string.sub(ang2,3,3)
    ang2 = car1.." "..car2.." "..car3
    variag = " variable between "..ang1.." and "..ang2
    --ipc.log (variag)
    else
    variag = ""
    end
    wind = string.match(MET,"%a+%d+[G]%d+[K]")
    if wind ~= nil then windg = 1 end
    if wind == nil then
    wind = string.match(MET,"%d+[G]%d+[K]")
    end
    if wind == nil then
    wind = string.match(MET,"%a+%d+[K]")
    windg = 0
    else
    windg = 1
    end
    if wind == nil then
    wind = string.match(MET,"%d+[K]")
    end
	if wind == nil then
		wind = string.match(MET,"%a+%d+[G]%d+[MPS]")
		if wind ~= nil then windg = 1  mps=1 end
		if wind == nil then
		wind = string.match(MET,"%d+[G]%d+[MPS]")
		end
		if wind == nil then
		wind = string.match(MET,"%a+%d+[MPS]")
		windg = 0
		mps=1
		else
		windg = 1
		mps=1
		end
		if wind == nil then
		wind = string.match(MET,"%d+[MPS]")
		mps=1
		end
	end
    --ipc.log(wind)
    winddir = string.sub(wind,1,3)
    if winddir == "VRB" then
    winddir = "Variable Wind"
    else
    magdev = ipc.readUW(0x02A0)*360/65536
        if magdev>180 then magdev = magdev - 360 end
    --ipc.log("Mag Dev = "..magdev)
    winddir = tonumber(winddir)
    winddir = math.floor(winddir - magdev + 0.5)
        if winddir > 360 then winddir = winddir - 360 end
        if winddir <= 0 then winddir = winddir + 360 end
    winddir = tostring(winddir)
    end
    if windg == 1 then
    windf = string.sub(wind,4,5)
    windg = string.sub(wind,7,8)
		if mps == 1 then windf = windf * 2 windg = windg * 2 end
    windf = windf.. " knots gusting to "..windg.." knots"
    else
    windf = string.sub(wind,4,5)
    windf = tonumber(windf)
    if mps == 1 then windf = windf * 2 end
        if windf <= 5 then
        windf = " calms"
        else
        windf = windf.. " knots"
        end
    end
    if windf == " calms" then
        if winddir == "Variable Wind" then
        winddir = "Variable Wind : calms"
        else
        winddir = "Wind calms"
        end
    elseif winddir == "Variable Wind" and  windf ~= nil then
    winddir = "Variable wind at "..windf
    else
    long = string.len(winddir)
        if long == 1 then
        car1 = "0"
        car2 = "0"
        car3 = winddir
        elseif long == 2 then
        car1 = "0"
        car2 = string.sub(winddir,1,1)
        car3 = string.sub(winddir,2,2)
        elseif long == 3 then
        car1 = string.sub(winddir,1,1)
        car2 = string.sub(winddir,2,2)
        car3 = string.sub(winddir,3,3)
        end
    winddir = car1.." "..car2.." "..car3
    winddir = "Wind from "..winddir.." at "..windf..variag
    end
        if lv == 1 then
        long = string.len(QNHr)
            if long == 3 then
            car1 = "0"
            car2 = string.sub(QNHr,1,1)
            car3 = string.sub(QNHr,2,2)
            car4 = string.sub(QNHr,3,3)
            elseif long == 4 then
            car1 = string.sub(QNHr,1,1)
            car2 = string.sub(QNHr,2,2)
            car3 = string.sub(QNHr,3,3)
            car4 = string.sub(QNHr,4,4)
            end
        qnh = car1.." "..car2.." "..car3.." "..car4
        LisCeci("QNH :"..qnh)
		ipc.log("QNH :"..qnh)
        ipc.sleep(2000)
        end
    --ipc.log(winddir)
    LisCeci(winddir)
    --ipc.setdisplay (1920,0,200,120)
    ipc.display(" QNH :"..QNHr.." \n "..winddir,1,8)
    ipc.sleep (4000)
	end
end
function Lisqnh ()
    --ipc.log("Lisqnh")
    Metardest ()
    long = string.len(QNHr)
    if long == 3 then
    car1 = "0"
    car2 = string.sub(QNHr,1,1)
    car3 = string.sub(QNHr,2,2)
    car4 = string.sub(QNHr,3,3)
    elseif long == 4 then
    car1 = string.sub(QNHr,1,1)
    car2 = string.sub(QNHr,2,2)
    car3 = string.sub(QNHr,3,3)
    car4 = string.sub(QNHr,4,4)
    end
    qnh = car1.." "..car2.." "..car3.." "..car4
    city()
    coderadio()
    LisCeci("At "..ici..":"..city1..": QNH :"..qnh)
	ipc.log("At "..ici..":"..city1..": QNH :"..qnh)
    ipc.sleep(5000)
    lv=2
    Lisvents ()
    ipc.sleep(1000)
end
function Winds_For ()
    LisCeci("Loading winds forecast. Wait please...")
	ipc.log("Loading winds forecast. Wait please... Winds For actions.lua.")
    ipc.control(73103,cg)
    ipc.sleep(1000)
    ipc.control(69964,cg)
    ipc.sleep(1500)
    ipc.control(69971,cg)
    FMCexc ()
	ipc.sleep(1000)
	ipc.control(69965,cg)
    FMCmsg()
end
function Winds_Des ()
    ipc.control(73103,cg)
    ipc.sleep(1000)
    ipc.control(69965,cg)
    ipc.sleep(1000)
    --ipc.control(69970,cg)
    ipc.sleep(1500)
    ipc.control(69965,cg)
    ipc.sleep(3000)
    LisCeci("Forecast winds for descent loaded")
	ipc.log("Forecast winds for descent loaded. Winds Des actions.lua.")
    ipc.sleep(3000)
end
function Trans_Alt1 ()
    PFD_Baro ()
    file = io.open("Transitions.dat", "r")
    icaoD = ipc.readSTR(0x700A,4)
    --ipc.log(icaoI)
    local ctr = 0
        for _ in io.lines'Transitions.dat' do
        ctr = ctr + 1
        end
    for n=1 ,ctr do
    icao2 = file:read(23)
    icao1 = string.sub(icao2,1,4)
    if icao1 == icaoD then break end
    end
	file:close()
    TA = string.sub(icao2,6,10)
    TA = tonumber(TA)
	alti = tostring(TA)
	long = string.len(alti)
    if long == 1 then
    car1 = ""
    car2 = ""
    car3 = ""
	car4 = ""
	car5 = alti
    elseif long == 2 then
    car1 = ""
    car2 = ""
    car3 = ""
	car4 = string.sub(alti,1,1)
	car5 = string.sub(alti,2,2)
    elseif long == 3 then
    car1 = ""
    car2 = ""
    car3 = string.sub(alti,1,1).." hundred"
	car4 = string.sub(alti,2,2)
	car5 = string.sub(alti,3,3)
	elseif long == 4 then
    car1 = ""
    car2 = string.sub(alti,1,1).." thousand"
    car3 = string.sub(alti,2,2)
		if car3 == "0" then
		car3 = "" car4 = "" car5 = ""
		else
		car3 = string.sub(alti,2,2).." hundred"
		car4 = string.sub(alti,3,3)
			if car4 == "0" then
			car4 = "" car5 = ""
			else
			car4 = string.sub(alti,3,3)
			car5 = string.sub(alti,4,4)
			end
		end
	elseif long == 5 then
    car1 = string.sub(alti,1,1)
    car2 = string.sub(alti,2,2).." thousand"
    car3 = string.sub(alti,3,3)
		if car3 == "0" then
		car3 = "" car4 = "" car5 = ""
		else
		car3 = string.sub(alti,3,3).." hundred"
		car4 = string.sub(alti,4,4)
			if car4 == "0" then
			car4 = "" car5 = ""
			else
			car4 = string.sub(alti,4,4)
			car5 = string.sub(alti,5,5)
			end
		end
    end
	alti = car1.." "..car2.." "..car3.." "..car4.." "..car5 
	LisCeci("Transition altitude at "..alti.." feet")
	ipc.log("Transition altitude at "..alti.." feet. Trans_Alt1 actions.lua.")
	ipc.sleep(1000)
	ipc.display("Transition = "..TA.." ft",1,8)
    TA = tostring(TA)
		lont =string.len(TA)
        --ipc.log(lont)
        ipc.control(69976,cg)
		ipc.sleep(200)
		for i = 1, lont do
			cr = string.sub(TA,i,i)
			cr = tonumber(cr)
			ipc.sleep(200)
			if cr==0 then
			ipc.control(69996,cg)
			else
			ipc.control(69985+cr,cg)
			end
		end
		ipc.sleep(200)
        ipc.control(69968,cg)
		LisCeci("Transition altitude entry into the FMC")
		ipc.log("Transition altitude entry into the FMC. Trans Alt1 actions.lua.")
        ipc.sleep(3000)
        Winds_For ()
        Winds_Des ()
        ipc.control(69974,cg)
        ipc.sleep(1000)
        LisCeci("Please wait for departure runway")
		ipc.log("Please wait for departure runway. Trans Alt1 actions.lua.")
        ipc.sleep(1000)
end
function PFD_Baro ()
    alti = ipc.readUW(0x3324)
    alti = math.floor((alti+5)/10)*10
    alti = alti + 3000
    alti = tostring(alti)
    lont =string.len(alti)
    ipc.control(69982,cg) -- menu
    ipc.sleep(1000)
    ipc.control(69966,cg) -- LSK1R
    ipc.sleep(1000)
    ipc.control(69967,cg) -- LSK2R
    ipc.sleep(1000)
    for i = 1, lont do
        cr = string.sub(alti,i,i)
        cr = tonumber(cr)
		ipc.sleep(400)
		if cr==0 then
		ipc.control(69996,cg)
		else
		ipc.control(69985+cr,cg)
		end
	end
    ipc.sleep(1000)
    ipc.control(69962,cg) -- LSK3L
    ipc.sleep(1000)
    ipc.control(69982,cg) -- menu
    ipc.sleep(1000)
    ipc.control(69966,cg) -- LSK1R
    ipc.sleep(1000)
    ipc.control(69960,cg) -- LSK1L
    ipc.sleep(400)
    LisCeci("Acceleration height set to flight display")
	ipc.log("Acceleration height set to flight display. PFD_Baro actions.lua.")
    ipc.sleep(2000)
end
function Radar_test ()
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    ipc.sleep(500)
    PMDG_Select_L_Inbnd ()
    ipc.sleep(500)
    PMDG_Disp_Nav ()
    ipc.sleep(500)
    ipc.writeSTR(0x66E0,"106",3)
    LisCeci("Captain, I do the test Weather Radar, T.cass and oxygene")
	ipc.log("Captain, I do the test Weather Radar, T.cass and oxygene. Radar_test actions.lua.")
    ipc.sleep(4000)
    ipc.control(69632+195,cg)
    ipc.sleep(1000)
    ipc.control(69632+585,cg)
    ipc.sleep(10000)
    ipc.control(69632+585,cg)
    ipc.sleep(1000)
    ipc.control(69632+195,cg)
    ipc.sleep(5000)
    ipc.control(69632+7491,cg)
    ipc.sleep(14000)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
	ipc.sleep(500)
    ipc.keypressplus(109,8,4)
	ipc.sleep(500)
    ipc.keypressplus(109,8,4)
    ipc.sleep(3000)
    ipc.control(69632+1063,cg)
    ipc.sleep(2000)
    ipc.control(69632+1063,cg)
    ipc.sleep(3000)
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    ipc.writeSTR(0x66E0,"107",3)
    LisCeci("All tests completed")
	ipc.log("All tests completed. Radar_test actions.lua.")
	ipc.sleep(2000) -- va avec la ligne suivante à supprimer quand test ok
	ipc.log("La valeur de l'offset avant L Inbnd, 65B4= "..ipc.readUB(0x65B4)) -- Francis balise pour frein de park
    PMDG_Select_L_Inbnd ()	
    PMDG_Disp_Door ()	
end
function FlightControlTest ()
    ipc.setbitsUB(0x310A,3)
    ipc.sleep(1000)
    ipc.control(65762,16000)
    ipc.sleep(1500)
    ipc.control(65762,-16000)
    ipc.sleep(2500)
    ipc.control(65762,0)
    ipc.sleep(1500)
    ipc.control(65763,16000)
    ipc.sleep(1500)
    ipc.control(65763,-16000)
    ipc.sleep(2500)
    ipc.control(65763,0)
    ipc.clearbitsUB(0x310A,3)
end
function RudderTest ()
    ipc.setbitsUB(0x310A,4)
    ipc.sleep(1500)
    ipc.control(65764,16000)
    ipc.sleep(1500)
    ipc.control(65764,-16000)
    ipc.sleep(2500)
    ipc.control(65764,0)
    ipc.setbitsUB(0x310A,4)
end
-- ## Commandes ###
function Undock ()
    ipc.control(66507,402)--FRANCIS OPEN 66507 = PANEL_ID_OPEN CDU Left
    mouse.move(84,50,2)
    mouse.click(2)
    mouse.move(88,51,2)
    mouse.click()
    ipc.sleep(2000)
    ipc.control(66507,420)--FRANCIS OPEN 66507 = PANEL_ID_OPEN CDU Right
    mouse.move(82,22,2)
    mouse.click(2)
    mouse.move(86,23,2)
    mouse.click()
    ipc.sleep(2000)
    ipc.keypressplus(123,11,4)
    ipc.sleep(2000)
    mouse.move(50,45,2)
    mouse.click(2)
    mouse.move(54,46,2)
    mouse.click()
    ipc.sleep(1000)
    mouse.move(8,24,2)
    mouse.click(2)
    mouse.move(12,25,2)
    mouse.click()
    ipc.sleep(2000)
    mouse.move(50,45,2)
    mouse.click(2)
    mouse.move(54,46,2)
    mouse.click()
    ipc.sleep(2000)
    mouse.move(8,24,2)
    mouse.click(2)
    mouse.move(12,25,2)
    mouse.click()
end
function ChgRte ()
    if ipc.readUB(0x66DC)==0 then
    ipc.log("Changement de route")
	ipc.writeUB(0x66DC,3)
    ipc.writeUB(0x66EF,11)
    namw = ipc.readSTR(0x7011,6)
	i=1
    while string.byte(namw,i) ~= 0 do
    i=i+1
	if i == 7 then break end
    end
    namw =ipc.readSTR(0x7011,i-1)
	ipc.log(namw)
	FSXchem1 = ipc.readSTR(0x3C00,255)
	long = string.find(FSXchem1,"SimObjects")
	FSXchem1 = string.sub(FSXchem1,1,long-1)
	PMDG = ipc.readSTR(0x7005,5)
	if string.byte(PMDG,1) == 0 then PMDG = nil end
	PMDG1 = FSXchem1.."PMDG\\PMDG 777X\\PanelState\\Route.fxml.1.rte"
	PMDG0 = FSXchem1.."PMDG\\PMDG 777X\\PanelState\\Route.fxml.0.rte"
	if PMDG == "PMDG1" then
	PMDG = PMDG0
	elseif PMDG == "PMDG0" then
	PMDG = PMDG1
	elseif PMDG == nil then
	PMDG = PMDG1
	end
	ipc.log(PMDG)
	file = assert(io.open(PMDG, "r"))
	lines = {}
	i = 0
	for line in file:lines() do
		i = i+1
		lines[i] = line
	end
	file:close()
	-- nombre de waypoint
	ICAO = ipc.readSTR(0x66E3,4)
	nwp = {}
	count = i
    ipc.log(count)
	j=1
	for i = 7 ,count -1  do
		if string.sub(lines[i],1,1) == "(" and lines[i] ~= lines[i+1] then
        nwp[j] = lines[i]
            if nwp[j] == nwp[j-1] then
                j = j
                else
                j = j+1
                end
		elseif string.len(lines[i])>1 and lines[i] == lines[i+1] then
            if lines[i] ~= "DISC" and lines[i] ~= "0 -1000000 0 0" then
				nwp[j] = lines[i]
                j = j+1
            end
		end
		if lines[i] == ICAO then
		j = j -2
		nbwp = j
		break
		end
	end
    posa = nil
    posd = nil
    for i =1 ,nbwp do
        if nwp[i] == "dtobase" or nwp[i] == Lastwp then
        posd = i
        end
    end
    if posd == nil then posd = 0
    elseif posd == 1 then posd = 1
    else posd = posd - 1 end
    --if PMDG == PMDG1 then
        --if Lastwp2 == nil then Lastwp2 = nwp[1] end
    --Lastwp = Lastwp2
	--elseif PMDG == PMDG0 then
        --if Lastwp1 == nil then Lastwp1 = nwp[1] end
    --Lastwp = Lastwp1
	--end
    --if Lastwp1 == nil then Lastwp1 = nwp[1] end
    for i = posd , nbwp do
        if nwp[i] == namw then
        posa = i
        end
        if nwp[i] == Lastwp then ld = i+1 end
    end
    choix = nil
    if posa == nil then
		sound.play("CabinAlert")
		ipc.writeUB(0x66FE,255)
		ipc.display(namw.." introuvable sur la route.\nVoulez-vous utiliser"..nwp[ld].."\n  \n1 = OUI \n2 = NON "..
		"\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie.",1,200)
		ipc.runlua("choix")
		ipc.log("Lancement choix lua. ChgRte actions.lua.")
		ipc.keypressplus(72,8,4)-- Touche H = Global enable EZCA.
		while true do
		choix = ipc.readUB(0x66FE)
			if choix ~= 255 and choix >=1 and choix <= 2 then
			break
			elseif choix ~= 255 then
			ipc.writeUB(0x66FE,255)
			ipc.runlua("choix")
			ipc.log("Lancement choix lua. ChgRte actions.lua.")
			sound.play("CabinAlert")
			ipc.display("Choix non disponible!\nVeuillez recommencer.",0,5)
			ipc.sleep(5000)
			ipc.display(namw.." introuvable sur la route.\nVoulez-vous utiliser"..nwp[posd+1].."\n  \n1 = OUI \n2 = NON "..
		"\n\nTaper le chiffre choisi suivi de Enter(pavé numérique) pour valider.\nSuppr pour annuler la saisie.",1,200)
			end
		end
		ipc.sleep(1000) ipc.keypressplus(72,8,4)-- Touche H = Global enable EZCA.
		ipc.display("")
    ipc.log("Next waypoint available : "..nwp[ld]..". ChgRte actions.lua.")
    end
    if choix == nil or choix == 1 then
    if choix == 1 then posa = ld  namw = nwp[ld] end
    fmp = posa - posd
	ipc.log(fmp)
	pfm = math.floor(fmp/5)
	fmp = fmp%5
	if fmp == 0 then fmp=5 else pfm = pfm +1 end
	ipc.log("Pos FMC : "..namw.." page:"..pfm.." ligne:"..fmp.." ChgRte actions.lua.")
    ipc.control(69965,cg)--LSK6L
    ipc.sleep(1000)
	pfm = pfm-1
	if pfm > 0 then
		for i = 1,pfm do
		ipc.control(69985,cg)
		ipc.sleep(500)
		end
	end
	ipc.control(69959+fmp,cg)
	ipc.sleep(1500)
	ipc.control(69978,cg)--Legs
    ipc.sleep(1000)
	ipc.control(69960,cg)--LSK1L
    ipc.sleep(1000)
    ipc.control(69971,cg)--Activate
    ipc.sleep(1000)
    ipc.control(69981,cg)--Exec
    ipc.sleep(1000)
    ipc.control(69960,cg)--LSK1L
    ipc.sleep(1000)
    ipc.control(69960,cg)--LSK1L
    ipc.sleep(1000)
    ipc.control(69981,cg)--Exec
    if ipc.get("DT") ~= 1 then
    ipc.sleep(1000)
    ipc.control(69976,cg)--VNAV
    ipc.sleep(1000)
    ipc.control(69996,cg)--O RVSM
    ipc.sleep(1500)
    ipc.control(69963,cg)--4L
	end
    ipc.sleep(1000)
    ipc.control(69978,cg)
    ipc.sleep(1000)
	ipc.control(69978+73,cg)
	ipc.sleep(500)
	ipc.control(69965+73,cg)
	ipc.sleep(500)
	ipc.control(69980+73,cg)
	ipc.sleep(500)
	ipc.control(70027+73,cg)--Clr
    ipc.sleep(200)
    ipc.control(70027+73,131072)--Clr release
	ipc.sleep(500)
    if PMDG == PMDG1 then
    Lastwp = namw
	elseif PMDG == PMDG0 then
    Lastwp = namw
	end
    ipc.log(Lastwp)
    --ipc.log(Lastwp2)
    if PMDG == PMDG1 then
    ipc.writeSTR(0x7005,"PMDG1",5)
	elseif PMDG == PMDG0 then
    ipc.writeSTR(0x7005,"PMDG0",5)
	end
	ipc.writeUB(0x66DC,0)
    ipc.sleep(2000)
    M_a_J_Plandevol ()
	end
    ipc.log("Fin changement de route. ChgRte actions.lua.")
    end
end
function LegsRdata ()
    ipc.writeUB(0x66DC,1)
    imp = 0
	while true do
    imp = imp + 1
	ipc.control(69978,cg)-- EVT_CDU_L_LEGS
	ipc.sleep(1000)
	ipc.control(69971,cg)-- EVT_CDU_L_R6 = RTE DATA EN PAGE LEGS
	ipc.sleep(5000)--ipc.control(69965,cg)
	if ipc.readUB(0x66DC)==0 then break end
		if imp > 2 then
		sound.play("CabinAlert")
		ipc.display("Legs Routedata à refaire",0,10)
		ipc.control(69965,cg)-- EVT_CDU_L_L6
		ipc.writeUB(0x66DC,0)
		break 
		end
	end	
end
function ICAO1 ()
    doc1 = "Airports.dat"
    file = assert(io.open(doc1, "r"))
		lines = {}
		i = 1
		for line in file:lines() do
			lines[i] = line
			i = i+1
		end
		file:close()
    res = {}
    sep = ","
    for j = 1, i-1 do
        line= lines[j]
	   local pos = 1
	   while true do
		local c = string.sub(line,pos,pos)
		if (c == "") then break end
		local startp,endp = string.find(line,sep,pos)
			if (startp) then
				table.insert(res,string.sub(line,pos,startp-1))
				pos = endp + 1
			else
				table.insert(res,string.sub(line,pos))
				break
            end
	   end
    end
    lontable = #res
    lat1 = ipc.readDBL(0x6010)
    lon1 = ipc.readDBL(0x6018)
	ici1 = nil
	ray = 0.02
	while ici1 == nil do
		ray = ray +0.01
		for j=1,lontable, 3 do
			if math.abs(lon1 -res[j+2]) <= ray and math.abs(lat1 -res[j+1]) <= ray then
			ici1 = res[j]
			break
			end
		end
	end
end
function Cold_and_Dark ()
    Press_CaptCDU_LSK5R()
    ipc.sleep(1000)
    Press_CaptCDU_LSK2R()
    ipc.sleep(1000)
    Press_CaptCDU_LSK2L()
    ipc.sleep(1000)
    Press_CaptCDU_EXEC()
    ipc.sleep(30000)
    ipc.control(69667, 0)
    ipc.sleep(2000)
    ipc.control(69667, 1)
    ipc.sleep(1000)
    PMDG_EFIS_Baro_hpa ()
    ipc.sleep(1000)
    if ipc.readLvar('switch_181_a') ~= 0 then
    PMDG_Min_RadBaro ()
    end
    ipc.sleep(1000)
    PMDG_Min_reset ()
    ipc.sleep(1000)
        Press_FO_CDU_MENU()
        ipc.sleep (1500)
        GPUvar = ipc.readLvar("NGXGPU")
        Chockvar = ipc.readLvar("NGXWheelChocks")
        if Chockvar == 0 then
        FO_CDU_Wheel_Chocks ()
        end
        ipc.sleep(1000)
        Press_FO_CDU_LSK2L()
        ipc.sleep(500)
        if GPUvar == 0 then
        FO_CDU_ExtPower ()
        end
        ipc.sleep(1500)
        PMDG_PrimExtPower_toggle ()
        ipc.sleep(1000)
        PMDG_ENG2_cutoff ()
    ipc.sleep(1000)
    PMDG_ENG1_cutoff ()
    ipc.sleep (1000)
    PMDG_VorAdf_L_vor ()--FRANCIS
    ipc.sleep (1000)--FRANCIS
    PMDG_VorAdf_R_vor ()--FRANCIS
    ipc.sleep (1000)--FRANCIS
    PMDG_FO_VorAdf_L_vor ()--FRANCIS
    ipc.sleep (1000)--FRANCIS
    PMDG_FO_VorAdf_R_adf ()--FRANCIS
    ipc.sleep (1000)--FRANCIS
    Seat_Belts_off ()
    ipc.sleep(1000)
    No_Smoking_off ()
    ipc.sleep(1000)
    FuelPump_CenterL_off ()
    ipc.sleep(1000)
    FuelPump_CenterR_off ()
    ipc.sleep(1000)
    FuelPump_AFT1_off ()
    ipc.sleep(1000)
    FuelPump_AFT2_off ()
    ipc.sleep(1000)
    FuelPump_FWD1_off ()
    ipc.sleep(1000)
    FuelPump_FWD2_off ()
    ipc.sleep(1000)
    FuelPump_Aux_off ()--FRANCIS FAIRE IPC.CONTROL
    ipc.sleep(1000)--FRANCIS
    PMDG_HydC1andC2_off ()
    ipc.sleep(1000)
    PMDG_All_HydRotaries_off ()
    ipc.sleep(1000)
    ipc.control(69632 + 529,cg)
    ipc.control(69632 + 529,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 798,cg)
    ipc.control(69632 + 798,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 601,cg)
    ipc.control(69632 + 601,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 532,cg)
    ipc.sleep(1000)
    ipc.control(69632 + 795,cg)
    ipc.sleep(1000)
    ipc.control(69632 + 603,cg)
    ipc.sleep(1000)
    ipc.control(69632 + 536,cg)
    ipc.control(69632 + 536,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 789,cg)
    ipc.control(69632 + 789,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 608,cg)
    ipc.control(69632 + 608,131072)
    ipc.sleep(1000)
    PMDG_LPack_off ()
    ipc.sleep(1000)
    PMDG_RPack_off ()
    ipc.sleep(1000)
    PMDG_ADIRU_off ()
    ipc.sleep(1000)
    Emer_Light_off ()
    ipc.sleep(1000)
    ipc.writeUW(0x0354,0x2360)--FRANCIS
    ipc.sleep(1000)--FRANCIS
    Battery_off ()
    ipc.sleep(1000)
    PMDG_TCAS_dec ()
    ipc.sleep(300)
    PMDG_TCAS_dec ()
    ipc.sleep(300)
    PMDG_TCAS_dec ()
    ipc.sleep(300)
    PMDG_TCAS_dec ()
    ipc.sleep(1000)
    FO_CDU_ExtPower ()
    ipc.sleep(2000)    
    FSXchem1 = ipc.readSTR(0x3C00,255)
    long = string.find(string.sub(FSXchem1,1),"planes\\")
    long1 = string.find(string.sub(FSXchem1,long+9),"\\")
    FSXaicfg = string.sub(FSXchem1,1,long1+long+8).."Aircraft.cfg"
    title = ipc.readSTR(0x3D00,256)
    i=1
    while string.byte(title,i) ~= 0 do
    i=i+1
    end
    lon = i -1
    title = string.sub(title,1,lon)
    --ipc.log(title)
    --ipc.log(string.len(title))
    file = io.open(FSXaicfg, "r")
        for i = 1,600 do
        title1 = file:read ("*l")
        --ipc.log(title1)
        if string.find(title1,"title=")~= nil then
            --ipc.log(title1)
            --ipc.log(string.sub(title1,7))
            --ipc.log(string.len(string.sub(title1,7)))
            if string.sub(title1,7) == title then
                --ipc.log("OK")
                for j=1,10 do
                title1 = file:read ("*l")
                --ipc.log(title1)
                if string.find(title1,"atc_id=")~= nil then
                atc = string.sub(title1,8)
                file:close()
                --ipc.log(atc)
                break
                end
                end
                break
            end
        end
        end
        if string.find(atc,"-")~=nil then
        lon =  string.find(atc,"-")
        atc1 = string.sub(atc,1,lon-1)
        atc2 = string.sub(atc,lon+1)
        atc = atc1.."_"..atc2
        --ipc.log(atc)
        end
    --ici1=ipc.readSTR(0x0658, 4)
    ICAO1 ()
    nomt = "777_"..atc.."_C&D_"..ici1
    ipc.writeSTR(0x3F04,nomt .."")
    ipc.writeUB(0x3F00,1)
    ipc.display("Situation sauvegardée sous "..nomt,1,10)
	sit1 = ipc.readSTR(0x1000,255)
    long = string.find(sit1,"les\\")
    if long == nil then
    long = string.find(sit1,"r X\\")
    end
    sit=string.sub(sit1,1,long+3)
	nomt = sit..nomt
	DST = ipc.readSW(0x0246)/60*-1
	file = io.open(nomt..".UTC", "w+")
	file:write(DST)
	file:close()
end
function PA_VNAV_FLCH ()
    if ipc.readLvar("ngx_MCP_VNav") == 0 then
	PMDG_VNAV ()
    else
    PMDG_FLCH ()
    end
end
function PA_LNAV_HDGSEL ()
    if  ipc.readLvar("ngx_MCP_LNav") == 0 then
    PMDG_LNAV ()
    else
    PMDG_Push_HDG ()
    end
end
function Autopilot ()
    if Mod == 1 then
      if ipc.readLvar("ngx_MCP_CMDA") == 0 then
      PMDG_AP_L ()
	  ipc.writeSTR(0x66D4,"PA ON",6)
      else
      PMDG_AP_Disengage ()
	  ipc.writeSTR(0x66D4,"PA OFF",6)
      ipc.sleep (1500)
      PMDG_AP_Disengage ()
      end
    elseif Mod == 3 then
    COM2_Transfert ()
    end
end
function Gear ()
    AG =  ipc.readUB (0x0366)
    GT = ipc.readLvar('switch_295_a')
    TL = ipc.readLvar('switch_121_a')
    if AG == 1 then
        --ipc.keypressplus(49,11,4)
        ipc.sleep(1000)
        PMDG_Taxi_toggle ()
        ipc.sleep(1000)
        PMDG_RunwayTurn_toggle ()
    end
    if AG == 0 and GT == 100 and TL == 100 then
        ipc.control(66079)
        ipc.writeSTR(0x66D4,"Gear-U",6)
        ipc.sleep (1000)
        --ipc.keypressplus(49,11,4)
        PMDG_Taxi_off ()
        ipc.sleep(1000)
        PMDG_RunwayTurn_off ()
    elseif AG == 0 and GT == 0 and TL == 0 then
        ipc.control(66080)
        ipc.writeSTR(0x66D4,"Gear-D",6)
        --ipc.keypressplus(66,8,4)
    elseif AG == 0 and GT == 100 and TL == 0 then
        --ipc.keypressplus(49,11,4)
        ipc.sleep(1000)
        PMDG_Taxi_on ()
        ipc.sleep(1000)
        PMDG_RunwayTurn_on ()
    end
    ipc.sleep(500)
    --ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
end
function Mode_Normal ()
    Mod = 1
    Mod1 = "NORM"
    ipc.control(66508,421)-- 66508 = PANEL_ID_CLOSE Radios
    --ipc.setdisplay(2000, 20, 80, 40)
    ipc.display(Mod1,1,4)
    ipc.set("Mod",1)
    --ipc.sleep(4100)
    --ipc.setdisplay (1920,0,200,120)
end
function Mode_EFIS ()
    Mod = 2
    Mod1 = "EFIS"
    ipc.control(66508,421)-- 66508 = PANEL_ID_CLOSE Radios
    --ipc.setdisplay(2000, 20, 80, 40)
    ipc.display(Mod1,4)
    ipc.set("Mod",2)
    --ipc.sleep(4100)
    --ipc.setdisplay (1920,0,200,120)
end
function Mode_Radio ()
    Mod = 3
    Mod1 = "RADIO"
    ipc.control(66507,421)--FRANCIS OPEN 66507 = PANEL_ID_OPEN Radios
    --ipc.setdisplay(2000, 20, 80, 40)
    ipc.display(Mod1,4)
    ipc.set("Mod",3)
    --ipc.sleep(4100)
    --ipc.setdisplay (1920,0,200,120)
end
function Attero ()
	ipc.writeSTR(0x66E0,"095",3)
    LisCeci("Autobrake: off. Manual brake.")
	ipc.log("Autobrake: off. Manual brake. Attero actions.lua.")
    ABvar = ipc.readLvar('switch_292_a')
    i1= (ABvar - 10)/10
    for i=1,i1 do
    PMDG_Autobrake_dec ()
    ipc.sleep(100)
    end
    ipc.sleep(1000)
	ipc.writeSTR(0x66E0,"098",3)
    LisCeci("Spoiler: off")
	ipc.log("Spoiler: off. Attero actions.lua.")
    if ipc.readLvar("switch_498_a") > 0 then
    Spoiler_arm ()
    end
    ipc.sleep(1000)
    if ipc.readLvar("switch_498_a") > 0 then
    Spoiler_arm ()
    end
	ipc.writeSTR(0x66E0,"096",3)
    LisCeci("Autopilote disengage.") 
	ipc.log("Autopilote disengage. Attero actions.lua.")
    PMDG_AP_Disengage ()
    ipc.sleep (1000)
    PMDG_AP_Disengage ()
    ipc.sleep(1000)    
	ipc.writeSTR(0x66E0,"097",3)
    LisCeci("Flight Director: off")
	ipc.log("Flight Director: off. Attero actions.lua.")
    ipc.sleep(1000)
    PMDG_AP_FD1_off ()
    ipc.sleep(500)
    PMDG_AP_FD2_off ()    
end
function Spoiler_arm ()
    if ipc.readLvar("switch_498_a") == 0 then
    ipc.control(74614, cg)
    elseif  ipc.readLvar("switch_498_a") > 100 then
    ipc.control(74614, cg)
    ipc.sleep(1000)
    ipc.control(74614, cd)
    else
    ipc.control(74614, cd)
    end
end
function AutoThrottle ()
    if ipc.readLvar('switch_204_a') ==  ipc.readLvar('switch_205_a') then
    if ipc.readLvar('switch_204_a') == 100 then
    ipc.control(69836, cg)
    ipc.control(69837, cg)
    elseif ipc.readLvar('switch_204_a') == 0 then
    ipc.control(69836, cg)
    ipc.control(69837, cg)
    end
    else
    if ipc.readLvar('switch_204_a') == 0 then
    ipc.control(69836, cg)
    end
    if ipc.readLvar('switch_205_a') == 0 then
    ipc.control(69837, cg)
    end
    end
    if ipc.readLvar('switch_204_a') == 0 and ipc.readLvar('switch_205_a') == 0 then
    ipc.sleep(1000)
    PMDG_AT()
    end
end
function TOGA ()
    AG =  ipc.readUB (0x0366)
	ipc.writeSTR(0x66D4,"TOGA",6)
    if AG == 1 then
    PMDG_AP_TOGA ()
    ipc.sleep(500)
    CHRONO_L_ET_Start ()
    else
    Togalua ()
    end
end
function Togalua ()
	--ipc.writeSTR(0x66E0,"099",3)
	--ipc.writeSTR(0x66E0,"120",3)
    --LisCeci("Go-Around!")
		--PMDG_AP_TOGA ()
		--ipc.log("TOGA1")
    ipc.setbitsUB(0x66C1,1)
end
function ELEV_TRIM_up_APP ()
    --ipc.log(flag)
    AG = ipc.readUB(0x0366)
    if  ipc.readLvar("ngx_MCP_CMDA")==0 then            
			if ipc.readLvar('switch_496_a') == 50 then
			ipc.control(70128, cg)
			else
			ipc.control(70128, cd)				
			end
    else
    PMDG_APP()
    end
end
function Trim_up_Release ()
    if  ipc.readLvar("ngx_MCP_CMDA")==0 then
    ipc.control(70128, cd)
    end
end
function ELEV_TRIM_down_VS ()
    --ipc.log(flag)
     AG = ipc.readUB(0x0366)
    if  ipc.readLvar("ngx_MCP_CMDA")==0 then            
			if ipc.readLvar('switch_496_a') == 50 then
			ipc.control(70128, cd)
			else
			ipc.control(70128, cg)            
			end
    else
    PMDG_VS_FPA ()
    end
end
function Trim_down_Release ()
    if  ipc.readLvar("ngx_MCP_CMDA")==0 then
    ipc.control(70128, cg)
    end
end
function Light_Centre ()
    ipc.control(69655, cg)
end
function Montee ()
    if ipc.readUB(0x66C2) == 0 then
    if logic.And(ipc.readUB(0x66C1),8) == 0 then ipc.keypressplus(56,10,4) end --ipc.keypressplus(104,10,4) end -- 104 NumPad 8 + CTRL
    end
    ipc.sleep(1000)
    if mont == 0 then
    PMDG_LandingLights_off ()
    ipc.sleep(1000)
    PMDG_Logo_off ()
    mont = 1
    else
    PMDG_LandingLights_on ()
    ipc.sleep (1000)
    PMDG_Logo_on ()
    --ipc.sleep(1000)
    --PMDG_RunwayTurn_on ()
    mont = 0
    end
    ipc.sleep(1000)
    --ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    --ipc.sleep(1000)
end
function Flaps_up ()
    AG =  ipc.readUB (0x0366)
    ipc.control(65759)
end
function Flaps_Down ()
    AG =  ipc.readUB (0x0366)
    ipc.control(65758)
end
function Copilote ()
    if ipc.readUB(0x66C2) == 1 then
    ipc.writeUB(0x66C2,0)
	ipc.display("Copilote inactif",4)
	sound.play("CabinAlert")
	LisCeci("Warning!! No first officer")
	ipc.log("Warning!! No first officer. Copilote actions.lua.")
    elseif ipc.readUB(0x66C2) == 0 then
    ipc.writeUB(0x66C2,1)
	ipc.display("Copilote actif",1,4)
	LisCeci("First officer OK")
	ipc.log("First officer OK. Copilote actions.lua.")
    end
    --ipc.log(ipc.readUB(0x66C2))
end
function EZCA ()
   ipc.keypress(98,10)
   ipc.sleep(1500)
   ipc.keypress(98,10)
end
-- ## Francis Perso ##
function Select_vue_P ()
    vue = ipc.readUB(0x7002)
    if vue ~= nil then
		if vue == 0 then
        ext.run(env.."View.exe")
		ipc.log("Lancement du View.exe. Select_vue_P actions.lua.")
		ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
		vue = 0
		ipc.writeUB(0x7002,0)
		else
		ext.run(env.."View.exe")
		ipc.log("Lancement du View.exe. Select_vue_P actions.lua.")
		ipc.sleep(500)
		end
		if vue == 1 then
		mouse.move(20,400)--Patrick
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		mouse.click()--Patrick
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
        ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
        ipc.sleep(150)-- Francis
        ipc.control(66856) --                                                                                                                                     VIEW CAMERA SELECT 6. ROULETTE AVANT.		
        --ipc.control(65828)--Patrick
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
        ipc.sleep(1500)
        mouse.move(202,180)--Patrick
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		mouse.click(2)--Patrick pour ouvrir le menu pour undocker.
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		mouse.move(263,456)--Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 478,452. Je teste avec 405,449.
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		mouse.click()--Patrick
        ipc.sleep(500)--Patrick
        ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement du MouseClick.exe. Select_vue_P actions.lua.")
        vue = 1
		ipc.writeUB(0x7002,1)
		elseif vue == 2 then
		mouse.move(20,400)
		mouse.click()
		ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		ipc.sleep(150)
		ipc.control(66853) --vue latérale.                                                                                                                          VIEW CAMERA SELECT 3. 3/4 DROITE. Locked Spot
		ipc.control(65701,90) -- VIEW ZOOM SET
		ipc.writeUB(0x7002,2)
		mouse.move(202,180)
		mouse.click(2)
		mouse.move(263,456)-- Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 472,450. Je teste avec 405,449.
		ipc.sleep(4000) -- pour tester si les valeurs de mouse mouve sont bonnes
		mouse.click()
		ipc.sleep(500)
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement du MouseClick.exe. Select_vue_P actions.lua.")
		elseif vue == 3 then
		mouse.move(20,400)
		mouse.click()
		ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		ipc.sleep(150)
		ipc.control(66857) -- vue laterale.                                                                                                                         VIEW CAMERA SELECT 7. 3/4 GAUCHE. Facilities Runway
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		ipc.control(65701,90) -- VIEW ZOOM SET
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		ipc.control(65828) -- PREV_VIEW
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		ipc.writeUB(0x7002,3)
		mouse.move(202,180)
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		mouse.click(2)
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		mouse.move(263,456)-- Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 472,450. Je teste avec 405,449.
		--ipc.sleep(5000)-- Francis pour tester la décomposition a virer ensuite.
		mouse.click()
		ipc.sleep(500)
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement du MouseClick.exe. Select_vue_P actions.lua.")
		elseif vue == 4 then
		mouse.move(20,400)
		mouse.click()
		ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		ipc.sleep(150)
		ipc.control(66858) -- vue tour.                                                                                                                              VIEW CAMERA SELECT 8. TOUR. Nearest Tower
		ipc.control(65701,1000) -- VIEW ZOOM SET
		ipc.control(65828) -- PREV_VIEW
		ipc.writeUB(0x7002,4)
		mouse.move(202,180)
		mouse.click(2)
		mouse.move(263,456)-- Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 472,450. Je teste avec 405,449.
		mouse.click()
		ipc.sleep(500)
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement du MouseClick.exe. Select_vue_P actions.lua.")
		elseif vue == 5 then
		mouse.move(20,400)
		mouse.click()
		ipc.control(65825)-- NEW_VIEW -- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		ipc.sleep(150)
		ipc.control(66852) -- vue satellite.                                                                                                                            VIEW CAMERA SELECT 2. SATELLITE. Top-Down
		ipc.control(65701,7000) -- VIEW ZOOM SET
		ipc.control(65828)-- PREV_VIEW
		ipc.writeUB(0x7002,5)
		mouse.move(202,180)
		mouse.click(2)
		mouse.move(263,456)-- Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 472,450. Je teste avec 405,449.
		mouse.click()
		ipc.sleep(500)
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement du MouseClick.exe. Select_vue_P actions.lua.")
		elseif vue == 6 then
		mouse.move(20,400)
		mouse.click()
		ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		ipc.sleep(150)
		ipc.control(66852) -- vue satellite.                                                                                                                               VIEW CAMERA SELECT 2. SATELLITE ZOOM. Top-Down
		ipc.control(65701,18000) -- VIEW ZOOM SET
		ipc.control(65828) -- PREV_VIEW
		ipc.writeUB(0x7002,6)
		mouse.move(202,180)
		mouse.click(2)
		mouse.move(263,456)-- Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 472,450. Je teste avec 405,449.
		mouse.click()
		ipc.sleep(500)
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement du MouseClick.exe. Select_vue_P actions.lua.")
        elseif vue == 7 then
		mouse.move(20,400)
		mouse.click()
		ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		ipc.sleep(150)
		ipc.control(66852) -- vue satellite.                                                                                                                              VIEW CAMERA SELECT 2. AEROPORT. Top-Down
		ipc.control(65701,3000) -- VIEW ZOOM SET
		ipc.control(65828) -- PREV_VIEW
		ipc.writeUB(0x7002,7)
		mouse.move(202,180)
		mouse.click(2)
		mouse.move(263,456)-- Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 472,450. Je teste avec 405,449.
		mouse.click()
		ipc.sleep(500)
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement du MouseClick.exe. Select_vue_P actions.lua.")
		end
		ipc.sleep(2000)
		ipc.keypressplus(114,27,4) -- POUR ENLEVER LES BORDURES
        ipc.sleep(1000)
		ipc.keypressplus(114,27,4) -- POUR ENLEVER LES BORDURES
	else
	ipc.writeUB(0x7002, 0)
	end
	vue = ipc.readUB(0x7002)
    ipc.log("vue "..vue)
end
function Inhibitvue ()
	if logic.And(ipc.readUB(0x66C1),8) == 0 then
	ipc.setbitsUB(0x66C1,8)
    ipc.display("Chg Vue : Off")
	else
	ipc.clearbitsUB(0x66C1,8)
    ipc.display("Chg Vue : On")
	end
end
function Francis_Lua_Display ()
	ext.focus(0)
    ipc.display("Tests",1,5)
    ipc.sleep(1000)
    --mouse.move(1761,41) -- Pour la vue normale à remettre pour comme avant
	mouse.move(120,122) -- Pour la vue bidouillée Pete avant LM solution.             EN ATTENDANT
    mouse.click(2) -- Pour la vue normale à remettre pour comme avant
	ipc.sleep(200) -- Pour la vue normale à remettre pour comme avant
    --mouse.move(1800,53) -- Pour la vue normale à remettre pour comme avant
	mouse.move(163,131) -- Pour la vue bidouillée Pete avant LM solution.             EN ATTENDANT
    mouse.click() -- Pour la vue normale à remettre pour comme avant
    ipc.sleep(1500) -- Pour la vue normale à remettre pour comme avant
	--FsuipcDisp ()-- POUR FAIRE COMME PATRICK                                             A REMETTRE QUAND LM SOLUTION
                                                                                                                        --mes = "  \nSHIFT MODE = 0" -- FRANCIS COMME PATRICK REMPLACE PAR FSUIPCDISPLAY ()		A LAISSER DESACTIVE CAR D'ORIGINE
	                                                                                                                    --ipc.writeSTR(0x3380,mes.."")-- FRANCIS COMME PATRICK                                  A LAISSER DESACTIVE CAR D'ORIGINE 
	                                                                                                                     --ipc.writeUW(0x32FA,0)-- FRANCIS COMME PATRICK                                        A LAISSER DESACTIVE CAR D'ORIGINE
    --ipc.sleep(1000) -- Pour la vue normale à remettre pour comme avant
    --mouse.move(163,202) -- Pour la vue normale à remettre pour comme avant
    --mouse.click(2) -- Pour la vue normale à remettre pour comme avant
	--ipc.sleep(200) -- Pour la vue normale à remettre pour comme avant
    --mouse.move(197,212) -- Pour la vue normale à remettre pour comme avant
    --mouse.click() -- Pour la vue normale à remettre pour comme avant
    ipc.sleep(1500) -- Pour la vue normale à remettre pour comme avant
end
function Undock_SimconnectWR_Francis ()
    ipc.keypressplus(122,2,4)--FRANCIS MENU ASN GSX
    ipc.sleep(2000)
    mouse.move(960,511)
    ipc.sleep(1000)
    mouse.click(2)--CLIQUE GAUCHE POUR UNDOCK
    ipc.sleep(1000)
    mouse.move(973,520)
    ipc.sleep(1000)
    mouse.click()--POUR UNDOCKER    
    ipc.sleep(2000)
	ext.run(env.."SimConnectW.exe")	-- PATRICK
	ipc.log("Lancement du SimConnectW.exe. Undock_SimconnectWR_Francis actions.lua.")
	ipc.sleep(1500)-- PATRICK
    ipc.keypress(52)-- PATRICK 54 MAIS MOI 52 CAR QUE 4 LIGNES
	ipc.sleep(1000)-- PATRICK
    ipc.keypressplus(114,27,4)-- PATRICK NE SERT PLUS CAR FAIT APRES            -- JE REMETS POUR LA RESTAURATION MAIS FAUT VERIFIER SI EELE SORT NUE CAR FONCTION PLUS DANS UNDOCK FRANCIS 
    --ipc.keypress(52) EN REMARQUE POUR TESTER PATRICK 10039 10043
end
function Undock_Francis ()
    ipc.control(66507,420)-- 66507 = PANEL_ID_OPEN CDU Right   
    mouse.move(80,24,2)-- 2 POUR LA METHODE POURCENTAGE ECRAN    
    mouse.click(2)    
    mouse.move(83,25,2)
    mouse.click()
    ipc.sleep(2000)
    ipc.control(66507,402)-- 66507 = PANEL_ID_OPEN CDU Left  
    mouse.move(1538,842,0)-- 0 POUR LA METHODE X Y    
    mouse.click(2)    
    mouse.move(1586,856,0)-- IDEM
    mouse.click()
    ipc.sleep(2000)
    ipc.control(66507,414)-- 66507 = PANEL_ID_OPEN Zoomed Right Inboard DU	
    mouse.move(1221,265,0)        
    mouse.click(2)    
    mouse.move(1254,275,0)
    mouse.click()
    ipc.sleep(2000)
    ipc.control(66507,415)-- 66507 = PANEL_ID_OPEN Zoomed Right Outboard DU	
    mouse.move(1394,174,0)      
    mouse.click(2)    
    mouse.move(1436,187,0)
    mouse.click()
    ipc.sleep(2000)
    ipc.keypressplus(122,2,4)--FRANCIS MENU ASN GSX
    ipc.sleep(2000)
    mouse.move(960,511)
    ipc.sleep(1000)
    mouse.click(2)--CLIQUE GAUCHE POUR UNDOCK
    ipc.sleep(1000)
    mouse.move(973,520)
    ipc.sleep(1000)
    mouse.click()--POUR UNDOCKER    
    ipc.sleep(2000)
	ext.run(env.."SimConnectW.exe")-- PATRICK
	ipc.log("Lancement du SimConnectW.exe. Undock_Francis actions.lua.")
	ipc.sleep(1500)-- PATRICK
    ipc.keypress(52)-- PATRICK 54 MAIS MOI 52 CAR QUE 4 LIGNES
	ipc.sleep(1000)-- PATRICK
    --ipc.keypressplus(114,27,4)-- PATRICK NE SERT PLUS CAR FAIT APRES -- DEFINITIVEMENT ENLEVE
    --ipc.keypress(52) EN REMARQUE POUR TESTER PATRICK 10039 10043 -- DEFINITIVEMENT ENLEVE
end
function Ouvre_Ferme_vues ()
    ipc.control(66506,414)--FRANCIS  R INBOARD DU 66506 = PANEL_ID_TOGGLE
    ipc.sleep(500)--FRANCIS
    ipc.control(66506,415)--FRANCIS  R OUTBOARD DU ENLEVE RISQUE CRASH 66506 = PANEL_ID_TOGGLE
    ipc.sleep(500)--FRANCIS
    ipc.control(66506,420)--FRANCIS  FO CDU 66506 = PANEL_ID_TOGGLE
    ipc.sleep(500)--FRANCIS
    ipc.control(66506,402)--FRANCIS  CAPT CDU 66506 = PANEL_ID_TOGGLE
    ipc.sleep(500)--FRANCIS
end
function Plein_Ecran ()
    ipc.keypress(113,19,4)-- 19 IDEM 27 SANS 8 BASE CA MARCHE
end
function Vues_nues ()
    ipc.keypressplus(114,27,4)-- 27=8 BASE+16 ALT+2 CTRL+1 SHIFT AVEC F3
end
function IVAP ()    
    ipc.sleep(1000)
    ext.run(FSXchem.."ivap.bat")
	ipc.log("Lancement du ivap.bat. IVAP actions.lua.")
    ipc.sleep(2000)
    mouse.move(403,61)
    mouse.click()
    mouse.click(0,1)
    mouse.click(0,1)
    mouse.move(3390,934)
    mouse.click(0,2)
    mouse.move(3366,1014)--MAIN
    ipc.sleep(1000)
    mouse.click()
    mouse.move(3366,918)--ACARS
    ipc.sleep(1000)
    mouse.click()
    mouse.move(3366,918)--SEND FLIGHT PLAN
    ipc.sleep(1000)
    mouse.click()
    mouse.move(3026,1048)--LOAD
    ipc.sleep(1000)
    mouse.click()
    ipc.keypressplus(16)--FRANCIS APPUI SUR SHIFT POUR DESACTIVER CAPS LOCK
    ipc.sleep(500)
    chem = "C:\\Users\\Francis\\Documents\\IVAP\\"    
    --d = ipc.get("icaoD")
    d = ipc.readSTR(0x700A,4)-- FRANCIS POUR REMPLACER IPC GET
    a = ipc.readSTR(0x66E3,4)
    d=chem..d..a
    ipc.log(d)
    lon = string.len(d)
    for i = 1, lon do
    car = string.byte(string.sub(d,i,i))
        if car == 92 then
        ipc.keypressplus(18,1)
    ipc.sleep(100)
    ipc.keypress(16)
    ipc.sleep(100)
    ipc.keypressplus(18,2)
    ipc.keypress(220)
    ipc.keypressplus(18,1)
    ipc.sleep(100)
    ipc.keypress(16)
    ipc.sleep(100)
    ipc.keypressplus(18,2)
        elseif car>= 97 then car = car -32 ipc.keypress(car)
        elseif car == 58 then car = 191 ipc.keypress(car)
        else
        ipc.keypress(car)
        end
    
    ipc.sleep(200)
    end
    ipc.keypress(13)--Enter pour valider
    
    ipc.sleep(2000)-- A FAIRE 1 MN POUR MODIFIER FPL
    mouse.move(3480,1049)--SEND FPL
    ipc.sleep(1000)
    mouse.click()
    
    mouse.move(3506,1035)--CONNEXION
    ipc.sleep(1000)
    mouse.click()
    mouse.move(3246,963)--CHOIX DU SERVEUR
    ipc.sleep(1000)
    mouse.click()
    mouse.move(3106,1008)--SERVEUR
    ipc.sleep(2000)
    mouse.click()
    mouse.move(3335,1050)--CONNECT
    ipc.sleep(1000)
    mouse.click()-- AU MOMENT DU PB
    mouse.move(946,300)--FOCUS CENTRE ECRAN
    ipc.sleep(1000)
    mouse.click()
end
function STAR ()
    if star == nil then
    ipc.keypressplus(105,8,4)
    ipc.sleep(1000)
    ipc.control(69817,3)-- FRANCIS EFIS PLN
    ipc.sleep(300)
    ipc.control(69974,cg)-- CDU L DEP ARR
    star = 1
    else
    star = nil
    ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
    ipc.sleep(2000)
    ipc.control(69817,2)-- FRANCIS EFIS MAP
    end
end
function VLC ()
     ipc.keypressplus(101,10,4)
end
function Froid_et_Eteint ()
    --Press_CaptCDU_LSK5R()-- POUR LOADER PANEL STD SI PIPER PAR DEFAUT
    --ipc.sleep(1000)
    --Press_CaptCDU_LSK2R()
    --ipc.sleep(1000)
    --Press_CaptCDU_LSK2L()
    --ipc.sleep(1000)
    --Press_CaptCDU_EXEC()
    --ipc.sleep(45000)-- ATTENTE DEMARRAGE MOTEURS
    --ipc.control(69667,0)--L ELEC PUMP OFF
    --ipc.sleep(1000)
    --ipc.control(69667,1)-- L ELEC PUMP AUTO ET FIN MODIF SI PIPER
    ipc.sleep(1000)
    PMDG_EFIS_Baro_hpa ()
    ipc.sleep(1000)
    if ipc.readLvar('switch_181_a') ~= 0 then
    PMDG_Min_RadBaro ()
    end
    ipc.sleep(1000)
    PMDG_Min_reset ()
    ipc.sleep(1000)
	Press_FO_CDU_MENU()
	ipc.sleep (1500)
	GPUvar = ipc.readLvar("NGXGPU")
	Chockvar = ipc.readLvar("NGXWheelChocks")
	if Chockvar == 0 then
	FO_CDU_Wheel_Chocks ()
	end
	ipc.sleep(1000)
	Press_FO_CDU_LSK2L()
	ipc.sleep(500)
	if GPUvar == 0 then
	FO_CDU_ExtPower ()
	end
	ipc.sleep(1500)
	PMDG_PrimExtPower_toggle ()
	ipc.sleep(1000)
	ipc.control(65752) -- Parking Brake
	PMDG_ENG2_cutoff ()
    ipc.sleep(1000)
    PMDG_ENG1_cutoff ()
    ipc.sleep (1000)
    PMDG_VorAdf_L_vor ()--FRANCIS
    ipc.sleep (1000)--FRANCIS
    PMDG_VorAdf_R_vor ()--FRANCIS
    ipc.sleep (1000)--FRANCIS
    PMDG_FO_VorAdf_L_vor ()--FRANCIS
    ipc.sleep (1000)--FRANCIS
    PMDG_FO_VorAdf_R_adf ()--FRANCIS
    ipc.sleep (1000)--FRANCIS
    Seat_Belts_off ()
    ipc.sleep(1000)
    No_Smoking_off ()
    ipc.sleep(1000)
    FuelPump_CenterL_off ()
    ipc.sleep(1000)
    FuelPump_CenterR_off ()
    ipc.sleep(1000)
    FuelPump_AFT1_off ()
    ipc.sleep(1000)
    FuelPump_AFT2_off ()
    ipc.sleep(1000)
    FuelPump_FWD1_off ()
    ipc.sleep(1000)
    FuelPump_FWD2_off ()
    ipc.sleep(1000)
    FuelPump_Aux_off ()--FUNCTION CREE PATRICK
    ipc.sleep(1000)--FRANCIS
    PMDG_HydC1andC2_off ()
    ipc.sleep(1000)
    PMDG_All_HydRotaries_off ()
    ipc.sleep(1000)
    ipc.control(69632 + 529,cg)-- EVT_COM1_VHFL_SWITCH
    ipc.control(69632 + 529,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 798,cg)-- EVT_COM2_VHFL_SWITCH
    ipc.control(69632 + 798,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 601,cg)-- EVT_COM3_VHFC_SWITCH
    ipc.control(69632 + 601,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 532,cg)-- EVT_COM1_PNL_OFF_SWITCH
    ipc.sleep(1000)
    ipc.control(69632 + 795,cg)-- EVT_COM2_PNL_OFF_SWITCH
    ipc.sleep(1000)
    ipc.control(69632 + 603,cg)-- EVT_COM3_PNL_OFF_SWITCH
    ipc.sleep(1000)
    ipc.control(69632 + 536,cg)-- EVT_ACP_CAPT_MIC_VHFL
    ipc.control(69632 + 536,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 789,cg)-- EVT_ACP_FO_MIC_VHFR
    ipc.control(69632 + 789,131072)
    ipc.sleep(1000)
    ipc.control(69632 + 608,cg)-- EVT_ACP_OBS_MIC_VHFC
    ipc.control(69632 + 608,131072)
    ipc.sleep(1000)
    PMDG_LPack_off ()
    ipc.sleep(1000)
    PMDG_RPack_off ()
    ipc.sleep(1000)
    PMDG_ADIRU_off ()
    ipc.sleep(1000)
    Emer_Light_off ()
    ipc.sleep(1000)
    ipc.writeUW(0x0354,0x2360)--FRANCIS
    ipc.sleep(1000)--FRANCIS
    Battery_off ()
    ipc.sleep(1000)
    PMDG_TCAS_dec ()
    ipc.sleep(300)
    PMDG_TCAS_dec ()
    ipc.sleep(300)
    PMDG_TCAS_dec ()
    ipc.sleep(300)
    PMDG_TCAS_dec ()
    ipc.sleep(1000)
    FO_CDU_ExtPower ()
    ipc.sleep(2000)
    Undock_Francis ()
    ipc.sleep(2000)
    ipc.control(66508,414)-- 66508 = PANEL_ID_CLOSE FO ND
    ipc.control(66508,420)-- 66508 = PANEL_ID_CLOSE FO CDU
    ipc.control(66508,402)-- 66508 = PANEL_ID_CLOSE CPT CDU
    ipc.control(66508,415)-- 66508 = PANEL_ID_CLOSE FO PFD
    ipc.keypressplus(49,11,4)-- PASSE EN VUE EXTERIEURE
    ipc.sleep(20000)
    FSXchem1 = ipc.readSTR(0x3C00,255)
    long = string.find(string.sub(FSXchem1,1),"planes\\")
    long1 = string.find(string.sub(FSXchem1,long+9),"\\")
    FSXaicfg = string.sub(FSXchem1,1,long1+long+8).."Aircraft.cfg"
    title = ipc.readSTR(0x3D00,256)
    i=1
    while string.byte(title,i) ~= 0 do
    i=i+1
    end
    lon = i -1
    title = string.sub(title,1,lon)
    --ipc.log(title)
    --ipc.log(string.len(title))
    file = io.open(FSXaicfg, "r")
        for i = 1,600 do
        title1 = file:read ("*l")
        --ipc.log(title1)
        if string.find(title1,"title=")~= nil then
            --ipc.log(title1)
            --ipc.log(string.sub(title1,7))
            --ipc.log(string.len(string.sub(title1,7)))
            if string.sub(title1,7) == title then
                --ipc.log("OK")
                for j=1,10 do
                title1 = file:read ("*l")
                --ipc.log(title1)
                if string.find(title1,"atc_id=")~= nil then
                atc = string.sub(title1,8)
                file:close()
                --ipc.log(atc)
                break
                end
                end
                break
            end
        end
        end
        if string.find(atc,"-")~=nil then
        lon =  string.find(atc,"-")
        atc1 = string.sub(atc,1,lon-1)
        atc2 = string.sub(atc,lon+1)
        atc = atc1.."_"..atc2
        --ipc.log(atc)
        end
    --ici1=ipc.readSTR(0x0658, 4)
    ICAO1 ()
    nomt = "777_"..atc.."_C&D_"..ici1
    ipc.writeSTR(0x3F04,nomt .."")
    ipc.writeUB(0x3F00,1)
    ipc.display("Situation sauvegardée sous "..nomt,1,10)
	sit1 = ipc.readSTR(0x1000,255)
    long = string.find(sit1,"les\\")
    if long == nil then
    long = string.find(sit1,"r X\\")
    end
    sit=string.sub(sit1,1,long+3)
	nomt = sit..nomt
	DST = ipc.readSW(0x0246)/60*-1
	file = io.open(nomt..".UTC", "w+")
	file:write(DST)
	file:close()
	ext.run(env.."P3DFinV4.exe")
	ipc.log("Lancement du P3DFinV4.exe. Froid et Eteint actions.lua.")
end
-- ## Francis EZCA ##
function Num_5 ()
   ipc.keypressplus(101)
   
end
function Num_div ()
   ipc.keypressplus(111)
   
end
function Num_7 ()
   ipc.keypressplus(103)
end
function Num_1 ()
   ipc.keypressplus(97)
end
function Num_3 ()
   ipc.keypressplus(99)
end
function Num_8 ()
    ipc.keypressplus(104)
end
function Num_4 ()
    ipc.keypressplus(100)
end
function Num_6 ()
    ipc.keypressplus(102)
end
function Num_9 ()
    ipc.keypressplus(105)
end
function A_moi ()
    ipc.keypressplus(100,2)
end
function Haut ()
    ipc.keypressplus(33)
end
function Bas ()
    ipc.keypressplus(34)
end
function Plus ()
    ipc.keypressplus(107)
end
function Moins ()
    ipc.keypressplus(109)
end
function Avant ()
    ipc.keypressplus(38)
end
function Arrier ()
    ipc.keypressplus(40)
end
function Droite ()
    ipc.keypressplus(39)
end
function Gauche ()
    ipc.keypressplus(37)
end
function Reset_EZCA ()
    cmd = 'taskkill /f /im EZCA.exe '
    os.execute(cmd)
    ipc.sleep(2000)
    ext.runif("C:\\Program Files (x86)\\EZCA2\\EZCA.exe")
	ipc.log("Lancement EZCA.exe. Reset_EZCA actions.lua.")
    ipc.sleep(10000)
    ext.focus(0)
end
-- ## Francis Tests ##
function Francis_Test1 ()

      --Vue_Ext_Francis ()

        --Francis_Lua_Display ()
      --ipc.display("Situation sauvegardée sous")
Undock_Francis ()	  

    --x, y = mouse.getpos()
    --ipc.log(x.." "..y)

    --sound.play ("\\Mes sons\\song15.wav")
	
    --ipc.keypressplus(57,10,4)
    --ipc.keypressplus(49,11,4)
	--ipc.keypressplus(72,8,4)
    --Vue_Ext ()
    --ipc.control(69733,cd)
    --ipc.writeUW(0x311C,0x2280)
    --ipc.sleep(500)
    --ipc.control(70433,cg)
    --ipc.display("Tests",1,30)
    --ipc.sleep(10000)
    --ipc.control(66506,402)--FRANCIS CPT CDU 66506 = PANEL_ID_TOGGLE
    --ipc.sleep(1000)
    -- mouse.move(1538,842)
    -- ipc.sleep(1000)
    --mouse.click(2)
    --ipc.sleep(2000)
    -- mouse.move(1586,856)
    -- mouse.click()
    --ext.run("C:\\Windows\\Notepad.exe",EXT_FOCUS)
    --ipc.writeUB(0x0366,0)
    --AG =  ipc.readUB (0x0366)
    --ipc.log(AG)
    --cmd = 'taskkill /f /im ivap_dllhost.exe'
	--os.execute(cmd)
    --x, y, xr, yr, xp, yp = mouse.getpos()
    --ipc.log(xp.." "..yp)
    --ipc.log(xr.." "..yr)
    --ipc.log(x.." "..y)
    --ipc.writeSTR(0x0130,"DNMMFACT.pln".."")
    --mouse.move(3438,198)
    --mouse.click()
end

function Francis_Test2 ()

mouse.move(20,400)--Patrick
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
		mouse.click()--Patrick.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        ipc.control(65825)-- FRANCIS NEW VIEW. Ce control = Menu Views/New View = donne la vue cockpit dans la fenêtre intérieur.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne
		
        ipc.sleep(150)-- Francis
        --ipc.control(66856)-- FRANCIS VIEW CAMERA SELECT 6. Ce control donne la vue Camera Taxi = vue roulette du menu Aircraft du New View. Ne marche plus 31072017. Je reprogramme en dessous.
		mouse.move(159,207) -- Dans la fenêtre New view.
		mouse.click(2)
		mouse.move(200,324) -- Dans Aircraft.
		ipc.sleep(1000)
		mouse.move(406,323) -- Latéralement EZCA2
		ipc.sleep(1000)
		mouse.move(419,710) -- Camera taxi.
		mouse.click()
		mouse.move(698,300) -- Bordure pour Undocker
		mouse.click(2)
		mouse.move(750,571) -- Sur la ligne Undock.
		mouse.click()
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        --ipc.control(65828)--Patrick.
        ipc.sleep(3000)
        --mouse.move(394,201)--Patrick. Postitionne la souris dans la petite fenêtre. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
		-- mouse.click(2)--Patrick. Pour ouvrir le menu où se trouve la commande undock. Le (2) = click droit. 0 ou rien = gauche. 1 milieu. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.		
		
		-- mouse.move(405,449)--Patrick. Francis c'est la position de la souris pour undocker. Valeur originale de Patrick 478,452. Je teste avec 405,449. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--ipc.sleep(2000) -- Francis pour tester comment cela fonctionne. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--mouse.click()--Patrick. Pour undocker. Ne marche plus 31072017. Je reprogramme en dessous.
		
		--ipc.sleep(5000) -- Francis pour tester comment cela fonctionne.
		
        --ipc.sleep(500)--Patrick.
        --mouse.move(20,400)--Patrick.
		--mouse.click()--Patrick.
        --ipc.keypressplus(103,8,4) -- Francis vue Cockpit pilote = NumPad 7.
		ext.run(env.."MouseClick.exe") -- Pour simuler NUMPAD 7 = Vue Pilote.
		ipc.log("Lancement MouseClick.exe. Vue_Ext actions.lua.")
        vue = 1
		ipc.writeUB(0x7002,1)
		ipc.sleep(2000)
		ipc.keypressplus(114,27,4) -- POUR ENLEVER LES BORDURES 27= CTRL2+ALT16+SHIFT1+8 DE BASE
        ipc.sleep(1000)
		ipc.keypressplus(114,27,4) -- POUR ENLEVER LES BORDURES 27= CTRL2+ALT16+SHIFT1+8 DE BASE


--ipc.keypressplus(100,10,4)
--ipc.keypressplus(55,10,4)
--ipc.writeUB (0x0366,0)

--ASN_Weather ()
--ipc.keypressplus(103,10,4)
--ipc.sleep(500)
--ipc.keypressplus(57,8,4)
--ipc.keypress(105,10,4)
--ipc.sleep(2500)
--ipc.keypressplus(105,10,4)
     --ipc.control(65825)
     --ipc.control(66856)
	 --ipc.keypressplus(107,8,4)
	   --ipc.keypressplus(49,11,4)
	   --ipc.keypressplus(72,8,4)
     --Vue_Ext ()
     --ipc.control(65825)
     --ipc.sleep(10000)
     --ipc.control(66856)

     --ipc.control(69632+573,cg)
     --ipc.control(69632+573,131072)
     --ipc.control(65752)
     --ipc.readUW(0x034E)

    --ipc.control(70381, 4)
    --ipc.display("test",1,30)
    --ipc.sleep(10000)
    --x, y, xr, yr, xp, yp = mouse.getpos()
    --ipc.log(xp.." "..yp)
    --ipc.log(xr.." "..yr)
    --ipc.log(x.." "..y)
    --x, y = mouse.getpos()
    --ipc.log(x.." "..y)
	
	
end

function DestProc ()
    if dpc == nil then
    ipc.control(69817,3) -- EVT_EFIS_CPT_MODE
    ipc.sleep(200)
    ipc.control(69819,2) -- EVT_EFIS_CPT_RANGE
    ipc.sleep(200)
    ipc.control(69974,cg) -- EVT_CDU_L_DEP_ARR
    ipc.sleep(200)
    ipc.control(69974,cg) -- EVT_CDU_L_DEP_ARR
    dpc= 1
    else
    ipc.control(69817,2) -- EVT_EFIS_CPT_MODE
    ipc.sleep(200)
    ipc.control(69819,4) -- EVT_EFIS_CPT_RANGE
    dpc = nil
    end
end

-- Just a message in console
_log("[USER] User's modifications script is loaded...")